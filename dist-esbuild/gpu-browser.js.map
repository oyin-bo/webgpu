{
  "version": 3,
  "sources": ["../node_modules/acorn/dist/acorn.js", "../src/input.js", "../src/texture.js", "../src/utils.js", "../src/backend/kernel.js", "../src/backend/function-builder.js", "../src/backend/function-tracer.js", "../src/backend/function-node.js", "../src/backend/cpu/function-node.js", "../src/backend/cpu/kernel-string.js", "../src/backend/cpu/kernel.js", "../src/backend/gl/texture/index.js", "../src/backend/gl/texture/float.js", "../src/backend/gl/texture/array-2-float.js", "../src/backend/gl/texture/array-2-float-2d.js", "../src/backend/gl/texture/array-2-float-3d.js", "../src/backend/gl/texture/array-3-float.js", "../src/backend/gl/texture/array-3-float-2d.js", "../src/backend/gl/texture/array-3-float-3d.js", "../src/backend/gl/texture/array-4-float.js", "../src/backend/gl/texture/array-4-float-2d.js", "../src/backend/gl/texture/array-4-float-3d.js", "../src/backend/gl/texture/float-2d.js", "../src/backend/gl/texture/float-3d.js", "../src/backend/gl/texture/memory-optimized.js", "../src/backend/gl/texture/memory-optimized-2d.js", "../src/backend/gl/texture/memory-optimized-3d.js", "../src/backend/gl/texture/unsigned.js", "../src/backend/gl/texture/unsigned-2d.js", "../src/backend/gl/texture/unsigned-3d.js", "../src/backend/gl/texture/graphical.js", "../src/backend/gl/kernel.js", "../src/backend/web-gl/function-node.js", "../src/plugins/math-random-uniformly-distributed.js", "../src/backend/web-gl/fragment-shader.js", "../src/backend/web-gl/vertex-shader.js", "../node_modules/gl-wiretap/index.js", "../src/backend/gl/kernel-string.js", "../src/backend/kernel-value.js", "../src/backend/web-gl/kernel-value/index.js", "../src/backend/web-gl/kernel-value/boolean.js", "../src/backend/web-gl/kernel-value/float.js", "../src/backend/web-gl/kernel-value/integer.js", "../src/backend/web-gl/kernel-value/array.js", "../src/backend/web-gl/kernel-value/html-image.js", "../src/backend/web-gl/kernel-value/dynamic-html-image.js", "../src/backend/web-gl/kernel-value/html-video.js", "../src/backend/web-gl/kernel-value/dynamic-html-video.js", "../src/backend/web-gl/kernel-value/single-input.js", "../src/backend/web-gl/kernel-value/dynamic-single-input.js", "../src/backend/web-gl/kernel-value/unsigned-input.js", "../src/backend/web-gl/kernel-value/dynamic-unsigned-input.js", "../src/backend/web-gl/kernel-value/memory-optimized-number-texture.js", "../src/backend/web-gl/kernel-value/dynamic-memory-optimized-number-texture.js", "../src/backend/web-gl/kernel-value/number-texture.js", "../src/backend/web-gl/kernel-value/dynamic-number-texture.js", "../src/backend/web-gl/kernel-value/single-array.js", "../src/backend/web-gl/kernel-value/dynamic-single-array.js", "../src/backend/web-gl/kernel-value/single-array1d-i.js", "../src/backend/web-gl/kernel-value/dynamic-single-array1d-i.js", "../src/backend/web-gl/kernel-value/single-array2d-i.js", "../src/backend/web-gl/kernel-value/dynamic-single-array2d-i.js", "../src/backend/web-gl/kernel-value/single-array3d-i.js", "../src/backend/web-gl/kernel-value/dynamic-single-array3d-i.js", "../src/backend/web-gl/kernel-value/array2.js", "../src/backend/web-gl/kernel-value/array3.js", "../src/backend/web-gl/kernel-value/array4.js", "../src/backend/web-gl/kernel-value/unsigned-array.js", "../src/backend/web-gl/kernel-value/dynamic-unsigned-array.js", "../src/backend/web-gl/kernel-value-maps.js", "../src/backend/web-gl/kernel.js", "../src/backend/web-gl2/function-node.js", "../src/backend/web-gl2/fragment-shader.js", "../src/backend/web-gl2/vertex-shader.js", "../src/backend/web-gl2/kernel-value/boolean.js", "../src/backend/web-gl2/kernel-value/float.js", "../src/backend/web-gl2/kernel-value/integer.js", "../src/backend/web-gl2/kernel-value/html-image.js", "../src/backend/web-gl2/kernel-value/dynamic-html-image.js", "../src/backend/web-gl2/kernel-value/html-image-array.js", "../src/backend/web-gl2/kernel-value/dynamic-html-image-array.js", "../src/backend/web-gl2/kernel-value/html-video.js", "../src/backend/web-gl2/kernel-value/dynamic-html-video.js", "../src/backend/web-gl2/kernel-value/single-input.js", "../src/backend/web-gl2/kernel-value/dynamic-single-input.js", "../src/backend/web-gl2/kernel-value/unsigned-input.js", "../src/backend/web-gl2/kernel-value/dynamic-unsigned-input.js", "../src/backend/web-gl2/kernel-value/memory-optimized-number-texture.js", "../src/backend/web-gl2/kernel-value/dynamic-memory-optimized-number-texture.js", "../src/backend/web-gl2/kernel-value/number-texture.js", "../src/backend/web-gl2/kernel-value/dynamic-number-texture.js", "../src/backend/web-gl2/kernel-value/single-array.js", "../src/backend/web-gl2/kernel-value/dynamic-single-array.js", "../src/backend/web-gl2/kernel-value/single-array1d-i.js", "../src/backend/web-gl2/kernel-value/dynamic-single-array1d-i.js", "../src/backend/web-gl2/kernel-value/single-array2d-i.js", "../src/backend/web-gl2/kernel-value/dynamic-single-array2d-i.js", "../src/backend/web-gl2/kernel-value/single-array3d-i.js", "../src/backend/web-gl2/kernel-value/dynamic-single-array3d-i.js", "../src/backend/web-gl2/kernel-value/array2.js", "../src/backend/web-gl2/kernel-value/array3.js", "../src/backend/web-gl2/kernel-value/array4.js", "../src/backend/web-gl2/kernel-value/unsigned-array.js", "../src/backend/web-gl2/kernel-value/dynamic-unsigned-array.js", "../src/backend/web-gl2/kernel-value-maps.js", "../src/backend/web-gl2/kernel.js", "../src/kernel-run-shortcut.js", "../src/gpu.js", "../src/alias.js", "../src/index.js", "../src/browser.js"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.acorn = {}));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  };\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  };\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n\n  // eslint-disable-next-line comma-spacing\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n  // eslint-disable-next-line comma-spacing\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) { return false }\n      pos += set[i + 1];\n      if (pos >= code) { return true }\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) { return code === 36 }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) { return code === 36 }\n    if (code < 58) { return true }\n    if (code < 65) { return false }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n  // Map keyword names to token types.\n\n  var keywords$1 = {};\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name;\n    return keywords$1[name] = new TokenType(name, options)\n  }\n\n  var types = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  };\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code, ecma2019String) {\n    return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  var ref = Object.prototype;\n  var hasOwnProperty = ref.hasOwnProperty;\n  var toString = ref.toString;\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return hasOwnProperty.call(obj, propName)\n  }\n\n  var isArray = Array.isArray || (function (obj) { return (\n    toString.call(obj) === \"[object Array]\"\n  ); });\n\n  function wordsRegexp(words) {\n    return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur;\n      var match = lineBreakG.exec(input);\n      if (match && match.index < offset) {\n        ++line;\n        cur = match.index + match[0].length;\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n    // (2019). This influences support for strict mode, the set of\n    // reserved words, and support for new syntax features. The default\n    // is 10.\n    ecmaVersion: 10,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // the position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback\u2014that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback\u2014that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n  };\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions)\n      { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n    if (options.ecmaVersion >= 2015)\n      { options.ecmaVersion -= 2009; }\n\n    if (options.allowReserved == null)\n      { options.allowReserved = options.ecmaVersion < 5; }\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n      options.onToken = function (token) { return tokens.push(token); };\n    }\n    if (isArray(options.onComment))\n      { options.onComment = pushComment(options, options.onComment); }\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations)\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n      if (options.ranges)\n        { comment.range = [start, end]; }\n      array.push(comment);\n    }\n  }\n\n  // Each scope gets a bitset that may contain these flags\n  var\n      SCOPE_TOP = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128;\n\n  function functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n  }\n\n  // Used in checkLVal and declareName to determine the type of a binding\n  var\n      BIND_NONE = 0, // Not a binding\n      BIND_VAR = 1, // Var-style binding\n      BIND_LEXICAL = 2, // Let- or const-style binding\n      BIND_FUNCTION = 3, // Function declaration\n      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n      for (var v = options.ecmaVersion;; v--)\n        { if (reserved = reservedWords[v]) { break } }\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = {};\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n      { this.skipLineComment(2); }\n\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n\n    // For RegExp validation\n    this.regexpState = null;\n  };\n\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node)\n  };\n\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\n  prototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n  // Switch to a getter for 7.0.0.\n  Parser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\n  Parser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  Parser.parse = function parse (input, options) {\n    return new this(options, input).parse()\n  };\n\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression()\n  };\n\n  Parser.tokenizer = function tokenizer (input, options) {\n    return new this(options, input)\n  };\n\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\n\n  var pp = Parser.prototype;\n\n  // ## Parser utilities\n\n  var literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;\n  pp.strictDirective = function(start) {\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      var match = literal.exec(this.input.slice(start));\n      if (!match) { return false }\n      if ((match[1] || match[2]) === \"use strict\") { return true }\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\")\n        { start++; }\n    }\n  };\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === types.name && this.value === name && !this.containsEsc\n  };\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    if (!this.isContextual(name)) { return false }\n    this.next();\n    return true\n  };\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) { this.unexpected(); }\n  };\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === types.eof ||\n      this.type === types.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n      return true\n    }\n  };\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n  };\n\n  pp.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n      if (this.options.onTrailingComma)\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n      if (!notNext)\n        { this.next(); }\n      return true\n    }\n  };\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected();\n  };\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  function DestructuringErrors() {\n    this.shorthandAssign =\n    this.trailingComma =\n    this.parenthesizedAssign =\n    this.parenthesizedBind =\n    this.doubleProto =\n      -1;\n  }\n\n  pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) { return }\n    if (refDestructuringErrors.trailingComma > -1)\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n  };\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) { return false }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n    if (shorthandAssign >= 0)\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n    if (doubleProto >= 0)\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n  };\n\n  pp.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n    if (this.awaitPos)\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n  };\n\n  pp.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\")\n      { return this.isSimpleAssignTarget(expr.expression) }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n  };\n\n  var pp$1 = Parser.prototype;\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var exports = {};\n    if (!node.body) { node.body = []; }\n    while (this.type !== types.eof) {\n      var stmt = this.parseStatement(null, true, exports);\n      node.body.push(stmt);\n    }\n    if (this.inModule)\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n        {\n          var name = list[i];\n\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n        } }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  pp$1.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91) { return true } // '['\n    if (context) { return false }\n\n    if (nextCh === 123) { return true } // '{'\n    if (isIdentifierStart(nextCh, true)) {\n      var pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n      var ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) { return true }\n    }\n    return false\n  };\n\n  // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n  pp$1.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n      { return false }\n\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length;\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n  };\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case types._debugger: return this.parseDebuggerStatement(node)\n    case types._do: return this.parseDoStatement(node)\n    case types._for: return this.parseForStatement(node)\n    case types._function:\n      // Function as sole body of either an if statement or a labeled statement\n      // works, but not when it is part of a labeled statement that is the sole\n      // body of an if statement.\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n      return this.parseFunctionStatement(node, false, !context)\n    case types._class:\n      if (context) { this.unexpected(); }\n      return this.parseClass(node, true)\n    case types._if: return this.parseIfStatement(node)\n    case types._return: return this.parseReturnStatement(node)\n    case types._switch: return this.parseSwitchStatement(node)\n    case types._throw: return this.parseThrowStatement(node)\n    case types._try: return this.parseTryStatement(node)\n    case types._const: case types._var:\n      kind = kind || this.value;\n      if (context && kind !== \"var\") { this.unexpected(); }\n      return this.parseVarStatement(node, kind)\n    case types._while: return this.parseWhileStatement(node)\n    case types._with: return this.parseWithStatement(node)\n    case types.braceL: return this.parseBlock(true, node)\n    case types.semi: return this.parseEmptyStatement(node)\n    case types._export:\n    case types._import:\n      if (this.options.ecmaVersion > 10 && starttype === types._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        if (nextCh === 40) // '('\n          { return this.parseExpressionStatement(node, this.parseExpression()) }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n        if (!this.inModule)\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n      }\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) { this.unexpected(); }\n        this.next();\n        return this.parseFunctionStatement(node, true, !context)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression();\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\n      else { return this.parseExpressionStatement(node, expr) }\n    }\n  };\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n    else if (this.type !== types.name) { this.unexpected(); }\n    else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for (; i < this.labels.length; ++i) {\n      var lab = this.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n        if (node.label && isBreak) { break }\n      }\n    }\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  };\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n  };\n\n  pp$1.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6)\n      { this.eat(types.semi); }\n    else\n      { this.semicolon(); }\n    return this.finishNode(node, \"DoWhileStatement\")\n  };\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types.parenL);\n    if (this.type === types.semi) {\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, null)\n    }\n    var isLet = this.isLet();\n    if (this.type === types._var || this.type === types._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n        if (this.options.ecmaVersion >= 9) {\n          if (this.type === types._in) {\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\n          } else { node.await = awaitAt > -1; }\n        }\n        return this.parseForIn(node, init$1)\n      }\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors;\n    var init = this.parseExpression(true, refDestructuringErrors);\n    if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      this.toAssignable(init, false, refDestructuringErrors);\n      this.checkLVal(init);\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init)\n  };\n\n  pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n  };\n\n  pp$1.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\")\n  };\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      { this.raise(this.start, \"'return' outside of function\"); }\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n  };\n\n  pp$1.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    var cur;\n    for (var sawDefault = false; this.type !== types.braceR;) {\n      if (this.type === types._case || this.type === types._default) {\n        var isCase = this.type === types._case;\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(types.colon);\n      } else {\n        if (!cur) { this.unexpected(); }\n        cur.consequent.push(this.parseStatement(null));\n      }\n    }\n    this.exitScope();\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\")\n  };\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n  };\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = [];\n\n  pp$1.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(types.parenL)) {\n        clause.param = this.parseBindingAtom();\n        var simple = clause.param.type === \"Identifier\";\n        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n        this.expect(types.parenR);\n      } else {\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\n        clause.param = null;\n        this.enterScope(0);\n      }\n      clause.body = this.parseBlock(false);\n      this.exitScope();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer)\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\n    return this.finishNode(node, \"TryStatement\")\n  };\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\")\n  };\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\")\n  };\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n  };\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n      {\n      var label = list[i$1];\n\n      if (label.name === maybeName)\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    } }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n    for (var i = this.labels.length - 1; i >= 0; i--) {\n      var label$1 = this.labels[i];\n      if (label$1.statementStart === node.start) {\n        // Update information about previous labels on this node\n        label$1.statementStart = this.start;\n        label$1.kind = kind;\n      } else { break }\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\")\n  };\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\")\n  };\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(createNewLexicalScope, node) {\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n    if ( node === void 0 ) node = this.startNode();\n\n    node.body = [];\n    this.expect(types.braceL);\n    if (createNewLexicalScope) { this.enterScope(0); }\n    while (!this.eat(types.braceR)) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    if (createNewLexicalScope) { this.exitScope(); }\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.type === types.semi ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.type === types.parenR ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var isForIn = this.type === types._in;\n    this.next();\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (\n        !isForIn ||\n        this.options.ecmaVersion < 8 ||\n        this.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\"\n      )\n    ) {\n      this.raise(\n        init.start,\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n  };\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n        this.unexpected();\n      } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) { break }\n    }\n    return node\n  };\n\n  pp$1.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n  };\n\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n  // Parse a function declaration or literal (depending on the\n  // `statement & FUNC_STATEMENT`).\n\n  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n  pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n      if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n        { this.unexpected(); }\n      node.generator = this.eat(types.star);\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    if (statement & FUNC_STATEMENT) {\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n        // If it is a regular function declaration in sloppy mode, then it is\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n        // mode depends on properties of the current scope (see\n        // treatFunctionsAsVar).\n        { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n    }\n\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n\n    if (!(statement & FUNC_STATEMENT))\n      { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n  };\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    this.next();\n\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      var element = this.parseClassElement(node.superClass !== null);\n      if (element) {\n        classBody.body.push(element);\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n          if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n          hadConstructor = true;\n        }\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  pp$1.parseClassElement = function(constructorAllowsSuper) {\n    var this$1 = this;\n\n    if (this.eat(types.semi)) { return null }\n\n    var method = this.startNode();\n    var tryContextual = function (k, noLineBreak) {\n      if ( noLineBreak === void 0 ) noLineBreak = false;\n\n      var start = this$1.start, startLoc = this$1.startLoc;\n      if (!this$1.eatContextual(k)) { return false }\n      if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n      if (method.key) { this$1.unexpected(); }\n      method.computed = false;\n      method.key = this$1.startNodeAt(start, startLoc);\n      method.key.name = k;\n      this$1.finishNode(method.key, \"Identifier\");\n      return false\n    };\n\n    method.kind = \"method\";\n    method.static = tryContextual(\"static\");\n    var isGenerator = this.eat(types.star);\n    var isAsync = false;\n    if (!isGenerator) {\n      if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n      } else if (tryContextual(\"get\")) {\n        method.kind = \"get\";\n      } else if (tryContextual(\"set\")) {\n        method.kind = \"set\";\n      }\n    }\n    if (!method.key) { this.parsePropertyName(method); }\n    var key = method.key;\n    var allowsDirectSuper = false;\n    if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n        key.type === \"Literal\" && key.value === \"constructor\")) {\n      if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n      method.kind = \"constructor\";\n      allowsDirectSuper = constructorAllowsSuper;\n    } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n    this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n    if (method.kind === \"get\" && method.value.params.length !== 0)\n      { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n    if (method.kind === \"set\" && method.value.params.length !== 1)\n      { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n    if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n    return method\n  };\n\n  pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n    return this.finishNode(method, \"MethodDefinition\")\n  };\n\n  pp$1.parseClassId = function(node, isStatement) {\n    if (this.type === types.name) {\n      node.id = this.parseIdent();\n      if (isStatement)\n        { this.checkLVal(node.id, BIND_LEXICAL, false); }\n    } else {\n      if (isStatement === true)\n        { this.unexpected(); }\n      node.id = null;\n    }\n  };\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  };\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat(types.star)) {\n      this.expectContextual(\"from\");\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n      this.semicolon();\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(types._default)) { // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart);\n      var isAsync;\n      if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) { this.next(); }\n        node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n      } else if (this.type === types._class) {\n        var cNode = this.startNode();\n        node.declaration = this.parseClass(cNode, \"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(null);\n      if (node.declaration.type === \"VariableDeclaration\")\n        { this.checkVariableExport(exports, node.declaration.declarations); }\n      else\n        { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n      node.specifiers = [];\n      node.source = null;\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n      if (this.eatContextual(\"from\")) {\n        if (this.type !== types.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n      } else {\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n          // check for keywords used as local names\n          var spec = list[i];\n\n          this.checkUnreserved(spec.local);\n          // check if export is defined\n          this.checkLocalExport(spec.local);\n        }\n\n        node.source = null;\n      }\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  pp$1.checkExport = function(exports, name, pos) {\n    if (!exports) { return }\n    if (has(exports, name))\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n    exports[name] = true;\n  };\n\n  pp$1.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\")\n      { this.checkExport(exports, pat.name, pat.start); }\n    else if (type === \"ObjectPattern\")\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n        {\n          var prop = list[i];\n\n          this.checkPatternExport(exports, prop);\n        } }\n    else if (type === \"ArrayPattern\")\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n        var elt = list$1[i$1];\n\n          if (elt) { this.checkPatternExport(exports, elt); }\n      } }\n    else if (type === \"Property\")\n      { this.checkPatternExport(exports, pat.value); }\n    else if (type === \"AssignmentPattern\")\n      { this.checkPatternExport(exports, pat.left); }\n    else if (type === \"RestElement\")\n      { this.checkPatternExport(exports, pat.argument); }\n    else if (type === \"ParenthesizedExpression\")\n      { this.checkPatternExport(exports, pat.expression); }\n  };\n\n  pp$1.checkVariableExport = function(exports, decls) {\n    if (!exports) { return }\n    for (var i = 0, list = decls; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      this.checkPatternExport(exports, decl.id);\n    }\n  };\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" ||\n      this.type.keyword === \"const\" ||\n      this.type.keyword === \"class\" ||\n      this.type.keyword === \"function\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n  };\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var node = this.startNode();\n      node.local = this.parseIdent(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n      this.checkExport(exports, node.exported.name, node.exported.start);\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n    return nodes\n  };\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next();\n    // import '...'\n    if (this.type === types.string) {\n      node.specifiers = empty;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode();\n      node.local = this.parseIdent();\n      this.checkLVal(node.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n      if (!this.eat(types.comma)) { return nodes }\n    }\n    if (this.type === types.star) {\n      var node$1 = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      node$1.local = this.parseIdent();\n      this.checkLVal(node$1.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n      return nodes\n    }\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var node$2 = this.startNode();\n      node$2.imported = this.parseIdent(true);\n      if (this.eatContextual(\"as\")) {\n        node$2.local = this.parseIdent();\n      } else {\n        this.checkUnreserved(node$2.imported);\n        node$2.local = node$2.imported;\n      }\n      this.checkLVal(node$2.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n    }\n    return nodes\n  };\n\n  // Set `ExpressionStatement#directive` property for directive prologues.\n  pp$1.adaptDirectivePrologue = function(statements) {\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n  };\n  pp$1.isDirectiveCandidate = function(statement) {\n    return (\n      statement.type === \"ExpressionStatement\" &&\n      statement.expression.type === \"Literal\" &&\n      typeof statement.expression.value === \"string\" &&\n      // Reject parenthesized strings.\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n    )\n  };\n\n  var pp$2 = Parser.prototype;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"RestElement\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n\n        this.toAssignable(prop, isBinding);\n          // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n          if (\n            prop.type === \"RestElement\" &&\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n          ) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n        break\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n        this.toAssignable(node.value, isBinding);\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        this.toAssignableList(node.elements, isBinding);\n        break\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n        if (node.argument.type === \"AssignmentPattern\")\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n        // falls through to AssignmentPattern\n\n      case \"AssignmentPattern\":\n        break\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) { break }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n      }\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n    return node\n  };\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) { this.toAssignable(elt, isBinding); }\n    }\n    if (end) {\n      var last = exprList[end - 1];\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        { this.unexpected(last.argument.start); }\n    }\n    return exprList\n  };\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\")\n  };\n\n  pp$2.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== types.name)\n      { this.unexpected(); }\n\n    node.argument = this.parseBindingAtom();\n\n    return this.finishNode(node, \"RestElement\")\n  };\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n      switch (this.type) {\n      case types.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\")\n\n      case types.braceL:\n        return this.parseObj(true)\n      }\n    }\n    return this.parseIdent()\n  };\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (first) { first = false; }\n      else { this.expect(types.comma); }\n      if (allowEmpty && this.type === types.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break\n      } else if (this.type === types.ellipsis) {\n        var rest = this.parseRestBinding();\n        this.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        this.expect(close);\n        break\n      } else {\n        var elem = this.parseMaybeDefault(this.start, this.startLoc);\n        this.parseBindingListItem(elem);\n        elts.push(elem);\n      }\n    }\n    return elts\n  };\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  };\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\")\n  };\n\n  // Verify that a node is an lval \u2014 something that can be assigned\n  // to.\n  // bindingType can be either:\n  // 'var' indicating that the lval creates a 'var' binding\n  // 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n  // 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\n  pp$2.checkLVal = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n      break\n\n    case \"MemberExpression\":\n      if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1)\n        {\n      var prop = list[i];\n\n      this.checkLVal(prop, bindingType, checkClashes);\n    }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLVal(expr.value, bindingType, checkClashes);\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n      if (elem) { this.checkLVal(elem, bindingType, checkClashes); }\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, bindingType, checkClashes);\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, bindingType, checkClashes);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, bindingType, checkClashes);\n      break\n\n    default:\n      this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  };\n\n  // A recursive descent parser operates by defining functions for all\n\n  var pp$3 = Parser.prototype;\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash \u2014\n  // either with each other or with an init property \u2014 and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n      { return }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      { return }\n    var key = prop.key;\n    var name;\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) {\n          if (refDestructuringErrors) {\n            if (refDestructuringErrors.doubleProto < 0)\n              { refDestructuringErrors.doubleProto = key.start; }\n            // Backwards-compat kludge. Can be removed in version 6.0\n          } else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n        }\n        propHash.proto = true;\n      }\n      return\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n      var redefinition;\n      if (kind === \"init\") {\n        redefinition = this.strict && other.init || other.get || other.set;\n      } else {\n        redefinition = other.init || other[kind];\n      }\n      if (redefinition)\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n    other[kind] = true;\n  };\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n    if (this.type === types.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n      if (this.inGenerator) { return this.parseYield(noIn) }\n      // The tokenizer will assume an expression is allowed after\n      // `yield`, but this isn't that kind of yield\n      else { this.exprAllowed = false; }\n    }\n\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      oldTrailingComma = refDestructuringErrors.trailingComma;\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors;\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types.parenL || this.type === types.name)\n      { this.potentialArrowAt = this.start; }\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n    if (this.type.isAssign) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n      if (!ownDestructuringErrors) {\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n      }\n      if (refDestructuringErrors.shorthandAssign >= node.left.start)\n        { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n      this.checkLVal(left);\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n    }\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n    return left\n  };\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(noIn, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    if (this.eat(types.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  };\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop;\n    if (prec != null && (!noIn || this.type !== types._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n        var op = this.value;\n        this.next();\n        var startPos = this.start, startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  };\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  };\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n      expr = this.parseAwait();\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === types.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) { this.checkLVal(node.argument); }\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n      else { sawUnary = true; }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors);\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.operator = this.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this.checkLVal(expr);\n        this.next();\n        expr = this.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(types.starstar))\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n    else\n      { return expr }\n  };\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n      { return expr }\n    var result = this.parseSubscripts(expr, startPos, startLoc);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    }\n    return result\n  };\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n    while (true) {\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);\n      if (element === base || element.type === \"ArrowFunctionExpression\") { return element }\n      base = element;\n    }\n  };\n\n  pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {\n    var computed = this.eat(types.bracketL);\n    if (computed || this.eat(types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n      node.computed = !!computed;\n      if (computed) { this.expect(types.bracketR); }\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      this.awaitIdentPos = 0;\n      var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (this.awaitIdentPos > 0)\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types.backQuote) {\n      var node$2 = this.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this.parseTemplate({isTagged: true});\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base\n  };\n\n  // Parse an atomic expression \u2014 either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === types.slash) { this.readRegexp(); }\n\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch (this.type) {\n    case types._super:\n      if (!this.allowSuper)\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\n      node = this.startNode();\n      this.next();\n      if (this.type === types.parenL && !this.allowDirectSuper)\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n      // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super ( Arguments )\n      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n        { this.unexpected(); }\n      return this.finishNode(node, \"Super\")\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\")\n\n    case types.name:\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n        { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n          id = this.parseIdent(false);\n          if (this.canInsertSemicolon() || !this.eat(types.arrow))\n            { this.unexpected(); }\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n        }\n      }\n      return id\n\n    case types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {pattern: value.pattern, flags: value.flags};\n      return node\n\n    case types.num: case types.string:\n      return this.parseLiteral(this.value)\n\n    case types._null: case types._true: case types._false:\n      node = this.startNode();\n      node.value = this.type === types._null ? null : this.type === types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case types.parenL:\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n          { refDestructuringErrors.parenthesizedAssign = start; }\n        if (refDestructuringErrors.parenthesizedBind < 0)\n          { refDestructuringErrors.parenthesizedBind = start; }\n      }\n      return expr\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case types.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0)\n\n    case types._class:\n      return this.parseClass(this.startNode(), false)\n\n    case types._new:\n      return this.parseNew()\n\n    case types.backQuote:\n      return this.parseTemplate()\n\n    case types._import:\n      if (this.options.ecmaVersion >= 11) {\n        return this.parseExprImport()\n      } else {\n        return this.unexpected()\n      }\n\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$3.parseExprImport = function() {\n    var node = this.startNode();\n    this.next(); // skip `import`\n    switch (this.type) {\n    case types.parenL:\n      return this.parseDynamicImport(node)\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$3.parseDynamicImport = function(node) {\n    this.next(); // skip `(`\n\n    // Parse node.source.\n    node.source = this.parseMaybeAssign();\n\n    // Verify ending.\n    if (!this.eat(types.parenR)) {\n      var errorPos = this.start;\n      if (this.eat(types.comma) && this.eat(types.parenR)) {\n        this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n      } else {\n        this.unexpected(errorPos);\n      }\n    }\n\n    return this.finishNode(node, \"ImportExpression\")\n  };\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1); }\n    this.next();\n    return this.finishNode(node, \"Literal\")\n  };\n\n  pp$3.parseParenExpression = function() {\n    this.expect(types.parenL);\n    var val = this.parseExpression();\n    this.expect(types.parenR);\n    return val\n  };\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\n      var exprList = [], first = true, lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      // Do not save awaitIdentPos to allow checking awaits nested in parameters\n      while (this.type !== types.parenR) {\n        first ? first = false : this.expect(types.comma);\n        if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n          lastIsComma = true;\n          break\n        } else if (this.type === types.ellipsis) {\n          spreadStart = this.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\n          if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n          break\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc;\n      this.expect(types.parenR);\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n      if (spreadStart) { this.unexpected(spreadStart); }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  };\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  };\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  };\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call \u2014 at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = [];\n\n  pp$3.parseNew = function() {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n      node.meta = meta;\n      var containsEsc = this.containsEsc;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\" || containsEsc)\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n      if (!this.inNonArrowFunction())\n        { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    if (isImport && node.callee.type === \"ImportExpression\") {\n      this.raise(startPos, \"Cannot use new with import()\");\n    }\n    if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n    else { node.arguments = empty$1; }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n\n    var elem = this.startNode();\n    if (this.type === types.invalidTemplate) {\n      if (!isTagged) {\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n      }\n      elem.value = {\n        raw: this.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n      };\n    }\n    this.next();\n    elem.tail = this.type === types.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  pp$3.parseTemplate = function(ref) {\n    if ( ref === void 0 ) ref = {};\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  pp$3.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n      (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n      node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  };\n\n  pp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n      if (isPattern) {\n        prop.argument = this.parseIdent(false);\n        if (this.type === types.comma) {\n          this.raise(this.start, \"Comma is not permitted after the rest element\");\n        }\n        return this.finishNode(prop, \"RestElement\")\n      }\n      // To disallow parenthesized identifier via `this.toAssignable()`.\n      if (this.type === types.parenL && refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0) {\n          refDestructuringErrors.parenthesizedAssign = this.start;\n        }\n        if (refDestructuringErrors.parenthesizedBind < 0) {\n          refDestructuringErrors.parenthesizedBind = this.start;\n        }\n      }\n      // Parse argument.\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n      // To disallow trailing comma via `this.toAssignable()`.\n      if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n      // Finish\n      return this.finishNode(prop, \"SpreadElement\")\n    }\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern)\n        { isGenerator = this.eat(types.star); }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n      this.parsePropertyName(prop, refDestructuringErrors);\n    } else {\n      isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\")\n  };\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types.colon)\n      { this.unexpected(); }\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n      if (isPattern) { this.unexpected(); }\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc &&\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type !== types.comma && this.type !== types.braceR)) {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      prop.value = this.parseMethod(false);\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start;\n        if (prop.kind === \"get\")\n          { this.raiseRecoverable(start, \"getter should have no params\"); }\n        else\n          { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n      } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n          { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n      }\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.checkUnreserved(prop.key);\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = startPos; }\n      prop.kind = \"init\";\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else if (this.type === types.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0)\n          { refDestructuringErrors.shorthandAssign = this.start; }\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else {\n        prop.value = prop.key;\n      }\n      prop.shorthand = true;\n    } else { this.unexpected(); }\n  };\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(types.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types.bracketR);\n        return prop.key\n      } else {\n        prop.computed = false;\n      }\n    }\n    return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n  };\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\n  };\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params, isAsync) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n    var isExpression = isArrowFunction && this.type !== types.braceL;\n    var oldStrict = this.strict, useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      node.expression = true;\n      this.checkParams(node, false);\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple)\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n      }\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) { this.strict = true; }\n\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n      node.body = this.parseBlock(false);\n      node.expression = false;\n      this.adaptDirectivePrologue(node.body.body);\n      this.labels = oldLabels;\n    }\n    this.exitScope();\n\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }\n    this.strict = oldStrict;\n  };\n\n  pp$3.isSimpleParamList = function(params) {\n    for (var i = 0, list = params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      if (param.type !== \"Identifier\") { return false\n    } }\n    return true\n  };\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, allowDuplicates) {\n    var nameHash = {};\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n  };\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n      } else { first = false; }\n\n      var elt = (void 0);\n      if (allowEmpty && this.type === types.comma)\n        { elt = null; }\n      else if (this.type === types.ellipsis) {\n        elt = this.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n          { refDestructuringErrors.trailingComma = this.start; }\n      } else {\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n    return elts\n  };\n\n  pp$3.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n\n    if (this.inGenerator && name === \"yield\")\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n    if (this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n    if (this.keywords.test(name))\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n    if (this.options.ecmaVersion < 6 &&\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n      if (!this.inAsync && name === \"await\")\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n    }\n  };\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal, isBinding) {\n    var node = this.startNode();\n    if (this.type === types.name) {\n      node.name = this.value;\n    } else if (this.type.keyword) {\n      node.name = this.type.keyword;\n\n      // To fix https://github.com/acornjs/acorn/issues/575\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n      if ((node.name === \"class\" || node.name === \"function\") &&\n          (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n        this.context.pop();\n      }\n    } else {\n      this.unexpected();\n    }\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n      this.checkUnreserved(node);\n      if (node.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = node.start; }\n    }\n    return node\n  };\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function(noIn) {\n    if (!this.yieldPos) { this.yieldPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  };\n\n  pp$3.parseAwait = function() {\n    if (!this.awaitPos) { this.awaitPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, false);\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  var pp$4 = Parser.prototype;\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n    throw err\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  };\n\n  var pp$5 = Parser.prototype;\n\n  var Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n  };\n\n  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n  pp$5.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n  };\n\n  pp$5.exitScope = function() {\n    this.scopeStack.pop();\n  };\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  pp$5.treatFunctionsAsVarInScope = function(scope) {\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n  };\n\n  pp$5.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n      var scope = this.currentScope();\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      scope.lexical.push(name);\n      if (this.inModule && (scope.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n      var scope$1 = this.currentScope();\n      scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n      var scope$2 = this.currentScope();\n      if (this.treatFunctionsAsVar)\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\n      else\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n      scope$2.functions.push(name);\n    } else {\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n          redeclared = true;\n          break\n        }\n        scope$3.var.push(name);\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\n          { delete this.undefinedExports[name]; }\n        if (scope$3.flags & SCOPE_VAR) { break }\n      }\n    }\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n  };\n\n  pp$5.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\n      this.undefinedExports[id.name] = id;\n    }\n  };\n\n  pp$5.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1]\n  };\n\n  pp$5.currentVarScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) { return scope }\n    }\n  };\n\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  pp$5.currentThisScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations)\n      { this.loc = new SourceLocation(parser, loc); }\n    if (parser.options.directSourceFile)\n      { this.sourceFile = parser.options.directSourceFile; }\n    if (parser.options.ranges)\n      { this.range = [pos, 0]; }\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$6 = Parser.prototype;\n\n  pp$6.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  };\n\n  pp$6.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  };\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations)\n      { node.loc.end = loc; }\n    if (this.options.ranges)\n      { node.range[1] = pos; }\n    return node\n  }\n\n  pp$6.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  };\n\n  // Finish node at given position\n\n  pp$6.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  };\n\n  // The algorithm used to determine whether a regexp can appear at a\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n  };\n\n  var types$1 = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n  };\n\n  var pp$7 = Parser.prototype;\n\n  pp$7.initialContext = function() {\n    return [types$1.b_stat]\n  };\n\n  pp$7.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types$1.f_expr || parent === types$1.f_stat)\n      { return true }\n    if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n      { return !parent.isExpr }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === types._return || prevType === types.name && this.exprAllowed)\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n      { return true }\n    if (prevType === types.braceL)\n      { return parent === types$1.b_stat }\n    if (prevType === types._var || prevType === types._const || prevType === types.name)\n      { return false }\n    return !this.exprAllowed\n  };\n\n  pp$7.inGeneratorContext = function() {\n    for (var i = this.context.length - 1; i >= 1; i--) {\n      var context = this.context[i];\n      if (context.token === \"function\")\n        { return context.generator }\n    }\n    return false\n  };\n\n  pp$7.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types.dot)\n      { this.exprAllowed = false; }\n    else if (update = type.updateContext)\n      { update.call(this, prevType); }\n    else\n      { this.exprAllowed = type.beforeExpr; }\n  };\n\n  // Token-specific context update code\n\n  types.parenR.updateContext = types.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n      this.exprAllowed = true;\n      return\n    }\n    var out = this.context.pop();\n    if (out === types$1.b_stat && this.curContext().token === \"function\") {\n      out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n  };\n\n  types.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n    this.exprAllowed = true;\n  };\n\n  types.dollarBraceL.updateContext = function() {\n    this.context.push(types$1.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  types.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n    this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n    this.exprAllowed = true;\n  };\n\n  types.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  };\n\n  types._function.updateContext = types._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n        !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n        !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n      { this.context.push(types$1.f_expr); }\n    else\n      { this.context.push(types$1.f_stat); }\n    this.exprAllowed = false;\n  };\n\n  types.backQuote.updateContext = function() {\n    if (this.curContext() === types$1.q_tmpl)\n      { this.context.pop(); }\n    else\n      { this.context.push(types$1.q_tmpl); }\n    this.exprAllowed = false;\n  };\n\n  types.star.updateContext = function(prevType) {\n    if (prevType === types._function) {\n      var index = this.context.length - 1;\n      if (this.context[index] === types$1.f_expr)\n        { this.context[index] = types$1.f_expr_gen; }\n      else\n        { this.context[index] = types$1.f_gen; }\n    }\n    this.exprAllowed = true;\n  };\n\n  types.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n      if (this.value === \"of\" && !this.exprAllowed ||\n          this.value === \"yield\" && this.inGeneratorContext())\n        { allowed = true; }\n    }\n    this.exprAllowed = allowed;\n  };\n\n  // This file contains Unicode properties extracted from the ECMAScript\n  // specification. The lists are extracted like so:\n  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n  // #table-binary-unicode-properties\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n  var ecma11BinaryProperties = ecma10BinaryProperties;\n  var unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties\n  };\n\n  // #table-unicode-general-category-values\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n  // #table-unicode-script-values\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n  var unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues\n  };\n\n  var data = {};\n  function buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n      nonBinary: {\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n      }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n  }\n  buildUnicodeData(9);\n  buildUnicodeData(10);\n  buildUnicodeData(11);\n\n  var pp$8 = Parser.prototype;\n\n  var RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n  };\n\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n  };\n\n  RegExpValidationState.prototype.raise = function raise (message) {\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n  };\n\n  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n  RegExpValidationState.prototype.at = function at (i) {\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return -1\n    }\n    var c = s.charCodeAt(i);\n    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n      return c\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n  };\n\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return l\n    }\n    var c = s.charCodeAt(i), next;\n    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n      return i + 1\n    }\n    return i + 2\n  };\n\n  RegExpValidationState.prototype.current = function current () {\n    return this.at(this.pos)\n  };\n\n  RegExpValidationState.prototype.lookahead = function lookahead () {\n    return this.at(this.nextIndex(this.pos))\n  };\n\n  RegExpValidationState.prototype.advance = function advance () {\n    this.pos = this.nextIndex(this.pos);\n  };\n\n  RegExpValidationState.prototype.eat = function eat (ch) {\n    if (this.current() === ch) {\n      this.advance();\n      return true\n    }\n    return false\n  };\n\n  function codePointToString(ch) {\n    if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n    ch -= 0x10000;\n    return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n  }\n\n  /**\n   * Validate the flags part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$8.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags.charAt(i);\n      if (validFlags.indexOf(flag) === -1) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n      }\n      if (flags.indexOf(flag, i + 1) > -1) {\n        this.raise(state.start, \"Duplicate regular expression flag\");\n      }\n    }\n  };\n\n  /**\n   * Validate the pattern part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$8.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n      state.switchN = true;\n      this.regexp_pattern(state);\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n  pp$8.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n\n    this.regexp_disjunction(state);\n\n    if (state.pos !== state.source.length) {\n      // Make the same messages as V8.\n      if (state.eat(0x29 /* ) */)) {\n        state.raise(\"Unmatched ')'\");\n      }\n      if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n        state.raise(\"Lone quantifier brackets\");\n      }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n      state.raise(\"Invalid escape\");\n    }\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n      var name = list[i];\n\n      if (state.groupNames.indexOf(name) === -1) {\n        state.raise(\"Invalid named capture referenced\");\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n  pp$8.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while (state.eat(0x7C /* | */)) {\n      this.regexp_alternative(state);\n    }\n\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B /* { */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n  pp$8.regexp_alternative = function(state) {\n    while (state.pos < state.source.length && this.regexp_eatTerm(state))\n      { }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n  pp$8.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n      // Handle `QuantifiableAssertion Quantifier` alternative.\n      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n      // is a QuantifiableAssertion.\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n        // Make the same message as V8.\n        if (state.switchU) {\n          state.raise(\"Invalid quantifier\");\n        }\n      }\n      return true\n    }\n\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n      this.regexp_eatQuantifier(state);\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n  pp$8.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n\n    // ^, $\n    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n      return true\n    }\n\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */)) {\n      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n      var lookbehind = false;\n      if (this.options.ecmaVersion >= 9) {\n        lookbehind = state.eat(0x3C /* < */);\n      }\n      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n        this.regexp_disjunction(state);\n        if (!state.eat(0x29 /* ) */)) {\n          state.raise(\"Unterminated group\");\n        }\n        state.lastAssertionIsQuantifiable = !lookbehind;\n        return true\n      }\n    }\n\n    state.pos = start;\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n  pp$8.regexp_eatQuantifier = function(state, noError) {\n    if ( noError === void 0 ) noError = false;\n\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n      state.eat(0x3F /* ? */);\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n  pp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n    return (\n      state.eat(0x2A /* * */) ||\n      state.eat(0x2B /* + */) ||\n      state.eat(0x3F /* ? */) ||\n      this.regexp_eatBracedQuantifier(state, noError)\n    )\n  };\n  pp$8.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */)) {\n      var min = 0, max = -1;\n      if (this.regexp_eatDecimalDigits(state)) {\n        min = state.lastIntValue;\n        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n          max = state.lastIntValue;\n        }\n        if (state.eat(0x7D /* } */)) {\n          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n          if (max !== -1 && max < min && !noError) {\n            state.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true\n        }\n      }\n      if (state.switchU && !noError) {\n        state.raise(\"Incomplete quantifier\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n  pp$8.regexp_eatAtom = function(state) {\n    return (\n      this.regexp_eatPatternCharacters(state) ||\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state)\n    )\n  };\n  pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatAtomEscape(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */)) {\n      if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */)) {\n          return true\n        }\n        state.raise(\"Unterminated group\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */)) {\n      if (this.options.ecmaVersion >= 9) {\n        this.regexp_groupSpecifier(state);\n      } else if (state.current() === 0x3F /* ? */) {\n        state.raise(\"Invalid group\");\n      }\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        state.numCapturingParens += 1;\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n  pp$8.regexp_eatExtendedAtom = function(state) {\n    return (\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state) ||\n      this.regexp_eatInvalidBracedQuantifier(state) ||\n      this.regexp_eatExtendedPatternCharacter(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n  pp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n  pp$8.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isSyntaxCharacter(ch) {\n    return (\n      ch === 0x24 /* $ */ ||\n      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n      ch === 0x2E /* . */ ||\n      ch === 0x3F /* ? */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n  // But eat eager.\n  pp$8.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n      state.advance();\n    }\n    return state.pos !== start\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n  pp$8.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (\n      ch !== -1 &&\n      ch !== 0x24 /* $ */ &&\n      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n      ch !== 0x2E /* . */ &&\n      ch !== 0x3F /* ? */ &&\n      ch !== 0x5B /* [ */ &&\n      ch !== 0x5E /* ^ */ &&\n      ch !== 0x7C /* | */\n    ) {\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // GroupSpecifier[U] ::\n  //   [empty]\n  //   `?` GroupName[?U]\n  pp$8.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */)) {\n      if (this.regexp_eatGroupName(state)) {\n        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n          state.raise(\"Duplicate capture group name\");\n        }\n        state.groupNames.push(state.lastStringValue);\n        return\n      }\n      state.raise(\"Invalid group\");\n    }\n  };\n\n  // GroupName[U] ::\n  //   `<` RegExpIdentifierName[?U] `>`\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$8.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */)) {\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n        return true\n      }\n      state.raise(\"Invalid capture group name\");\n    }\n    return false\n  };\n\n  // RegExpIdentifierName[U] ::\n  //   RegExpIdentifierStart[?U]\n  //   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$8.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n      }\n      return true\n    }\n    return false\n  };\n\n  // RegExpIdentifierStart[U] ::\n  //   UnicodeIDStart\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[?U]\n  pp$8.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var ch = state.current();\n    state.advance();\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n  }\n\n  // RegExpIdentifierPart[U] ::\n  //   UnicodeIDContinue\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[?U]\n  //   <ZWNJ>\n  //   <ZWJ>\n  pp$8.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var ch = state.current();\n    state.advance();\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n  pp$8.regexp_eatAtomEscape = function(state) {\n    if (\n      this.regexp_eatBackReference(state) ||\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state) ||\n      (state.switchN && this.regexp_eatKGroupName(state))\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      if (state.current() === 0x63 /* c */) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    return false\n  };\n  pp$8.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n      var n = state.lastIntValue;\n      if (state.switchU) {\n        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n        if (n > state.maxBackReference) {\n          state.maxBackReference = n;\n        }\n        return true\n      }\n      if (n <= state.numCapturingParens) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */)) {\n      if (this.regexp_eatGroupName(state)) {\n        state.backReferenceNames.push(state.lastStringValue);\n        return true\n      }\n      state.raise(\"Invalid named reference\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n  pp$8.regexp_eatCharacterEscape = function(state) {\n    return (\n      this.regexp_eatControlEscape(state) ||\n      this.regexp_eatCControlLetter(state) ||\n      this.regexp_eatZero(state) ||\n      this.regexp_eatHexEscapeSequence(state) ||\n      this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n      this.regexp_eatIdentityEscape(state)\n    )\n  };\n  pp$8.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */)) {\n      if (this.regexp_eatControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n      state.lastIntValue = 0;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n  pp$8.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */) {\n      state.lastIntValue = 0x09; /* \\t */\n      state.advance();\n      return true\n    }\n    if (ch === 0x6E /* n */) {\n      state.lastIntValue = 0x0A; /* \\n */\n      state.advance();\n      return true\n    }\n    if (ch === 0x76 /* v */) {\n      state.lastIntValue = 0x0B; /* \\v */\n      state.advance();\n      return true\n    }\n    if (ch === 0x66 /* f */) {\n      state.lastIntValue = 0x0C; /* \\f */\n      state.advance();\n      return true\n    }\n    if (ch === 0x72 /* r */) {\n      state.lastIntValue = 0x0D; /* \\r */\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n  pp$8.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isControlLetter(ch) {\n    return (\n      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n  pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x75 /* u */)) {\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\n        var lead = state.lastIntValue;\n        if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n          var leadSurrogateEnd = state.pos;\n          if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n            var trail = state.lastIntValue;\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n              return true\n            }\n          }\n          state.pos = leadSurrogateEnd;\n          state.lastIntValue = lead;\n        }\n        return true\n      }\n      if (\n        state.switchU &&\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatHexDigits(state) &&\n        state.eat(0x7D /* } */) &&\n        isValidUnicode(state.lastIntValue)\n      ) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.pos = start;\n    }\n\n    return false\n  };\n  function isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n  pp$8.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n      if (this.regexp_eatSyntaxCharacter(state)) {\n        return true\n      }\n      if (state.eat(0x2F /* / */)) {\n        state.lastIntValue = 0x2F; /* / */\n        return true\n      }\n      return false\n    }\n\n    var ch = state.current();\n    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n  pp$8.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n        state.advance();\n      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n  pp$8.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n\n    if (isCharacterClassEscape(ch)) {\n      state.lastIntValue = -1;\n      state.advance();\n      return true\n    }\n\n    if (\n      state.switchU &&\n      this.options.ecmaVersion >= 9 &&\n      (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n    ) {\n      state.lastIntValue = -1;\n      state.advance();\n      if (\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatUnicodePropertyValueExpression(state) &&\n        state.eat(0x7D /* } */)\n      ) {\n        return true\n      }\n      state.raise(\"Invalid property name\");\n    }\n\n    return false\n  };\n  function isCharacterClassEscape(ch) {\n    return (\n      ch === 0x64 /* d */ ||\n      ch === 0x44 /* D */ ||\n      ch === 0x73 /* s */ ||\n      ch === 0x53 /* S */ ||\n      ch === 0x77 /* w */ ||\n      ch === 0x57 /* W */\n    )\n  }\n\n  // UnicodePropertyValueExpression ::\n  //   UnicodePropertyName `=` UnicodePropertyValue\n  //   LoneUnicodePropertyNameOrValue\n  pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n      var name = state.lastStringValue;\n      if (this.regexp_eatUnicodePropertyValue(state)) {\n        var value = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n        return true\n      }\n    }\n    state.pos = start;\n\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n      var nameOrValue = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n      return true\n    }\n    return false\n  };\n  pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!has(state.unicodeProperties.nonBinary, name))\n      { state.raise(\"Invalid property name\"); }\n    if (!state.unicodeProperties.nonBinary[name].test(value))\n      { state.raise(\"Invalid property value\"); }\n  };\n  pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (!state.unicodeProperties.binary.test(nameOrValue))\n      { state.raise(\"Invalid property name\"); }\n  };\n\n  // UnicodePropertyName ::\n  //   UnicodePropertyNameCharacters\n  pp$8.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F /* _ */\n  }\n\n  // UnicodePropertyValue ::\n  //   UnicodePropertyValueCharacters\n  pp$8.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n  }\n\n  // LoneUnicodePropertyNameOrValue ::\n  //   UnicodePropertyValueCharacters\n  pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state)\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n  pp$8.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */)) {\n      state.eat(0x5E /* ^ */);\n      this.regexp_classRanges(state);\n      if (state.eat(0x5D /* ] */)) {\n        return true\n      }\n      // Unreachable since it threw \"unterminated regular expression\" error before.\n      state.raise(\"Unterminated character class\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n  pp$8.regexp_classRanges = function(state) {\n    while (this.regexp_eatClassAtom(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n        var right = state.lastIntValue;\n        if (state.switchU && (left === -1 || right === -1)) {\n          state.raise(\"Invalid character class\");\n        }\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n  pp$8.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatClassEscape(state)) {\n        return true\n      }\n      if (state.switchU) {\n        // Make the same message as V8.\n        var ch$1 = state.current();\n        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n          state.raise(\"Invalid class escape\");\n        }\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n\n    var ch = state.current();\n    if (ch !== 0x5D /* ] */) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n  pp$8.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n\n    if (state.switchU && state.eat(0x2D /* - */)) {\n      state.lastIntValue = 0x2D; /* - */\n      return true\n    }\n\n    if (!state.switchU && state.eat(0x63 /* c */)) {\n      if (this.regexp_eatClassControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    return (\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n  pp$8.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$8.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */)) {\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n  pp$8.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isDecimalDigit(ch = state.current())) {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n  pp$8.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isHexDigit(ch = state.current())) {\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isHexDigit(ch) {\n    return (\n      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n    )\n  }\n  function hexToInt(ch) {\n    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n      return 10 + (ch - 0x41 /* A */)\n    }\n    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n      return 10 + (ch - 0x61 /* a */)\n    }\n    return ch - 0x30 /* 0 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n  // Allows only 0-377(octal) i.e. 0-255(decimal).\n  pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n      var n1 = state.lastIntValue;\n      if (this.regexp_eatOctalDigit(state)) {\n        var n2 = state.lastIntValue;\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n        } else {\n          state.lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        state.lastIntValue = n1;\n      }\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n  pp$8.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n      state.lastIntValue = ch - 0x30; /* 0 */\n      state.advance();\n      return true\n    }\n    state.lastIntValue = 0;\n    return false\n  };\n  function isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$8.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for (var i = 0; i < length; ++i) {\n      var ch = state.current();\n      if (!isHexDigit(ch)) {\n        state.pos = start;\n        return false\n      }\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return true\n  };\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations)\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n    if (p.options.ranges)\n      { this.range = [p.start, p.end]; }\n  };\n\n  // ## Tokenizer\n\n  var pp$9 = Parser.prototype;\n\n  // Move to the next token\n\n  pp$9.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n      { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n    if (this.options.onToken)\n      { this.options.onToken(new Token(this)); }\n\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp$9.getToken = function() {\n    this.next();\n    return new Token(this)\n  };\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    { pp$9[Symbol.iterator] = function() {\n      var this$1 = this;\n\n      return {\n        next: function () {\n          var token = this$1.getToken();\n          return {\n            done: token.type === types.eof,\n            value: token\n          }\n        }\n      }\n    }; }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$9.curContext = function() {\n    return this.context[this.context.length - 1]\n  };\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$9.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n    this.start = this.pos;\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\n    if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n    if (curContext.override) { return curContext.override(this) }\n    else { this.readToken(this.fullCharCodeAtPos()); }\n  };\n\n  pp$9.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      { return this.readWord() }\n\n    return this.getTokenFromCode(code)\n  };\n\n  pp$9.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xe000) { return code }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return (code << 10) + next - 0x35fdc00\n  };\n\n  pp$9.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n    this.pos = end + 2;\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start;\n      var match;\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this.curLine;\n        this.lineStart = match.index + match[0].length;\n      }\n    }\n    if (this.options.onComment)\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  pp$9.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while (this.pos < this.input.length && !isNewLine(ch)) {\n      ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment)\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$9.skipSpace = function() {\n    loop: while (this.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.pos);\n      switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos;\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n        case 42: // '*'\n          this.skipBlockComment();\n          break\n        case 47:\n          this.skipLineComment(2);\n          break\n        default:\n          break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop\n        }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$9.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$9.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3;\n      return this.finishToken(types.ellipsis)\n    } else {\n      ++this.pos;\n      return this.finishToken(types.dot)\n    }\n  };\n\n  pp$9.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.slash, 1)\n  };\n\n  pp$9.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types.star : types.modulo;\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n      ++size;\n      tokentype = types.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(tokentype, size)\n  };\n\n  pp$9.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n  };\n\n  pp$9.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.bitwiseXOR, 1)\n  };\n\n  pp$9.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken()\n      }\n      return this.finishOp(types.incDec, 2)\n    }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.plusMin, 1)\n  };\n\n  pp$9.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n      return this.finishOp(types.bitShift, size)\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n        this.input.charCodeAt(this.pos + 3) === 45) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    if (next === 61) { size = 2; }\n    return this.finishOp(types.relational, size)\n  };\n\n  pp$9.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2;\n      return this.finishToken(types.arrow)\n    }\n    return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n  };\n\n  pp$9.getTokenFromCode = function(code) {\n    switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n    // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(types.parenL)\n    case 41: ++this.pos; return this.finishToken(types.parenR)\n    case 59: ++this.pos; return this.finishToken(types.semi)\n    case 44: ++this.pos; return this.finishToken(types.comma)\n    case 91: ++this.pos; return this.finishToken(types.bracketL)\n    case 93: ++this.pos; return this.finishToken(types.bracketR)\n    case 123: ++this.pos; return this.finishToken(types.braceL)\n    case 125: ++this.pos; return this.finishToken(types.braceR)\n    case 58: ++this.pos; return this.finishToken(types.colon)\n    case 63: ++this.pos; return this.finishToken(types.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) { break }\n      ++this.pos;\n      return this.finishToken(types.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n    // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(types.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n  };\n\n  pp$9.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str)\n  };\n\n  pp$9.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n      var ch = this.input.charAt(this.pos);\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n      if (!escaped) {\n        if (ch === \"[\") { inClass = true; }\n        else if (ch === \"]\" && inClass) { inClass = false; }\n        else if (ch === \"/\" && !inClass) { break }\n        escaped = ch === \"\\\\\";\n      } else { escaped = false; }\n      ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) { this.unexpected(flagsStart); }\n\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n\n    // Create Literal#value property value.\n    var value = null;\n    try {\n      value = new RegExp(pattern, flags);\n    } catch (e) {\n      // ESTree requires null if it failed to instantiate RegExp object.\n      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n\n    return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$9.readInt = function(radix, len) {\n    var start = this.pos, total = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\n      if (code >= 97) { val = code - 97 + 10; } // a\n      else if (code >= 65) { val = code - 65 + 10; } // A\n      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n      else { val = Infinity; }\n      if (val >= radix) { break }\n      ++this.pos;\n      total = total * radix + val;\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n    return total\n  };\n\n  pp$9.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n      val = typeof BigInt !== \"undefined\" ? BigInt(this.input.slice(start, this.pos)) : null;\n      ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val)\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$9.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n      var str$1 = this.input.slice(start, this.pos);\n      var val$1 = typeof BigInt !== \"undefined\" ? BigInt(str$1) : null;\n      ++this.pos;\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n      return this.finishToken(types.num, val$1)\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n    if (next === 46 && !octal) { // '.'\n      ++this.pos;\n      this.readInt(10);\n      next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) { ++this.pos; } // '+-'\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n    var str = this.input.slice(start, this.pos);\n    var val = octal ? parseInt(str, 8) : parseFloat(str);\n    return this.finishToken(types.num, val)\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$9.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n\n    if (ch === 123) { // '{'\n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n    } else {\n      code = this.readHexChar(4);\n    }\n    return code\n  };\n\n  function codePointToString$1(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$9.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) { break }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.pos;\n      } else {\n        if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types.string, out)\n  };\n\n  // Reads template string tokens.\n\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\n  pp$9.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n      this.readTmplToken();\n    } catch (err) {\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n        this.readInvalidTemplateToken();\n      } else {\n        throw err\n      }\n    }\n\n    this.inTemplateElement = false;\n  };\n\n  pp$9.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\n    } else {\n      this.raise(position, message);\n    }\n  };\n\n  pp$9.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n        if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n          if (ch === 36) {\n            this.pos += 2;\n            return this.finishToken(types.dollarBraceL)\n          } else {\n            ++this.pos;\n            return this.finishToken(types.backQuote)\n          }\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(types.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(true);\n        chunkStart = this.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n        }\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n  };\n\n  // Reads a template token to search for the end, without validating any escape sequences\n  pp$9.readInvalidTemplateToken = function() {\n    for (; this.pos < this.input.length; this.pos++) {\n      switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") {\n          break\n        }\n      // falls through\n\n      case \"`\":\n        return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n      // no default\n      }\n    }\n    this.raise(this.start, \"Unterminated template\");\n  };\n\n  // Used to read escaped characters\n\n  pp$9.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString$1(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    case 56:\n    case 57:\n      if (inTemplate) {\n        var codePos = this.pos - 1;\n\n        this.invalidStringToken(\n          codePos,\n          \"Invalid escape sequence in template string\"\n        );\n\n        return null\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(\n            this.pos - 1 - octalStr.length,\n            inTemplate\n              ? \"Octal literal in template string\"\n              : \"Octal literal in strict mode\"\n          );\n        }\n        return String.fromCharCode(octal)\n      }\n      if (isNewLine(ch)) {\n        // Unicode new line characters after \\ get removed from output in both\n        // template literals and strings\n        return \"\"\n      }\n      return String.fromCharCode(ch)\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$9.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n    return n\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$9.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while (this.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch, astral)) {\n        this.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) { // \"\\\"\n        this.containsEsc = true;\n        word += this.input.slice(chunkStart, this.pos);\n        var escStart = this.pos;\n        if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n        ++this.pos;\n        var esc = this.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n        word += codePointToString$1(esc);\n        chunkStart = this.pos;\n      } else {\n        break\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$9.readWord = function() {\n    var word = this.readWord1();\n    var type = types.name;\n    if (this.keywords.test(word)) {\n      type = keywords$1[word];\n    }\n    return this.finishToken(type, word)\n  };\n\n  // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\n  var version = \"7.1.0\";\n\n  Parser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types,\n    keywordTypes: keywords$1,\n    TokContext: TokContext,\n    tokContexts: types$1,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n  };\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return Parser.parse(input, options)\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options)\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return Parser.tokenizer(input, options)\n  }\n\n  exports.Node = Node;\n  exports.Parser = Parser;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.TokContext = TokContext;\n  exports.Token = Token;\n  exports.TokenType = TokenType;\n  exports.defaultOptions = defaultOptions;\n  exports.getLineInfo = getLineInfo;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.isNewLine = isNewLine;\n  exports.keywordTypes = keywords$1;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokContexts = types$1;\n  exports.tokTypes = types;\n  exports.tokenizer = tokenizer;\n  exports.version = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n", "class Input {\n  constructor(value, size) {\n    this.value = value;\n    if (Array.isArray(size)) {\n      this.size = size;\n    } else {\n      this.size = new Int32Array(3);\n      if (size.z) {\n        this.size = new Int32Array([size.x, size.y, size.z]);\n      } else if (size.y) {\n        this.size = new Int32Array([size.x, size.y]);\n      } else {\n        this.size = new Int32Array([size.x]);\n      }\n    }\n\n    const [w, h, d] = this.size;\n    if (d) {\n      if (this.value.length !== (w * h * d)) {\n        throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} * ${d} = ${(h * w * d)}`);\n      }\n    } else if (h) {\n      if (this.value.length !== (w * h)) {\n        throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} = ${(h * w)}`);\n      }\n    } else {\n      if (this.value.length !== w) {\n        throw new Error(`Input size ${this.value.length} does not match ${w}`);\n      }\n    }\n\n  }\n\n  toArray() {\n    const { utils } = require('./utils');\n    const [w, h, d] = this.size;\n    if (d) {\n      return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);\n    } else if (h) {\n      return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);\n    } else {\n      return this.value;\n    }\n  }\n}\n\nfunction input(value, size) {\n  return new Input(value, size);\n}\n\nmodule.exports = {\n  Input,\n  input\n};", "/**\n * @desc WebGl Texture implementation in JS\n * @param {IGPUTextureSettings} settings\n */\nclass Texture {\n  constructor(settings) {\n    const {\n      texture,\n      size,\n      dimensions,\n      output,\n      context,\n      type = 'NumberTexture',\n      kernel,\n      internalFormat,\n      textureFormat\n    } = settings;\n    if (!output) throw new Error('settings property \"output\" required.');\n    if (!context) throw new Error('settings property \"context\" required.');\n    if (!texture) throw new Error('settings property \"texture\" required.');\n    if (!kernel) throw new Error('settings property \"kernel\" required.');\n    this.texture = texture;\n    if (texture._refs) {\n      texture._refs++;\n    } else {\n      texture._refs = 1;\n    }\n    this.size = size;\n    this.dimensions = dimensions;\n    this.output = output;\n    this.context = context;\n    /**\n     * @type {Kernel}\n     */\n    this.kernel = kernel;\n    this.type = type;\n    this._deleted = false;\n    this.internalFormat = internalFormat;\n    this.textureFormat = textureFormat;\n  }\n\n  /**\n   * @desc Converts the Texture into a JavaScript Array\n   * @returns {TextureArrayOutput}\n   */\n  toArray() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n\n  /**\n   * @desc Clones the Texture\n   * @returns {Texture}\n   */\n  clone() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n\n  /**\n   * @desc Deletes the Texture\n   */\n  delete() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n\n  clear() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n}\n\nmodule.exports = {\n  Texture\n};", "const acorn = require('acorn');\nconst { Input } = require('./input');\nconst { Texture } = require('./texture');\n\nconst FUNCTION_NAME = /function ([^(]*)/;\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n *\n * @desc Various utility functions / snippets of code that GPU.JS uses internally.\n * @type {utils}\n * This covers various snippets of code that is not entirely gpu.js specific (ie. may find uses elsewhere)\n */\nconst utils = {\n  /**\n   *\n   * @desc Gets the system endianness, and cache it\n   * @returns {String} 'LE' or 'BE' depending on system architecture\n   * Credit: https://gist.github.com/TooTallNate/4750953\n   */\n  systemEndianness() {\n    return _systemEndianness;\n  },\n  getSystemEndianness() {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) return 'LE';\n    if (c[0] === 0xde) return 'BE';\n    throw new Error('unknown endianness');\n  },\n\n  /**\n   * @descReturn TRUE, on a JS function\n   * @param {Function} funcObj - Object to validate if its a function\n   * @returns  {Boolean} TRUE if the object is a JS function\n   */\n  isFunction(funcObj) {\n    return typeof(funcObj) === 'function';\n  },\n\n  /**\n   * @desc Return TRUE, on a valid JS function string\n   * Note: This does just a VERY simply sanity check. And may give false positives.\n   *\n   * @param {String} fn - String of JS function to validate\n   * @returns {Boolean} TRUE if the string passes basic validation\n   */\n  isFunctionString(fn) {\n    if (typeof fn === 'string') {\n      return (fn\n        .slice(0, 'function'.length)\n        .toLowerCase() === 'function');\n    }\n    return false;\n  },\n\n  /**\n   * @desc Return the function name from a JS function string\n   * @param {String} funcStr - String of JS function to validate\n   * @returns {String} Function name string (if found)\n   */\n  getFunctionNameFromString(funcStr) {\n    const result = FUNCTION_NAME.exec(funcStr);\n    if (!result || result.length === 0) return null;\n    return result[1].trim();\n  },\n\n  getFunctionBodyFromString(funcStr) {\n    return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));\n  },\n\n  /**\n   * @desc Return list of argument names extracted from a javascript function\n   * @param {String} fn - String of JS function to validate\n   * @returns {String[]}  Array representing all the parameter names\n   */\n  getArgumentNamesFromString(fn) {\n    const fnStr = fn.replace(STRIP_COMMENTS, '');\n    let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    if (result === null) {\n      result = [];\n    }\n    return result;\n  },\n\n  /**\n   * @desc Returns a clone\n   * @param {Object} obj - Object to clone\n   * @returns {Object|Array} Cloned object\n   */\n  clone(obj) {\n    if (obj === null || typeof obj !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;\n\n    const temp = obj.constructor(); // changed\n\n    for (let key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        obj.isActiveClone = null;\n        temp[key] = utils.clone(obj[key]);\n        delete obj.isActiveClone;\n      }\n    }\n\n    return temp;\n  },\n\n  /**\n   * @desc Checks if is an array or Array-like object\n   * @param {Object} array - The argument object to check if is array\n   * @returns {Boolean}  true if is array or Array-like object\n   */\n  isArray(array) {\n    return !isNaN(array.length);\n  },\n\n  /**\n   * @desc Evaluate the argument type, to apply respective logic for it\n   * @param {*} value - The argument object to evaluate type\n   * @param {boolean} [strictIntegers]\n   * @returns {String}  Argument type Array/Number/Float/Texture/Unknown\n   */\n  getVariableType(value, strictIntegers) {\n    if (utils.isArray(value)) {\n      if (value.length > 0 && value[0].nodeName === 'IMG') {\n        return 'HTMLImageArray';\n      }\n      return 'Array';\n    }\n\n    switch (value.constructor) {\n      case Boolean:\n        return 'Boolean';\n      case Number:\n        if (strictIntegers && Number.isInteger(value)) {\n          return 'Integer';\n        }\n        return 'Float';\n      case Texture:\n        return value.type;\n      case Input:\n        return 'Input';\n    }\n    if ('nodeName' in value) {\n      switch (value.nodeName) {\n        case 'IMG':\n          return 'HTMLImage';\n        case 'CANVAS':\n          return 'HTMLImage';\n        case 'VIDEO':\n          return 'HTMLVideo';\n      }\n    } else if (value.hasOwnProperty('type')) {\n      return value.type;\n    } else if (typeof OffscreenCanvas !== 'undefined' && value instanceof OffscreenCanvas) {\n      return 'OffscreenCanvas';\n    } else if (typeof ImageBitmap !== 'undefined' && value instanceof ImageBitmap) {\n      return 'ImageBitmap';\n    } else if (typeof ImageData !== 'undefined' && value instanceof ImageData) {\n      return 'ImageData';\n    }\n    return 'Unknown';\n  },\n\n  getKernelTextureSize(settings, dimensions) {\n    let [w, h, d] = dimensions;\n    let texelCount = (w || 1) * (h || 1) * (d || 1);\n\n    if (settings.optimizeFloatMemory && settings.precision === 'single') {\n      w = texelCount = Math.ceil(texelCount / 4);\n    }\n    // if given dimensions == a 2d image\n    if (h > 1 && w * h === texelCount) {\n      return new Int32Array([w, h]);\n    }\n    return utils.closestSquareDimensions(texelCount);\n  },\n\n  /**\n   *\n   * @param {Number} length\n   * @returns {TextureDimensions}\n   */\n  closestSquareDimensions(length) {\n    const sqrt = Math.sqrt(length);\n    let high = Math.ceil(sqrt);\n    let low = Math.floor(sqrt);\n    while (high * low < length) {\n      high--;\n      low = Math.ceil(length / high);\n    }\n    return new Int32Array([low, Math.ceil(length / low)]);\n  },\n\n  /**\n   * A texture takes up four\n   * @param {OutputDimensions} dimensions\n   * @param {Number} bitRatio\n   * @returns {TextureDimensions}\n   */\n  getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {\n    const totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);\n    const texelCount = totalArea / bitRatio;\n    return utils.closestSquareDimensions(texelCount);\n  },\n\n  /**\n   *\n   * @param dimensions\n   * @param bitRatio\n   * @returns {*|TextureDimensions}\n   */\n  getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {\n    const [w, h, d] = dimensions;\n    const totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);\n    const texelCount = totalArea / (4 / bitRatio);\n    return utils.closestSquareDimensions(texelCount);\n  },\n\n  roundTo(n, d) {\n    return Math.floor((n + d - 1) / d) * d;\n  },\n  /**\n   * @desc Return the dimension of an array.\n   * @param {Array|String|Texture|Input} x - The array\n   * @param {Boolean} [pad] - To include padding in the dimension calculation\n   * @returns {OutputDimensions}\n   */\n  getDimensions(x, pad) {\n    let ret;\n    if (utils.isArray(x)) {\n      const dim = [];\n      let temp = x;\n      while (utils.isArray(temp)) {\n        dim.push(temp.length);\n        temp = temp[0];\n      }\n      ret = dim.reverse();\n    } else if (x instanceof Texture) {\n      ret = x.output;\n    } else if (x instanceof Input) {\n      ret = x.size;\n    } else {\n      throw new Error(`Unknown dimensions of ${x}`);\n    }\n\n    if (pad) {\n      ret = Array.from(ret);\n      while (ret.length < 3) {\n        ret.push(1);\n      }\n    }\n\n    return new Int32Array(ret);\n  },\n\n  /**\n   * Puts a nested 2d array into a one-dimensional target array\n   * @param {Array|*} array\n   * @param {Float32Array|Float64Array} target\n   */\n  flatten2dArrayTo(array, target) {\n    let offset = 0;\n    for (let y = 0; y < array.length; y++) {\n      target.set(array[y], offset);\n      offset += array[y].length;\n    }\n  },\n\n  /**\n   * Puts a nested 3d array into a one-dimensional target array\n   * @param {Array|*} array\n   * @param {Float32Array|Float64Array} target\n   */\n  flatten3dArrayTo(array, target) {\n    let offset = 0;\n    for (let z = 0; z < array.length; z++) {\n      for (let y = 0; y < array[z].length; y++) {\n        target.set(array[z][y], offset);\n        offset += array[z][y].length;\n      }\n    }\n  },\n\n  /**\n   * Puts a nested 4d array into a one-dimensional target array\n   * @param {Array|*} array\n   * @param {Float32Array|Float64Array} target\n   */\n  flatten4dArrayTo(array, target) {\n    let offset = 0;\n    for (let l = 0; l < array.length; l++) {\n      for (let z = 0; z < array[l].length; z++) {\n        for (let y = 0; y < array[l][z].length; y++) {\n          target.set(array[l][z][y], offset);\n          offset += array[l][z][y].length;\n        }\n      }\n    }\n  },\n\n  /**\n   * Puts a nested 1d, 2d, or 3d array into a one-dimensional target array\n   * @param {Float32Array|Uint16Array|Uint8Array} array\n   * @param {Float32Array} target\n   */\n  flattenTo(array, target) {\n    if (utils.isArray(array[0])) {\n      if (utils.isArray(array[0][0])) {\n        if (utils.isArray(array[0][0][0])) {\n          utils.flatten4dArrayTo(array, target);\n        } else {\n          utils.flatten3dArrayTo(array, target);\n        }\n      } else {\n        utils.flatten2dArrayTo(array, target);\n      }\n    } else {\n      target.set(array);\n    }\n  },\n\n  /**\n   *\n   * @desc Splits an array into smaller arrays.\n   * Number of elements in one small chunk is given by `part`\n   *\n   * @param {Number[]} array - The array to split into chunks\n   * @param {Number} part - elements in one chunk\n   *\n   * @returns {Number[]} An array of smaller chunks\n   */\n  splitArray(array, part) {\n    const result = [];\n    for (let i = 0; i < array.length; i += part) {\n      result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));\n    }\n    return result;\n  },\n\n  getAstString(source, ast) {\n    const lines = Array.isArray(source) ? source : source.split(/\\r?\\n/g);\n    const start = ast.loc.start;\n    const end = ast.loc.end;\n    const result = [];\n    if (start.line === end.line) {\n      result.push(lines[start.line - 1].substring(start.column, end.column));\n    } else {\n      result.push(lines[start.line - 1].slice(start.column));\n      for (let i = start.line; i < end.line; i++) {\n        result.push(lines[i]);\n      }\n      result.push(lines[end.line - 1].slice(0, end.column));\n    }\n    return result.join('\\n');\n  },\n\n  allPropertiesOf(obj) {\n    const props = [];\n\n    do {\n      props.push.apply(props, Object.getOwnPropertyNames(obj));\n    } while (obj = Object.getPrototypeOf(obj));\n\n    return props;\n  },\n\n  /**\n   * @param {Array} lines - An Array of strings\n   * @returns {String} Single combined String, separated by *\\n*\n   */\n  linesToString(lines) {\n    if (lines.length > 0) {\n      return lines.join(';\\n') + ';\\n';\n    } else {\n      return '\\n';\n    }\n  },\n  warnDeprecated(type, oldName, newName) {\n    if (newName) {\n      console.warn(`You are using a deprecated ${ type } \"${ oldName }\". It has been replaced with \"${ newName }\". Fixing, but please upgrade as it will soon be removed.`);\n    } else {\n      console.warn(`You are using a deprecated ${ type } \"${ oldName }\". It has been removed. Fixing, but please upgrade as it will soon be removed.`);\n    }\n  },\n  flipPixels: (pixels, width, height) => {\n    // https://stackoverflow.com/a/41973289/1324039\n    const halfHeight = height / 2 | 0; // the | 0 keeps the result an int\n    const bytesPerRow = width * 4;\n    // make a temp buffer to hold one row\n    const temp = new Uint8ClampedArray(width * 4);\n    const result = pixels.slice(0);\n    for (let y = 0; y < halfHeight; ++y) {\n      const topOffset = y * bytesPerRow;\n      const bottomOffset = (height - y - 1) * bytesPerRow;\n\n      // make copy of a row on the top half\n      temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\n\n      // copy a row from the bottom half to the top\n      result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n\n      // copy the copy of the top half row to the bottom half\n      result.set(temp, bottomOffset);\n    }\n    return result;\n  },\n  erectPackedFloat: (array, width) => {\n    return array.subarray(0, width);\n  },\n  erect2DPackedFloat: (array, width, height) => {\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const xStart = y * width;\n      const xEnd = xStart + width;\n      yResults[y] = array.subarray(xStart, xEnd);\n    }\n    return yResults;\n  },\n  erect3DPackedFloat: (array, width, height, depth) => {\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xStart = (z * height * width) + y * width;\n        const xEnd = xStart + width;\n        yResults[y] = array.subarray(xStart, xEnd);\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectMemoryOptimizedFloat: (array, width) => {\n    return array.subarray(0, width);\n  },\n  erectMemoryOptimized2DFloat: (array, width, height) => {\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const offset = y * width;\n      yResults[y] = array.subarray(offset, offset + width);\n    }\n    return yResults;\n  },\n  erectMemoryOptimized3DFloat: (array, width, height, depth) => {\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const offset = (z * height * width) + (y * width);\n        yResults[y] = array.subarray(offset, offset + width);\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectFloat: (array, width) => {\n    const xResults = new Float32Array(width);\n    let i = 0;\n    for (let x = 0; x < width; x++) {\n      xResults[x] = array[i];\n      i += 4;\n    }\n    return xResults;\n  },\n  erect2DFloat: (array, width, height) => {\n    const yResults = new Array(height);\n    let i = 0;\n    for (let y = 0; y < height; y++) {\n      const xResults = new Float32Array(width);\n      for (let x = 0; x < width; x++) {\n        xResults[x] = array[i];\n        i += 4;\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DFloat: (array, width, height, depth) => {\n    const zResults = new Array(depth);\n    let i = 0;\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Float32Array(width);\n        for (let x = 0; x < width; x++) {\n          xResults[x] = array[i];\n          i += 4;\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectArray2: (array, width) => {\n    const xResults = new Array(width);\n    const xResultsMax = width * 4;\n    let i = 0;\n    for (let x = 0; x < xResultsMax; x += 4) {\n      xResults[i++] = array.subarray(x, x + 2);\n    }\n    return xResults;\n  },\n  erect2DArray2: (array, width, height) => {\n    const yResults = new Array(height);\n    const XResultsMax = width * 4;\n    for (let y = 0; y < height; y++) {\n      const xResults = new Array(width);\n      const offset = y * XResultsMax;\n      let i = 0;\n      for (let x = 0; x < XResultsMax; x += 4) {\n        xResults[i++] = array.subarray(x + offset, x + offset + 2);\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DArray2: (array, width, height, depth) => {\n    const xResultsMax = width * 4;\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Array(width);\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\n        let i = 0;\n        for (let x = 0; x < xResultsMax; x += 4) {\n          xResults[i++] = array.subarray(x + offset, x + offset + 2);\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectArray3: (array, width) => {\n    const xResults = new Array(width);\n    const xResultsMax = width * 4;\n    let i = 0;\n    for (let x = 0; x < xResultsMax; x += 4) {\n      xResults[i++] = array.subarray(x, x + 3);\n    }\n    return xResults;\n  },\n  erect2DArray3: (array, width, height) => {\n    const xResultsMax = width * 4;\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const xResults = new Array(width);\n      const offset = y * xResultsMax;\n      let i = 0;\n      for (let x = 0; x < xResultsMax; x += 4) {\n        xResults[i++] = array.subarray(x + offset, x + offset + 3);\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DArray3: (array, width, height, depth) => {\n    const xResultsMax = width * 4;\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Array(width);\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\n        let i = 0;\n        for (let x = 0; x < xResultsMax; x += 4) {\n          xResults[i++] = array.subarray(x + offset, x + offset + 3);\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectArray4: (array, width) => {\n    const xResults = new Array(array);\n    const xResultsMax = width * 4;\n    let i = 0;\n    for (let x = 0; x < xResultsMax; x += 4) {\n      xResults[i++] = array.subarray(x, x + 4);\n    }\n    return xResults;\n  },\n  erect2DArray4: (array, width, height) => {\n    const xResultsMax = width * 4;\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const xResults = new Array(width);\n      const offset = y * xResultsMax;\n      let i = 0;\n      for (let x = 0; x < xResultsMax; x += 4) {\n        xResults[i++] = array.subarray(x + offset, x + offset + 4);\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DArray4: (array, width, height, depth) => {\n    const xResultsMax = width * 4;\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Array(width);\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\n        let i = 0;\n        for (let x = 0; x < xResultsMax; x += 4) {\n          xResults[i++] = array.subarray(x + offset, x + offset + 4);\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n\n  /**\n   *\n   * @param {String} source\n   * @param {Object} settings\n   * @return {String}\n   */\n  flattenFunctionToString: (source, settings) => {\n    const { findDependency, thisLookup, doNotDefine } = settings;\n    let flattened = settings.flattened;\n    if (!flattened) {\n      flattened = settings.flattened = {};\n    }\n    const ast = acorn.parse(source);\n    const functionDependencies = [];\n    let indent = 0;\n\n    function flatten(ast) {\n      if (Array.isArray(ast)) {\n        const results = [];\n        for (let i = 0; i < ast.length; i++) {\n          results.push(flatten(ast[i]));\n        }\n        return results.join('');\n      }\n      switch (ast.type) {\n        case 'Program':\n          return flatten(ast.body) + (ast.body[0].type === 'VariableDeclaration' ? ';' : '');\n        case 'FunctionDeclaration':\n          return `function ${ast.id.name}(${ast.params.map(flatten).join(', ')}) ${ flatten(ast.body) }`;\n        case 'BlockStatement': {\n          const result = [];\n          indent += 2;\n          for (let i = 0; i < ast.body.length; i++) {\n            const flat = flatten(ast.body[i]);\n            if (flat) {\n              result.push(' '.repeat(indent) + flat, ';\\n');\n            }\n          }\n          indent -= 2;\n          return `{\\n${result.join('')}}`;\n        }\n        case 'VariableDeclaration':\n          const declarations = utils.normalizeDeclarations(ast)\n            .map(flatten)\n            .filter(r => r !== null);\n          if (declarations.length < 1) {\n            return '';\n          } else {\n            return `${ast.kind} ${declarations.join(',')}`;\n          }\n          case 'VariableDeclarator':\n            if (ast.init.object && ast.init.object.type === 'ThisExpression') {\n              const lookup = thisLookup(ast.init.property.name, true);\n              if (lookup) {\n                return `${ast.id.name} = ${flatten(ast.init)}`;\n              } else {\n                return null;\n              }\n            } else {\n              return `${ast.id.name} = ${flatten(ast.init)}`;\n            }\n            case 'CallExpression': {\n              if (ast.callee.property.name === 'subarray') {\n                return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              }\n              if (ast.callee.object.name === 'gl' || ast.callee.object.name === 'context') {\n                return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              }\n              if (ast.callee.object.type === 'ThisExpression') {\n                functionDependencies.push(findDependency('this', ast.callee.property.name));\n                return `${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              } else if (ast.callee.object.name) {\n                const foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);\n                if (foundSource === null) {\n                  // we're not flattening it\n                  return `${ast.callee.object.name}.${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n                } else {\n                  functionDependencies.push(foundSource);\n                  // we're flattening it\n                  return `${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n                }\n              } else if (ast.callee.object.type === 'MemberExpression') {\n                return `${flatten(ast.callee.object)}.${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              } else {\n                throw new Error('unknown ast.callee');\n              }\n            }\n            case 'ReturnStatement':\n              return `return ${flatten(ast.argument)}`;\n            case 'BinaryExpression':\n              return `(${flatten(ast.left)}${ast.operator}${flatten(ast.right)})`;\n            case 'UnaryExpression':\n              if (ast.prefix) {\n                return `${ast.operator} ${flatten(ast.argument)}`;\n              } else {\n                return `${flatten(ast.argument)} ${ast.operator}`;\n              }\n              case 'ExpressionStatement':\n                return `${flatten(ast.expression)}`;\n              case 'SequenceExpression':\n                return `(${flatten(ast.expressions)})`;\n              case 'ArrowFunctionExpression':\n                return `(${ast.params.map(flatten).join(', ')}) => ${flatten(ast.body)}`;\n              case 'Literal':\n                return ast.raw;\n              case 'Identifier':\n                return ast.name;\n              case 'MemberExpression':\n                if (ast.object.type === 'ThisExpression') {\n                  return thisLookup(ast.property.name);\n                }\n                if (ast.computed) {\n                  return `${flatten(ast.object)}[${flatten(ast.property)}]`;\n                }\n                return flatten(ast.object) + '.' + flatten(ast.property);\n              case 'ThisExpression':\n                return 'this';\n              case 'NewExpression':\n                return `new ${flatten(ast.callee)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              case 'ForStatement':\n                return `for (${flatten(ast.init)};${flatten(ast.test)};${flatten(ast.update)}) ${flatten(ast.body)}`;\n              case 'AssignmentExpression':\n                return `${flatten(ast.left)}${ast.operator}${flatten(ast.right)}`;\n              case 'UpdateExpression':\n                return `${flatten(ast.argument)}${ast.operator}`;\n              case 'IfStatement':\n                return `if (${flatten(ast.test)}) ${flatten(ast.consequent)}`;\n              case 'ThrowStatement':\n                return `throw ${flatten(ast.argument)}`;\n              case 'ObjectPattern':\n                return ast.properties.map(flatten).join(', ');\n              case 'ArrayPattern':\n                return ast.elements.map(flatten).join(', ');\n              case 'DebuggerStatement':\n                return 'debugger;';\n              case 'ConditionalExpression':\n                return `${flatten(ast.test)}?${flatten(ast.consequent)}:${flatten(ast.alternate)}`;\n              case 'Property':\n                if (ast.kind === 'init') {\n                  return flatten(ast.key);\n                }\n      }\n      throw new Error(`unhandled ast.type of ${ ast.type }`);\n    }\n    const result = flatten(ast);\n    if (functionDependencies.length > 0) {\n      const flattenedFunctionDependencies = [];\n      for (let i = 0; i < functionDependencies.length; i++) {\n        const functionDependency = functionDependencies[i];\n        if (!flattened[functionDependency]) {\n          flattened[functionDependency] = true;\n        }\n        functionDependency ? flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + '\\n') : '';\n      }\n      return flattenedFunctionDependencies.join('') + result;\n    }\n    return result;\n  },\n\n  normalizeDeclarations: (ast) => {\n    if (ast.type !== 'VariableDeclaration') throw new Error('Ast is not of type \"VariableDeclaration\"');\n    const normalizedDeclarations = [];\n    for (let declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++) {\n      const declaration = ast.declarations[declarationIndex];\n      if (declaration.id && declaration.id.type === 'ObjectPattern' && declaration.id.properties) {\n        const { properties } = declaration.id;\n        for (let propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {\n          const property = properties[propertyIndex];\n          if (property.value.type === 'ObjectPattern' && property.value.properties) {\n            for (let subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++) {\n              const subProperty = property.value.properties[subPropertyIndex];\n              if (subProperty.type === 'Property') {\n                normalizedDeclarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: subProperty.key.name\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {\n                      type: 'MemberExpression',\n                      object: declaration.init,\n                      property: {\n                        type: 'Identifier',\n                        name: property.key.name\n                      },\n                      computed: false\n                    },\n                    property: {\n                      type: 'Identifier',\n                      name: subProperty.key.name\n                    },\n                    computed: false\n                  }\n                });\n              } else {\n                throw new Error('unexpected state');\n              }\n            }\n          } else if (property.value.type === 'Identifier') {\n            normalizedDeclarations.push({\n              type: 'VariableDeclarator',\n              id: {\n                type: 'Identifier',\n                name: property.value && property.value.name ? property.value.name : property.key.name\n              },\n              init: {\n                type: 'MemberExpression',\n                object: declaration.init,\n                property: {\n                  type: 'Identifier',\n                  name: property.key.name\n                },\n                computed: false\n              }\n            });\n          } else {\n            throw new Error('unexpected state');\n          }\n        }\n      } else if (declaration.id && declaration.id.type === 'ArrayPattern' && declaration.id.elements) {\n        const { elements } = declaration.id;\n        for (let elementIndex = 0; elementIndex < elements.length; elementIndex++) {\n          const element = elements[elementIndex];\n          if (element.type === 'Identifier') {\n            normalizedDeclarations.push({\n              type: 'VariableDeclarator',\n              id: {\n                type: 'Identifier',\n                name: element.name\n              },\n              init: {\n                type: 'MemberExpression',\n                object: declaration.init,\n                property: {\n                  type: 'Literal',\n                  value: elementIndex,\n                  raw: elementIndex.toString(),\n                  start: element.start,\n                  end: element.end\n                },\n                computed: true\n              }\n            });\n          } else {\n            throw new Error('unexpected state');\n          }\n        }\n      } else {\n        normalizedDeclarations.push(declaration);\n      }\n    }\n    return normalizedDeclarations;\n  },\n\n  /**\n   *\n   * @param {GPU} gpu\n   * @param image\n   * @return {Array}\n   */\n  splitHTMLImageToRGB: (gpu, image) => {\n    const rKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.r * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const gKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.g * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const bKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.b * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const aKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.a * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const result = [\n      rKernel(image),\n      gKernel(image),\n      bKernel(image),\n      aKernel(image),\n    ];\n    result.rKernel = rKernel;\n    result.gKernel = gKernel;\n    result.bKernel = bKernel;\n    result.aKernel = aKernel;\n    result.gpu = gpu;\n    return result;\n  },\n\n  /**\n   * A visual debug utility\n   * @param {GPU} gpu\n   * @param rgba\n   * @param width\n   * @param height\n   * @return {Object[]}\n   */\n  splitRGBAToCanvases: (gpu, rgba, width, height) => {\n    const visualKernelR = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(pixel.r / 255, 0, 0, 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelR(rgba);\n\n    const visualKernelG = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(0, pixel.g / 255, 0, 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelG(rgba);\n\n    const visualKernelB = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(0, 0, pixel.b / 255, 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelB(rgba);\n\n    const visualKernelA = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(255, 255, 255, pixel.a / 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelA(rgba);\n    return [\n      visualKernelR.canvas,\n      visualKernelG.canvas,\n      visualKernelB.canvas,\n      visualKernelA.canvas,\n    ];\n  },\n\n  getMinifySafeName: (fn) => {\n    try {\n      const ast = acorn.parse(`const value = ${fn.toString()}`);\n      const { init } = ast.body[0].declarations[0];\n      return init.body.name || init.body.body[0].argument.name;\n    } catch (e) {\n      throw new Error('Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }');\n    }\n  },\n  sanitizeName: function(name) {\n    if (dollarSign.test(name)) {\n      name = name.replace(dollarSign, 'S_S');\n    }\n    if (doubleUnderscore.test(name)) {\n      name = name.replace(doubleUnderscore, 'U_U');\n    } else if (singleUnderscore.test(name)) {\n      name = name.replace(singleUnderscore, 'u_u');\n    }\n    return name;\n  }\n};\n\nconst dollarSign = /\\$/;\nconst doubleUnderscore = /__/;\nconst singleUnderscore = /_/;\n\nconst _systemEndianness = utils.getSystemEndianness();\n\nmodule.exports = {\n  utils\n};", "const { utils } = require('../utils');\nconst { Input } = require('../input');\n\nclass Kernel {\n  /**\n   * @type {Boolean}\n   */\n  static get isSupported() {\n    throw new Error(`\"isSupported\" not implemented on ${ this.name }`);\n  }\n\n  /**\n   * @abstract\n   * @returns {Boolean}\n   */\n  static isContextMatch(context) {\n    throw new Error(`\"isContextMatch\" not implemented on ${ this.name }`);\n  }\n\n  /**\n   * @type {IKernelFeatures}\n   * Used internally to populate the kernel.feature, which is a getter for the output of this value\n   */\n  static getFeatures() {\n    throw new Error(`\"getFeatures\" not implemented on ${ this.name }`);\n  }\n\n  static destroyContext(context) {\n    throw new Error(`\"destroyContext\" called on ${ this.name }`);\n  }\n\n  static nativeFunctionArguments() {\n    throw new Error(`\"nativeFunctionArguments\" called on ${ this.name }`);\n  }\n\n  static nativeFunctionReturnType() {\n    throw new Error(`\"nativeFunctionReturnType\" called on ${ this.name }`);\n  }\n\n  static combineKernels() {\n    throw new Error(`\"combineKernels\" called on ${ this.name }`);\n  }\n\n  /**\n   *\n   * @param {string|IKernelJSON} source\n   * @param [settings]\n   */\n  constructor(source, settings) {\n    if (typeof source !== 'object') {\n      if (typeof source !== 'string') {\n        throw new Error('source not a string');\n      }\n      if (!utils.isFunctionString(source)) {\n        throw new Error('source not a function string');\n      }\n    }\n    this.useLegacyEncoder = false;\n    this.fallbackRequested = false;\n    this.onRequestFallback = null;\n\n    /**\n     * Name of the arguments found from parsing source argument\n     * @type {String[]}\n     */\n    this.argumentNames = typeof source === 'string' ? utils.getArgumentNamesFromString(source) : null;\n    this.argumentTypes = null;\n    this.argumentSizes = null;\n    this.argumentBitRatios = null;\n    this.kernelArguments = null;\n    this.kernelConstants = null;\n    this.forceUploadKernelConstants = null;\n\n\n    /**\n     * The function source\n     * @type {String|IKernelJSON}\n     */\n    this.source = source;\n\n    /**\n     * The size of the kernel's output\n     * @type {Number[]}\n     */\n    this.output = null;\n\n    /**\n     * Debug mode\n     * @type {Boolean}\n     */\n    this.debug = false;\n\n    /**\n     * Graphical mode\n     * @type {Boolean}\n     */\n    this.graphical = false;\n\n    /**\n     * Maximum loops when using argument values to prevent infinity\n     * @type {Number}\n     */\n    this.loopMaxIterations = 0;\n\n    /**\n     * Constants used in kernel via `this.constants`\n     * @type {Object}\n     */\n    this.constants = null;\n\n    /**\n     *\n     * @type {Object.<string, string>}\n     */\n    this.constantTypes = null;\n\n    /**\n     *\n     * @type {Object.<string, number>}\n     */\n    this.constantBitRatios = null;\n\n    /**\n     *\n     * @type {boolean}\n     */\n    this.dynamicArguments = false;\n\n    /**\n     *\n     * @type {boolean}\n     */\n    this.dynamicOutput = false;\n\n    /**\n     *\n     * @type {Object}\n     */\n    this.canvas = null;\n\n    /**\n     *\n     * @type {Object}\n     */\n    this.context = null;\n\n    /**\n     *\n     * @type {Boolean}\n     */\n    this.checkContext = null;\n\n    /**\n     *\n     * @type {GPU}\n     */\n    this.gpu = null;\n\n    /**\n     *\n     * @type {IGPUFunction[]}\n     */\n    this.functions = null;\n\n    /**\n     *\n     * @type {IGPUNativeFunction[]}\n     */\n    this.nativeFunctions = null;\n\n    /**\n     *\n     * @type {String}\n     */\n    this.injectedNative = null;\n\n    /**\n     *\n     * @type {ISubKernel[]}\n     */\n    this.subKernels = null;\n\n    /**\n     *\n     * @type {Boolean}\n     */\n    this.validate = true;\n\n    /**\n     * Enforces kernel to write to a new array or texture on run\n     * @type {Boolean}\n     */\n    this.immutable = false;\n\n    /**\n     * Enforces kernel to write to a texture on run\n     * @type {Boolean}\n     */\n    this.pipeline = false;\n\n    /**\n     * Make GPU use single precision or unsigned.  Acceptable values: 'single' or 'unsigned'\n     * @type {String|null}\n     * @enum 'single' | 'unsigned'\n     */\n    this.precision = null;\n\n    /**\n     *\n     * @type {String|null}\n     * @enum 'speed' | 'balanced' | 'precision'\n     */\n    this.tactic = null;\n\n    this.plugins = null;\n\n    this.returnType = null;\n    this.leadingReturnStatement = null;\n    this.followingReturnStatement = null;\n    this.optimizeFloatMemory = null;\n    this.strictIntegers = false;\n    this.fixIntegerDivisionAccuracy = null;\n    this.built = false;\n    this.signature = null;\n  }\n\n  /**\n   *\n   * @param {IDirectKernelSettings|IJSONSettings} settings\n   */\n  mergeSettings(settings) {\n    for (let p in settings) {\n      if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\n      switch (p) {\n        case 'output':\n          if (!Array.isArray(settings.output)) {\n            this.setOutput(settings.output); // Flatten output object\n            continue;\n          }\n          break;\n        case 'functions':\n          this.functions = [];\n          for (let i = 0; i < settings.functions.length; i++) {\n            this.addFunction(settings.functions[i]);\n          }\n          continue;\n        case 'graphical':\n          if (settings[p] && !settings.hasOwnProperty('precision')) {\n            this.precision = 'unsigned';\n          }\n          this[p] = settings[p];\n          continue;\n        case 'nativeFunctions':\n          if (!settings.nativeFunctions) continue;\n          this.nativeFunctions = [];\n          for (let i = 0; i < settings.nativeFunctions.length; i++) {\n            const s = settings.nativeFunctions[i];\n            const { name, source } = s;\n            this.addNativeFunction(name, source, s);\n          }\n          continue;\n      }\n      this[p] = settings[p];\n    }\n\n    if (!this.canvas) this.canvas = this.initCanvas();\n    if (!this.context) this.context = this.initContext();\n    if (!this.plugins) this.plugins = this.initPlugins(settings);\n  }\n  /**\n   * @desc Builds the Kernel, by compiling Fragment and Vertical Shaders,\n   * and instantiates the program.\n   * @abstract\n   */\n  build() {\n    throw new Error(`\"build\" not defined on ${ this.constructor.name }`);\n  }\n\n  /**\n   * @desc Run the kernel program, and send the output to renderOutput\n   * <p> This method calls a helper method *renderOutput* to return the result. </p>\n   * @returns {Float32Array|Float32Array[]|Float32Array[][]|void} Result The final output of the program, as float, and as Textures for reuse.\n   * @abstract\n   */\n  run() {\n    throw new Error(`\"run\" not defined on ${ this.constructor.name }`)\n  }\n\n  /**\n   * @abstract\n   * @return {Object}\n   */\n  initCanvas() {\n    throw new Error(`\"initCanvas\" not defined on ${ this.constructor.name }`);\n  }\n\n  /**\n   * @abstract\n   * @return {Object}\n   */\n  initContext() {\n    throw new Error(`\"initContext\" not defined on ${ this.constructor.name }`);\n  }\n\n  /**\n   * @param {IDirectKernelSettings} settings\n   * @return {string[]};\n   * @abstract\n   */\n  initPlugins(settings) {\n    throw new Error(`\"initPlugins\" not defined on ${ this.constructor.name }`);\n  }\n\n  /**\n   *\n   * @param {KernelFunction|string|IGPUFunction} source\n   * @param {IFunctionSettings} [settings]\n   * @return {Kernel}\n   */\n  addFunction(source, settings = {}) {\n    if (source.name && source.source && source.argumentTypes && 'returnType' in source) {\n      this.functions.push(source);\n    } else if ('settings' in source && 'source' in source) {\n      this.functions.push(this.functionToIGPUFunction(source.source, source.settings));\n    } else if (typeof source === 'string' || typeof source === 'function') {\n      this.functions.push(this.functionToIGPUFunction(source, settings));\n    } else {\n      throw new Error(`function not properly defined`);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {string} source\n   * @param {IGPUFunctionSettings} [settings]\n   */\n  addNativeFunction(name, source, settings = {}) {\n    const { argumentTypes, argumentNames } = settings.argumentTypes ?\n      splitArgumentTypes(settings.argumentTypes) :\n      this.constructor.nativeFunctionArguments(source) || {};\n    this.nativeFunctions.push({\n      name,\n      source,\n      settings,\n      argumentTypes,\n      argumentNames,\n      returnType: settings.returnType || this.constructor.nativeFunctionReturnType(source)\n    });\n    return this;\n  }\n\n  /**\n   * @desc Setup the parameter types for the parameters\n   * supplied to the Kernel function\n   *\n   * @param {IArguments} args - The actual parameters sent to the Kernel\n   */\n  setupArguments(args) {\n    this.kernelArguments = [];\n    if (!this.argumentTypes) {\n      if (!this.argumentTypes) {\n        this.argumentTypes = [];\n        for (let i = 0; i < args.length; i++) {\n          const argType = utils.getVariableType(args[i], this.strictIntegers);\n          const type = argType === 'Integer' ? 'Number' : argType;\n          this.argumentTypes.push(type);\n          this.kernelArguments.push({\n            type\n          });\n        }\n      }\n    } else {\n      for (let i = 0; i < this.argumentTypes.length; i++) {\n        this.kernelArguments.push({\n          type: this.argumentTypes[i]\n        });\n      }\n    }\n\n    // setup sizes\n    this.argumentSizes = new Array(args.length);\n    this.argumentBitRatios = new Int32Array(args.length);\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      this.argumentSizes[i] = arg.constructor === Input ? arg.size : null;\n      this.argumentBitRatios[i] = this.getBitRatio(arg);\n    }\n\n    if (this.argumentNames.length !== args.length) {\n      throw new Error(`arguments are miss-aligned`);\n    }\n  }\n\n  /**\n   * Setup constants\n   */\n  setupConstants() {\n    this.kernelConstants = [];\n    let needsConstantTypes = this.constantTypes === null;\n    if (needsConstantTypes) {\n      this.constantTypes = {};\n    }\n    this.constantBitRatios = {};\n    if (this.constants) {\n      for (let name in this.constants) {\n        if (needsConstantTypes) {\n          const type = utils.getVariableType(this.constants[name], this.strictIntegers);\n          this.constantTypes[name] = type;\n          this.kernelConstants.push({\n            name,\n            type\n          });\n        } else {\n          this.kernelConstants.push({\n            name,\n            type: this.constantTypes[name]\n          });\n        }\n        this.constantBitRatios[name] = this.getBitRatio(this.constants[name]);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param flag\n   * @return {this}\n   */\n  setOptimizeFloatMemory(flag) {\n    this.optimizeFloatMemory = flag;\n    return this;\n  }\n\n  /**\n   *\n   * @param {Array|Object} output\n   * @return {number[]}\n   */\n  toKernelOutput(output) {\n    if (output.hasOwnProperty('x')) {\n      if (output.hasOwnProperty('y')) {\n        if (output.hasOwnProperty('z')) {\n          return [output.x, output.y, output.z];\n        } else {\n          return [output.x, output.y];\n        }\n      } else {\n        return [output.x];\n      }\n    } else {\n      return output;\n    }\n  }\n\n  /**\n   * @desc Set output dimensions of the kernel function\n   * @param {Array|Object} output - The output array to set the kernel output size to\n   * @return {this}\n   */\n  setOutput(output) {\n    this.output = this.toKernelOutput(output);\n    return this;\n  }\n\n  /**\n   * @desc Toggle debug mode\n   * @param {Boolean} flag - true to enable debug\n   * @return {this}\n   */\n  setDebug(flag) {\n    this.debug = flag;\n    return this;\n  }\n\n  /**\n   * @desc Toggle graphical output mode\n   * @param {Boolean} flag - true to enable graphical output\n   * @return {this}\n   */\n  setGraphical(flag) {\n    this.graphical = flag;\n    this.precision = 'unsigned';\n    return this;\n  }\n\n  /**\n   * @desc Set the maximum number of loop iterations\n   * @param {number} max - iterations count\n   * @return {this}\n   */\n  setLoopMaxIterations(max) {\n    this.loopMaxIterations = max;\n    return this;\n  }\n\n  /**\n   * @desc Set Constants\n   * @return {this}\n   */\n  setConstants(constants) {\n    this.constants = constants;\n    return this;\n  }\n\n  /**\n   *\n   * @param {IKernelValueTypes} constantTypes\n   * @return {this}\n   */\n  setConstantTypes(constantTypes) {\n    this.constantTypes = constantTypes;\n    return this;\n  }\n\n  /**\n   *\n   * @param {IFunction[]|KernelFunction[]} functions\n   * @return {this}\n   */\n  setFunctions(functions) {\n    for (let i = 0; i < functions.length; i++) {\n      this.addFunction(functions[i]);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param {IGPUNativeFunction[]} nativeFunctions\n   * @return {this}\n   */\n  setNativeFunctions(nativeFunctions) {\n    for (let i = 0; i < nativeFunctions.length; i++) {\n      const settings = nativeFunctions[i];\n      const { name, source } = settings;\n      this.addNativeFunction(name, source, settings);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param {String} injectedNative\n   * @return {this}\n   */\n  setInjectedNative(injectedNative) {\n    this.injectedNative = injectedNative;\n    return this;\n  }\n\n  /**\n   * Set writing to texture on/off\n   * @param flag\n   * @return {this}\n   */\n  setPipeline(flag) {\n    this.pipeline = flag;\n    return this;\n  }\n\n  /**\n   * Set precision to 'unsigned' or 'single'\n   * @param {String} flag 'unsigned' or 'single'\n   * @return {this}\n   */\n  setPrecision(flag) {\n    this.precision = flag;\n    return this;\n  }\n\n  /**\n   * @param flag\n   * @return {Kernel}\n   * @deprecated\n   */\n  setDimensions(flag) {\n    utils.warnDeprecated('method', 'setDimensions', 'setOutput');\n    this.output = flag;\n    return this;\n  }\n\n  /**\n   * @param flag\n   * @return {this}\n   * @deprecated\n   */\n  setOutputToTexture(flag) {\n    utils.warnDeprecated('method', 'setOutputToTexture', 'setPipeline');\n    this.pipeline = flag;\n    return this;\n  }\n\n  /**\n   * Set to immutable\n   * @param flag\n   * @return {this}\n   */\n  setImmutable(flag) {\n    this.immutable = flag;\n    return this;\n  }\n\n  /**\n   * @desc Bind the canvas to kernel\n   * @param {Object} canvas\n   * @return {this}\n   */\n  setCanvas(canvas) {\n    this.canvas = canvas;\n    return this;\n  }\n\n  /**\n   * @param {Boolean} flag\n   * @return {this}\n   */\n  setStrictIntegers(flag) {\n    this.strictIntegers = flag;\n    return this;\n  }\n\n  /**\n   *\n   * @param flag\n   * @return {this}\n   */\n  setDynamicOutput(flag) {\n    this.dynamicOutput = flag;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * @param flag\n   * @return {this}\n   */\n  setHardcodeConstants(flag) {\n    utils.warnDeprecated('method', 'setHardcodeConstants');\n    this.setDynamicOutput(flag);\n    this.setDynamicArguments(flag);\n    return this;\n  }\n\n  /**\n   *\n   * @param flag\n   * @return {this}\n   */\n  setDynamicArguments(flag) {\n    this.dynamicArguments = flag;\n    return this;\n  }\n\n  /**\n   * @param {Boolean} flag\n   * @return {this}\n   */\n  setUseLegacyEncoder(flag) {\n    this.useLegacyEncoder = flag;\n    return this;\n  }\n\n  /**\n   *\n   * @param {Boolean} flag\n   * @return {this}\n   */\n  setWarnVarUsage(flag) {\n    utils.warnDeprecated('method', 'setWarnVarUsage');\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * @returns {Object}\n   */\n  getCanvas() {\n    utils.warnDeprecated('method', 'getCanvas');\n    return this.canvas;\n  }\n\n  /**\n   * @deprecated\n   * @returns {Object}\n   */\n  getWebGl() {\n    utils.warnDeprecated('method', 'getWebGl');\n    return this.context;\n  }\n\n  /**\n   * @desc Bind the webGL instance to kernel\n   * @param {WebGLRenderingContext} context - webGl instance to bind\n   */\n  setContext(context) {\n    this.context = context;\n    return this;\n  }\n\n  /**\n   *\n   * @param {IKernelValueTypes|GPUVariableType[]} argumentTypes\n   * @return {this}\n   */\n  setArgumentTypes(argumentTypes) {\n    if (Array.isArray(argumentTypes)) {\n      this.argumentTypes = argumentTypes;\n    } else {\n      this.argumentTypes = [];\n      for (const p in argumentTypes) {\n        if (!argumentTypes.hasOwnProperty(p)) continue;\n        const argumentIndex = this.argumentNames.indexOf(p);\n        if (argumentIndex === -1) throw new Error(`unable to find argument ${ p }`);\n        this.argumentTypes[argumentIndex] = argumentTypes[p];\n      }\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param {Tactic} tactic\n   * @return {this}\n   */\n  setTactic(tactic) {\n    this.tactic = tactic;\n    return this;\n  }\n\n  requestFallback(args) {\n    if (!this.onRequestFallback) {\n      throw new Error(`\"onRequestFallback\" not defined on ${ this.constructor.name }`);\n    }\n    this.fallbackRequested = true;\n    return this.onRequestFallback(args);\n  }\n\n  /**\n   * @desc Validate settings\n   * @abstract\n   */\n  validateSettings() {\n    throw new Error(`\"validateSettings\" not defined on ${ this.constructor.name }`);\n  }\n\n  /**\n   * @desc Add a sub kernel to the root kernel instance.\n   * This is what `createKernelMap` uses.\n   *\n   * @param {ISubKernel} subKernel - function (as a String) of the subKernel to add\n   */\n  addSubKernel(subKernel) {\n    if (this.subKernels === null) {\n      this.subKernels = [];\n    }\n    if (!subKernel.source) throw new Error('subKernel missing \"source\" property');\n    if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing \"property\" property');\n    if (!subKernel.name) throw new Error('subKernel missing \"name\" property');\n    this.subKernels.push(subKernel);\n    return this;\n  }\n\n  /**\n   * @desc Destroys all memory associated with this kernel\n   * @param {Boolean} [removeCanvasReferences] remove any associated canvas references\n   */\n  destroy(removeCanvasReferences) {\n    throw new Error(`\"destroy\" called on ${ this.constructor.name }`);\n  }\n\n  /**\n   * bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\n   * @param value\n   * @returns {number}\n   */\n  getBitRatio(value) {\n    if (this.precision === 'single') {\n      // 8 and 16 are up-converted to float32\n      return 4;\n    } else if (Array.isArray(value[0])) {\n      return this.getBitRatio(value[0]);\n    } else if (value.constructor === Input) {\n      return this.getBitRatio(value.value);\n    }\n    switch (value.constructor) {\n      case Uint8ClampedArray:\n      case Uint8Array:\n      case Int8Array:\n        return 1;\n      case Uint16Array:\n      case Int16Array:\n        return 2;\n      case Float32Array:\n      case Int32Array:\n      default:\n        return 4;\n    }\n  }\n\n  /**\n   * @param {Boolean} [flip]\n   * @returns {Uint8ClampedArray}\n   */\n  getPixels(flip) {\n    throw new Error(`\"getPixels\" called on ${ this.constructor.name }`);\n  }\n\n  checkOutput() {\n    if (!this.output || !utils.isArray(this.output)) throw new Error('kernel.output not an array');\n    if (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');\n    for (let i = 0; i < this.output.length; i++) {\n      if (isNaN(this.output[i]) || this.output[i] < 1) {\n        throw new Error(`${ this.constructor.name }.output[${ i }] incorrectly defined as \\`${ this.output[i] }\\`, needs to be numeric, and greater than 0`);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {String} value\n   */\n  prependString(value) {\n    throw new Error(`\"prependString\" called on ${ this.constructor.name }`);\n  }\n\n  /**\n   *\n   * @param {String} value\n   * @return Boolean\n   */\n  hasPrependString(value) {\n    throw new Error(`\"hasPrependString\" called on ${ this.constructor.name }`);\n  }\n\n  /**\n   * @return {IKernelJSON}\n   */\n  toJSON() {\n    return {\n      settings: {\n        output: this.output,\n        pipeline: this.pipeline,\n        argumentNames: this.argumentNames,\n        argumentsTypes: this.argumentTypes,\n        constants: this.constants,\n        pluginNames: this.plugins ? this.plugins.map(plugin => plugin.name) : null,\n        returnType: this.returnType,\n      }\n    };\n  }\n\n  /**\n   * @param {IArguments} args\n   */\n  buildSignature(args) {\n    const Constructor = this.constructor;\n    this.signature = Constructor.getSignature(this, Constructor.getArgumentTypes(this, args));\n  }\n\n  /**\n   * @param {Kernel} kernel\n   * @param {IArguments} args\n   * @returns GPUVariableType[]\n   */\n  static getArgumentTypes(kernel, args) {\n    const argumentTypes = new Array(args.length);\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      const type = kernel.argumentTypes[i];\n      if (arg.type) {\n        argumentTypes[i] = arg.type;\n      } else {\n        switch (type) {\n          case 'Number':\n          case 'Integer':\n          case 'Float':\n          case 'ArrayTexture(1)':\n            argumentTypes[i] = utils.getVariableType(arg);\n            break;\n          default:\n            argumentTypes[i] = type;\n        }\n      }\n    }\n    return argumentTypes;\n  }\n\n  /**\n   *\n   * @param {Kernel} kernel\n   * @param {GPUVariableType[]} argumentTypes\n   * @abstract\n   */\n  static getSignature(kernel, argumentTypes) {\n    throw new Error(`\"getSignature\" not implemented on ${ this.name }`);\n  }\n\n  /**\n   *\n   * @param {String|Function} source\n   * @param {IFunctionSettings} [settings]\n   * @returns {IGPUFunction}\n   */\n  functionToIGPUFunction(source, settings = {}) {\n    if (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');\n    const sourceString = typeof source === 'string' ? source : source.toString();\n    let argumentTypes = [];\n\n    if (Array.isArray(settings.argumentTypes)) {\n      argumentTypes = settings.argumentTypes;\n    } else if (typeof settings.argumentTypes === 'object') {\n      argumentTypes = utils.getArgumentNamesFromString(sourceString)\n        .map(name => settings.argumentTypes[name]) || [];\n    } else {\n      argumentTypes = settings.argumentTypes || [];\n    }\n\n    return {\n      name: utils.getFunctionNameFromString(sourceString) || null,\n      source: sourceString,\n      argumentTypes,\n      returnType: settings.returnType || null,\n    };\n  }\n\n  /**\n   *\n   * @param {Kernel} previousKernel\n   * @abstract\n   */\n  onActivate(previousKernel) {}\n}\n\nfunction splitArgumentTypes(argumentTypesObject) {\n  const argumentNames = Object.keys(argumentTypesObject);\n  const argumentTypes = [];\n  for (let i = 0; i < argumentNames.length; i++) {\n    const argumentName = argumentNames[i];\n    argumentTypes.push(argumentTypesObject[argumentName]);\n  }\n  return { argumentTypes, argumentNames };\n}\n\nmodule.exports = {\n  Kernel\n};", "/**\n * @desc This handles all the raw state, converted state, etc. of a single function.\n * [INTERNAL] A collection of functionNodes.\n * @class\n */\nclass FunctionBuilder {\n  /**\n   *\n   * @param {Kernel} kernel\n   * @param {FunctionNode} FunctionNode\n   * @param {object} [extraNodeOptions]\n   * @returns {FunctionBuilder}\n   * @static\n   */\n  static fromKernel(kernel, FunctionNode, extraNodeOptions) {\n    const {\n      kernelArguments,\n      kernelConstants,\n      argumentNames,\n      argumentSizes,\n      argumentBitRatios,\n      constants,\n      constantBitRatios,\n      debug,\n      loopMaxIterations,\n      nativeFunctions,\n      output,\n      optimizeFloatMemory,\n      precision,\n      plugins,\n      source,\n      subKernels,\n      functions,\n      leadingReturnStatement,\n      followingReturnStatement,\n      dynamicArguments,\n      dynamicOutput,\n    } = kernel;\n\n    const argumentTypes = new Array(kernelArguments.length);\n    const constantTypes = {};\n\n    for (let i = 0; i < kernelArguments.length; i++) {\n      argumentTypes[i] = kernelArguments[i].type;\n    }\n\n    for (let i = 0; i < kernelConstants.length; i++) {\n      const kernelConstant = kernelConstants[i];\n      constantTypes[kernelConstant.name] = kernelConstant.type;\n    }\n\n    const needsArgumentType = (functionName, index) => {\n      return functionBuilder.needsArgumentType(functionName, index);\n    };\n\n    const assignArgumentType = (functionName, index, type) => {\n      functionBuilder.assignArgumentType(functionName, index, type);\n    };\n\n    const lookupReturnType = (functionName, ast, requestingNode) => {\n      return functionBuilder.lookupReturnType(functionName, ast, requestingNode);\n    };\n\n    const lookupFunctionArgumentTypes = (functionName) => {\n      return functionBuilder.lookupFunctionArgumentTypes(functionName);\n    };\n\n    const lookupFunctionArgumentName = (functionName, argumentIndex) => {\n      return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);\n    };\n\n    const lookupFunctionArgumentBitRatio = (functionName, argumentName) => {\n      return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);\n    };\n\n    const triggerImplyArgumentType = (functionName, i, argumentType, requestingNode) => {\n      functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);\n    };\n\n    const triggerImplyArgumentBitRatio = (functionName, argumentName, calleeFunctionName, argumentIndex) => {\n      functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);\n    };\n\n    const onFunctionCall = (functionName, calleeFunctionName, args) => {\n      functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);\n    };\n\n    const onNestedFunction = (ast, source) => {\n      const argumentNames = [];\n      for (let i = 0; i < ast.params.length; i++) {\n        argumentNames.push(ast.params[i].name);\n      }\n      const nestedFunction = new FunctionNode(source, Object.assign({}, nodeOptions, {\n        returnType: null,\n        ast,\n        name: ast.id.name,\n        argumentNames,\n        lookupReturnType,\n        lookupFunctionArgumentTypes,\n        lookupFunctionArgumentName,\n        lookupFunctionArgumentBitRatio,\n        needsArgumentType,\n        assignArgumentType,\n        triggerImplyArgumentType,\n        triggerImplyArgumentBitRatio,\n        onFunctionCall,\n      }));\n      nestedFunction.traceFunctionAST(ast);\n      functionBuilder.addFunctionNode(nestedFunction);\n    };\n\n    const nodeOptions = Object.assign({\n      isRootKernel: false,\n      onNestedFunction,\n      lookupReturnType,\n      lookupFunctionArgumentTypes,\n      lookupFunctionArgumentName,\n      lookupFunctionArgumentBitRatio,\n      needsArgumentType,\n      assignArgumentType,\n      triggerImplyArgumentType,\n      triggerImplyArgumentBitRatio,\n      onFunctionCall,\n      optimizeFloatMemory,\n      precision,\n      constants,\n      constantTypes,\n      constantBitRatios,\n      debug,\n      loopMaxIterations,\n      output,\n      plugins,\n      dynamicArguments,\n      dynamicOutput,\n    }, extraNodeOptions || {});\n\n    const rootNodeOptions = Object.assign({}, nodeOptions, {\n      isRootKernel: true,\n      name: 'kernel',\n      argumentNames,\n      argumentTypes,\n      argumentSizes,\n      argumentBitRatios,\n      leadingReturnStatement,\n      followingReturnStatement,\n    });\n\n    if (typeof source === 'object' && source.functionNodes) {\n      return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);\n    }\n\n    const rootNode = new FunctionNode(source, rootNodeOptions);\n\n    let functionNodes = null;\n    if (functions) {\n      functionNodes = functions.map((fn) => new FunctionNode(fn.source, {\n        returnType: fn.returnType,\n        argumentTypes: fn.argumentTypes,\n        output,\n        plugins,\n        constants,\n        constantTypes,\n        constantBitRatios,\n        optimizeFloatMemory,\n        precision,\n        lookupReturnType,\n        lookupFunctionArgumentTypes,\n        lookupFunctionArgumentName,\n        lookupFunctionArgumentBitRatio,\n        needsArgumentType,\n        assignArgumentType,\n        triggerImplyArgumentType,\n        triggerImplyArgumentBitRatio,\n        onFunctionCall,\n        onNestedFunction,\n      }));\n    }\n\n    let subKernelNodes = null;\n    if (subKernels) {\n      subKernelNodes = subKernels.map((subKernel) => {\n        const { name, source } = subKernel;\n        return new FunctionNode(source, Object.assign({}, nodeOptions, {\n          name,\n          isSubKernel: true,\n          isRootKernel: false,\n        }));\n      });\n    }\n\n    const functionBuilder = new FunctionBuilder({\n      kernel,\n      rootNode,\n      functionNodes,\n      nativeFunctions,\n      subKernelNodes\n    });\n\n    return functionBuilder;\n  }\n\n  /**\n   *\n   * @param {IFunctionBuilderSettings} [settings]\n   */\n  constructor(settings) {\n    settings = settings || {};\n    this.kernel = settings.kernel;\n    this.rootNode = settings.rootNode;\n    this.functionNodes = settings.functionNodes || [];\n    this.subKernelNodes = settings.subKernelNodes || [];\n    this.nativeFunctions = settings.nativeFunctions || [];\n    this.functionMap = {};\n    this.nativeFunctionNames = [];\n    this.lookupChain = [];\n    this.functionNodeDependencies = {};\n    this.functionCalls = {};\n\n    if (this.rootNode) {\n      this.functionMap['kernel'] = this.rootNode;\n    }\n\n    if (this.functionNodes) {\n      for (let i = 0; i < this.functionNodes.length; i++) {\n        this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];\n      }\n    }\n\n    if (this.subKernelNodes) {\n      for (let i = 0; i < this.subKernelNodes.length; i++) {\n        this.functionMap[this.subKernelNodes[i].name] = this.subKernelNodes[i];\n      }\n    }\n\n    if (this.nativeFunctions) {\n      for (let i = 0; i < this.nativeFunctions.length; i++) {\n        const nativeFunction = this.nativeFunctions[i];\n        this.nativeFunctionNames.push(nativeFunction.name);\n      }\n    }\n  }\n\n  /**\n   * @desc Add the function node directly\n   *\n   * @param {FunctionNode} functionNode - functionNode to add\n   *\n   */\n  addFunctionNode(functionNode) {\n    if (!functionNode.name) throw new Error('functionNode.name needs set');\n    this.functionMap[functionNode.name] = functionNode;\n    if (functionNode.isRootKernel) {\n      this.rootNode = functionNode;\n    }\n  }\n\n  /**\n   * @desc Trace all the depending functions being called, from a single function\n   *\n   * This allow for 'unneeded' functions to be automatically optimized out.\n   * Note that the 0-index, is the starting function trace.\n   *\n   * @param {String} functionName - Function name to trace from, default to 'kernel'\n   * @param {String[]} [retList] - Returning list of function names that is traced. Including itself.\n   *\n   * @returns {String[]}  Returning list of function names that is traced. Including itself.\n   */\n  traceFunctionCalls(functionName, retList) {\n    functionName = functionName || 'kernel';\n    retList = retList || [];\n\n    if (this.nativeFunctionNames.indexOf(functionName) > -1) {\n      const nativeFunctionIndex = retList.indexOf(functionName);\n      if (nativeFunctionIndex === -1) {\n        retList.push(functionName);\n      } else {\n        /**\n         * https://github.com/gpujs/gpu.js/issues/207\n         * if dependent function is already in the list, because a function depends on it, and because it has\n         * already been traced, we know that we must move the dependent function to the end of the the retList.\n         * */\n        const dependantNativeFunctionName = retList.splice(nativeFunctionIndex, 1)[0];\n        retList.push(dependantNativeFunctionName);\n      }\n      return retList;\n    }\n\n    const functionNode = this.functionMap[functionName];\n    if (functionNode) {\n      // Check if function already exists\n      const functionIndex = retList.indexOf(functionName);\n      if (functionIndex === -1) {\n        retList.push(functionName);\n        functionNode.toString(); //ensure JS trace is done\n        for (let i = 0; i < functionNode.calledFunctions.length; ++i) {\n          this.traceFunctionCalls(functionNode.calledFunctions[i], retList);\n        }\n      } else {\n        /**\n         * https://github.com/gpujs/gpu.js/issues/207\n         * if dependent function is already in the list, because a function depends on it, and because it has\n         * already been traced, we know that we must move the dependent function to the end of the the retList.\n         * */\n        const dependantFunctionName = retList.splice(functionIndex, 1)[0];\n        retList.push(dependantFunctionName);\n      }\n    }\n\n    return retList;\n  }\n\n  /**\n   * @desc Return the string for a function\n   * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n   * @returns {String} The full string, of all the various functions. Trace optimized if functionName given\n   */\n  getPrototypeString(functionName) {\n    return this.getPrototypes(functionName).join('\\n');\n  }\n\n  /**\n   * @desc Return the string for a function\n   * @param {String} [functionName] - Function name to trace from. If null, it returns the WHOLE builder stack\n   * @returns {Array} The full string, of all the various functions. Trace optimized if functionName given\n   */\n  getPrototypes(functionName) {\n    if (this.rootNode) {\n      this.rootNode.toString();\n    }\n    if (functionName) {\n      return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\n    }\n    return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));\n  }\n\n  /**\n   * @desc Get string from function names\n   * @param {String[]} functionList - List of function to build string\n   * @returns {String} The string, of all the various functions. Trace optimized if functionName given\n   */\n  getStringFromFunctionNames(functionList) {\n    const ret = [];\n    for (let i = 0; i < functionList.length; ++i) {\n      const node = this.functionMap[functionList[i]];\n      if (node) {\n        ret.push(this.functionMap[functionList[i]].toString());\n      }\n    }\n    return ret.join('\\n');\n  }\n\n  /**\n   * @desc Return string of all functions converted\n   * @param {String[]} functionList - List of function names to build the string.\n   * @returns {Array} Prototypes of all functions converted\n   */\n  getPrototypesFromFunctionNames(functionList) {\n    const ret = [];\n    for (let i = 0; i < functionList.length; ++i) {\n      const functionName = functionList[i];\n      const functionIndex = this.nativeFunctionNames.indexOf(functionName);\n      if (functionIndex > -1) {\n        ret.push(this.nativeFunctions[functionIndex].source);\n        continue;\n      }\n      const node = this.functionMap[functionName];\n      if (node) {\n        ret.push(node.toString());\n      }\n    }\n    return ret;\n  }\n\n  toJSON() {\n    return this.traceFunctionCalls(this.rootNode.name).reverse().map(name => {\n      const nativeIndex = this.nativeFunctions.indexOf(name);\n      if (nativeIndex > -1) {\n        return {\n          name,\n          source: this.nativeFunctions[nativeIndex].source\n        };\n      } else if (this.functionMap[name]) {\n        return this.functionMap[name].toJSON();\n      } else {\n        throw new Error(`function ${ name } not found`);\n      }\n    });\n  }\n\n  fromJSON(jsonFunctionNodes, FunctionNode) {\n    this.functionMap = {};\n    for (let i = 0; i < jsonFunctionNodes.length; i++) {\n      const jsonFunctionNode = jsonFunctionNodes[i];\n      this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);\n    }\n    return this;\n  }\n\n  /**\n   * @desc Get string for a particular function name\n   * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n   * @returns {String} settings - The string, of all the various functions. Trace optimized if functionName given\n   */\n  getString(functionName) {\n    if (functionName) {\n      return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());\n    }\n    return this.getStringFromFunctionNames(Object.keys(this.functionMap));\n  }\n\n  lookupReturnType(functionName, ast, requestingNode) {\n    if (ast.type !== 'CallExpression') {\n      throw new Error(`expected ast type of \"CallExpression\", but is ${ ast.type }`);\n    }\n    if (this._isNativeFunction(functionName)) {\n      return this._lookupNativeFunctionReturnType(functionName);\n    } else if (this._isFunction(functionName)) {\n      const node = this._getFunction(functionName);\n      if (node.returnType) {\n        return node.returnType;\n      } else {\n        for (let i = 0; i < this.lookupChain.length; i++) {\n          // detect circlical logic\n          if (this.lookupChain[i].ast === ast) {\n            // detect if arguments have not resolved, preventing a return type\n            // if so, go ahead and resolve them, so we can resolve the return type\n            if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {\n              const args = ast.arguments;\n              for (let j = 0; j < args.length; j++) {\n                this.lookupChain.push({\n                  name: requestingNode.name,\n                  ast: args[i],\n                  requestingNode\n                });\n                node.argumentTypes[j] = requestingNode.getType(args[j]);\n                this.lookupChain.pop();\n              }\n              return node.returnType = node.getType(node.getJsAST());\n            }\n\n            throw new Error('circlical logic detected!');\n          }\n        }\n        // get ready for a ride!\n        this.lookupChain.push({\n          name: requestingNode.name,\n          ast,\n          requestingNode\n        });\n        const type = node.getType(node.getJsAST());\n        this.lookupChain.pop();\n        return node.returnType = type;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   *\n   * @param {String} functionName\n   * @return {FunctionNode}\n   * @private\n   */\n  _getFunction(functionName) {\n    if (!this._isFunction(functionName)) {\n      new Error(`Function ${functionName} not found`);\n    }\n    return this.functionMap[functionName];\n  }\n\n  _isFunction(functionName) {\n    return Boolean(this.functionMap[functionName]);\n  }\n\n  _getNativeFunction(functionName) {\n    for (let i = 0; i < this.nativeFunctions.length; i++) {\n      if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];\n    }\n    return null;\n  }\n\n  _isNativeFunction(functionName) {\n    return Boolean(this._getNativeFunction(functionName));\n  }\n\n  _lookupNativeFunctionReturnType(functionName) {\n    let nativeFunction = this._getNativeFunction(functionName);\n    if (nativeFunction) {\n      return nativeFunction.returnType;\n    }\n    throw new Error(`Native function ${ functionName } not found`);\n  }\n\n  lookupFunctionArgumentTypes(functionName) {\n    if (this._isNativeFunction(functionName)) {\n      return this._getNativeFunction(functionName).argumentTypes;\n    } else if (this._isFunction(functionName)) {\n      return this._getFunction(functionName).argumentTypes;\n    }\n    return null;\n  }\n\n  lookupFunctionArgumentName(functionName, argumentIndex) {\n    return this._getFunction(functionName).argumentNames[argumentIndex];\n  }\n\n  /**\n   *\n   * @param {string} functionName\n   * @param {string} argumentName\n   * @return {number}\n   */\n  lookupFunctionArgumentBitRatio(functionName, argumentName) {\n    if (!this._isFunction(functionName)) {\n      throw new Error('function not found');\n    }\n    if (this.rootNode.name === functionName) {\n      const i = this.rootNode.argumentNames.indexOf(argumentName);\n      if (i !== -1) {\n        return this.rootNode.argumentBitRatios[i];\n      }\n    }\n    const node = this._getFunction(functionName);\n    const i = node.argumentNames.indexOf(argumentName);\n    if (i === -1) {\n      throw new Error('argument not found');\n    }\n    const bitRatio = node.argumentBitRatios[i];\n    if (typeof bitRatio !== 'number') {\n      throw new Error('argument bit ratio not found');\n    }\n    return bitRatio;\n  }\n\n  needsArgumentType(functionName, i) {\n    if (!this._isFunction(functionName)) return false;\n    const fnNode = this._getFunction(functionName);\n    return !fnNode.argumentTypes[i];\n  }\n\n  assignArgumentType(functionName, i, argumentType, requestingNode) {\n    if (!this._isFunction(functionName)) return;\n    const fnNode = this._getFunction(functionName);\n    if (!fnNode.argumentTypes[i]) {\n      fnNode.argumentTypes[i] = argumentType;\n    }\n  }\n\n  /**\n   * @param {string} functionName\n   * @param {string} argumentName\n   * @param {string} calleeFunctionName\n   * @param {number} argumentIndex\n   * @return {number|null}\n   */\n  assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {\n    const node = this._getFunction(functionName);\n    if (this._isNativeFunction(calleeFunctionName)) return null;\n    const calleeNode = this._getFunction(calleeFunctionName);\n    const i = node.argumentNames.indexOf(argumentName);\n    if (i === -1) {\n      throw new Error(`Argument ${argumentName} not found in arguments from function ${functionName}`);\n    }\n    const bitRatio = node.argumentBitRatios[i];\n    if (typeof bitRatio !== 'number') {\n      throw new Error(`Bit ratio for argument ${argumentName} not found in function ${functionName}`);\n    }\n    if (!calleeNode.argumentBitRatios) {\n      calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);\n    }\n    const calleeBitRatio = calleeNode.argumentBitRatios[i];\n    if (typeof calleeBitRatio === 'number') {\n      if (calleeBitRatio !== bitRatio) {\n        throw new Error(`Incompatible bit ratio found at function ${functionName} at argument ${argumentName}`);\n      }\n      return calleeBitRatio;\n    }\n    calleeNode.argumentBitRatios[i] = bitRatio;\n    return bitRatio;\n  }\n\n  trackFunctionCall(functionName, calleeFunctionName, args) {\n    if (!this.functionNodeDependencies[functionName]) {\n      this.functionNodeDependencies[functionName] = new Set();\n      this.functionCalls[functionName] = [];\n    }\n    this.functionNodeDependencies[functionName].add(calleeFunctionName);\n    this.functionCalls[functionName].push(args);\n  }\n\n  getKernelResultType() {\n    return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);\n  }\n\n  getSubKernelResultType(index) {\n    const subKernelNode = this.subKernelNodes[index];\n    let called = false;\n    for (let functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {\n      const functionCall = this.rootNode.functionCalls[functionCallIndex];\n      if (functionCall.ast.callee.name === subKernelNode.name) {\n        called = true;\n      }\n    }\n    if (!called) {\n      throw new Error(`SubKernel ${ subKernelNode.name } never called by kernel`);\n    }\n    return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());\n  }\n\n  getReturnTypes() {\n    const result = {\n      [this.rootNode.name]: this.rootNode.getType(this.rootNode.ast),\n    };\n    const list = this.traceFunctionCalls(this.rootNode.name);\n    for (let i = 0; i < list.length; i++) {\n      const functionName = list[i];\n      const functionNode = this.functionMap[functionName];\n      result[functionName] = functionNode.getType(functionNode.ast);\n    }\n    return result;\n  }\n}\n\nmodule.exports = {\n  FunctionBuilder\n};", "const { utils } = require('../utils');\n\nfunction last(array) {\n  return array.length > 0 ? array[array.length - 1] : null;\n}\n\nconst states = {\n  trackIdentifiers: 'trackIdentifiers',\n  memberExpression: 'memberExpression',\n  inForLoopInit: 'inForLoopInit'\n};\n\nclass FunctionTracer {\n  constructor(ast) {\n    this.runningContexts = [];\n    this.functionContexts = [];\n    this.contexts = [];\n    this.functionCalls = [];\n    /**\n     *\n     * @type {IDeclaration[]}\n     */\n    this.declarations = [];\n    this.identifiers = [];\n    this.functions = [];\n    this.returnStatements = [];\n    this.trackedIdentifiers = null;\n    this.states = [];\n    this.newFunctionContext();\n    this.scan(ast);\n  }\n\n  isState(state) {\n    return this.states[this.states.length - 1] === state;\n  }\n\n  hasState(state) {\n    return this.states.indexOf(state) > -1;\n  }\n\n  pushState(state) {\n    this.states.push(state);\n  }\n\n  popState(state) {\n    if (this.isState(state)) {\n      this.states.pop();\n    } else {\n      throw new Error(`Cannot pop the non-active state \"${state}\"`);\n    }\n  }\n\n  get currentFunctionContext() {\n    return last(this.functionContexts);\n  }\n\n  get currentContext() {\n    return last(this.runningContexts);\n  }\n\n  newFunctionContext() {\n    const newContext = { '@contextType': 'function' };\n    this.contexts.push(newContext);\n    this.functionContexts.push(newContext);\n  }\n\n  newContext(run) {\n    const newContext = Object.assign({ '@contextType': 'const/let' }, this.currentContext);\n    this.contexts.push(newContext);\n    this.runningContexts.push(newContext);\n    run();\n    const { currentFunctionContext } = this;\n    for (const p in currentFunctionContext) {\n      if (!currentFunctionContext.hasOwnProperty(p) || newContext.hasOwnProperty(p)) continue;\n      newContext[p] = currentFunctionContext[p];\n    }\n    this.runningContexts.pop();\n    return newContext;\n  }\n\n  useFunctionContext(run) {\n    const functionContext = last(this.functionContexts);\n    this.runningContexts.push(functionContext);\n    run();\n    this.runningContexts.pop();\n  }\n\n  getIdentifiers(run) {\n    const trackedIdentifiers = this.trackedIdentifiers = [];\n    this.pushState(states.trackIdentifiers);\n    run();\n    this.trackedIdentifiers = null;\n    this.popState(states.trackIdentifiers);\n    return trackedIdentifiers;\n  }\n\n  /**\n   * @param {string} name\n   * @returns {IDeclaration}\n   */\n  getDeclaration(name) {\n    const { currentContext, currentFunctionContext, runningContexts } = this;\n    const declaration = currentContext[name] || currentFunctionContext[name] || null;\n\n    if (\n      !declaration &&\n      currentContext === currentFunctionContext &&\n      runningContexts.length > 0\n    ) {\n      const previousRunningContext = runningContexts[runningContexts.length - 2];\n      if (previousRunningContext[name]) {\n        return previousRunningContext[name];\n      }\n    }\n\n    return declaration;\n  }\n\n  /**\n   * Recursively scans AST for declarations and functions, and add them to their respective context\n   * @param ast\n   */\n  scan(ast) {\n    if (!ast) return;\n    if (Array.isArray(ast)) {\n      for (let i = 0; i < ast.length; i++) {\n        this.scan(ast[i]);\n      }\n      return;\n    }\n    switch (ast.type) {\n      case 'Program':\n        this.useFunctionContext(() => {\n          this.scan(ast.body);\n        });\n        break;\n      case 'BlockStatement':\n        this.newContext(() => {\n          this.scan(ast.body);\n        });\n        break;\n      case 'AssignmentExpression':\n      case 'LogicalExpression':\n        this.scan(ast.left);\n        this.scan(ast.right);\n        break;\n      case 'BinaryExpression':\n        this.scan(ast.left);\n        this.scan(ast.right);\n        break;\n      case 'UpdateExpression':\n        if (ast.operator === '++') {\n          const declaration = this.getDeclaration(ast.argument.name);\n          if (declaration) {\n            declaration.suggestedType = 'Integer';\n          }\n        }\n        this.scan(ast.argument);\n        break;\n      case 'UnaryExpression':\n        this.scan(ast.argument);\n        break;\n      case 'VariableDeclaration':\n        if (ast.kind === 'var') {\n          this.useFunctionContext(() => {\n            ast.declarations = utils.normalizeDeclarations(ast);\n            this.scan(ast.declarations);\n          });\n        } else {\n          ast.declarations = utils.normalizeDeclarations(ast);\n          this.scan(ast.declarations);\n        }\n        break;\n      case 'VariableDeclarator': {\n        const { currentContext } = this;\n        const inForLoopInit = this.hasState(states.inForLoopInit);\n        const declaration = {\n          ast: ast,\n          context: currentContext,\n          name: ast.id.name,\n          origin: 'declaration',\n          inForLoopInit,\n          inForLoopTest: null,\n          assignable: currentContext === this.currentFunctionContext || (!inForLoopInit && !currentContext.hasOwnProperty(ast.id.name)),\n          suggestedType: null,\n          valueType: null,\n          dependencies: null,\n          isSafe: null,\n        };\n        if (!currentContext[ast.id.name]) {\n          currentContext[ast.id.name] = declaration;\n        }\n        this.declarations.push(declaration);\n        this.scan(ast.id);\n        this.scan(ast.init);\n        break;\n      }\n      case 'FunctionExpression':\n      case 'FunctionDeclaration':\n        if (this.runningContexts.length === 0) {\n          this.scan(ast.body);\n        } else {\n          this.functions.push(ast);\n        }\n        break;\n      case 'IfStatement':\n        this.scan(ast.test);\n        this.scan(ast.consequent);\n        if (ast.alternate) this.scan(ast.alternate);\n        break;\n      case 'ForStatement': {\n        let testIdentifiers;\n        const context = this.newContext(() => {\n          this.pushState(states.inForLoopInit);\n          this.scan(ast.init);\n          this.popState(states.inForLoopInit);\n\n          testIdentifiers = this.getIdentifiers(() => {\n            this.scan(ast.test);\n          });\n\n          this.scan(ast.update);\n          this.newContext(() => {\n            this.scan(ast.body);\n          });\n        });\n\n        if (testIdentifiers) {\n          for (const p in context) {\n            if (p === '@contextType') continue;\n            if (testIdentifiers.indexOf(p) > -1) {\n              context[p].inForLoopTest = true;\n            }\n          }\n        }\n        break;\n      }\n      case 'DoWhileStatement':\n      case 'WhileStatement':\n        this.newContext(() => {\n          this.scan(ast.body);\n          this.scan(ast.test);\n        });\n        break;\n      case 'Identifier': {\n        if (this.isState(states.trackIdentifiers)) {\n          this.trackedIdentifiers.push(ast.name);\n        }\n        this.identifiers.push({\n          context: this.currentContext,\n          declaration: this.getDeclaration(ast.name),\n          ast,\n        });\n        break;\n      }\n      case 'ReturnStatement':\n        this.returnStatements.push(ast);\n        this.scan(ast.argument);\n        break;\n      case 'MemberExpression':\n        this.pushState(states.memberExpression);\n        this.scan(ast.object);\n        this.scan(ast.property);\n        this.popState(states.memberExpression);\n        break;\n      case 'ExpressionStatement':\n        this.scan(ast.expression);\n        break;\n      case 'SequenceExpression':\n        this.scan(ast.expressions);\n        break;\n      case 'CallExpression':\n        this.functionCalls.push({\n          context: this.currentContext,\n          ast,\n        });\n        this.scan(ast.arguments);\n        break;\n      case 'ArrayExpression':\n        this.scan(ast.elements);\n        break;\n      case 'ConditionalExpression':\n        this.scan(ast.test);\n        this.scan(ast.alternate);\n        this.scan(ast.consequent);\n        break;\n      case 'SwitchStatement':\n        this.scan(ast.discriminant);\n        this.scan(ast.cases);\n        break;\n      case 'SwitchCase':\n        this.scan(ast.test);\n        this.scan(ast.consequent);\n        break;\n\n      case 'ThisExpression':\n      case 'Literal':\n      case 'DebuggerStatement':\n      case 'EmptyStatement':\n      case 'BreakStatement':\n      case 'ContinueStatement':\n        break;\n      default:\n        throw new Error(`unhandled type \"${ast.type}\"`);\n    }\n  }\n}\n\nmodule.exports = {\n  FunctionTracer,\n};", "const acorn = require('acorn');\nconst { utils } = require('../utils');\nconst { FunctionTracer } = require('./function-tracer');\n\n/**\n *\n * @desc Represents a single function, inside JS, webGL, or openGL.\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n */\nclass FunctionNode {\n  /**\n   *\n   * @param {string|object} source\n   * @param {IFunctionSettings} [settings]\n   */\n  constructor(source, settings) {\n    if (!source && !settings.ast) {\n      throw new Error('source parameter is missing');\n    }\n    settings = settings || {};\n    this.source = source;\n    this.ast = null;\n    this.name = typeof source === 'string' ? settings.isRootKernel ?\n      'kernel' :\n      (settings.name || utils.getFunctionNameFromString(source)) : null;\n    this.calledFunctions = [];\n    this.constants = {};\n    this.constantTypes = {};\n    this.constantBitRatios = {};\n    this.isRootKernel = false;\n    this.isSubKernel = false;\n    this.debug = null;\n    this.functions = null;\n    this.identifiers = null;\n    this.contexts = null;\n    this.functionCalls = null;\n    this.states = [];\n    this.needsArgumentType = null;\n    this.assignArgumentType = null;\n    this.lookupReturnType = null;\n    this.lookupFunctionArgumentTypes = null;\n    this.lookupFunctionArgumentBitRatio = null;\n    this.triggerImplyArgumentType = null;\n    this.triggerImplyArgumentBitRatio = null;\n    this.onNestedFunction = null;\n    this.onFunctionCall = null;\n    this.optimizeFloatMemory = null;\n    this.precision = null;\n    this.loopMaxIterations = null;\n    this.argumentNames = (typeof this.source === 'string' ? utils.getArgumentNamesFromString(this.source) : null);\n    this.argumentTypes = [];\n    this.argumentSizes = [];\n    this.argumentBitRatios = null;\n    this.returnType = null;\n    this.output = [];\n    this.plugins = null;\n    this.leadingReturnStatement = null;\n    this.followingReturnStatement = null;\n    this.dynamicOutput = null;\n    this.dynamicArguments = null;\n    this.strictTypingChecking = false;\n    this.fixIntegerDivisionAccuracy = null;\n\n    if (settings) {\n      for (const p in settings) {\n        if (!settings.hasOwnProperty(p)) continue;\n        if (!this.hasOwnProperty(p)) continue;\n        this[p] = settings[p];\n      }\n    }\n\n    this.literalTypes = {};\n\n    this.validate();\n    this._string = null;\n    this._internalVariableNames = {};\n  }\n\n  validate() {\n    if (typeof this.source !== 'string' && !this.ast) {\n      throw new Error('this.source not a string');\n    }\n\n    if (!this.ast && !utils.isFunctionString(this.source)) {\n      throw new Error('this.source not a function string');\n    }\n\n    if (!this.name) {\n      throw new Error('this.name could not be set');\n    }\n\n    if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {\n      throw new Error(`argumentTypes count of ${ this.argumentTypes.length } exceeds ${ this.argumentNames.length }`);\n    }\n\n    if (this.output.length < 1) {\n      throw new Error('this.output is not big enough');\n    }\n  }\n\n  /**\n   * @param {String} name\n   * @returns {boolean}\n   */\n  isIdentifierConstant(name) {\n    if (!this.constants) return false;\n    return this.constants.hasOwnProperty(name);\n  }\n\n  isInput(argumentName) {\n    return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';\n  }\n\n  pushState(state) {\n    this.states.push(state);\n  }\n\n  popState(state) {\n    if (this.state !== state) {\n      throw new Error(`Cannot popState ${ state } when in ${ this.state }`);\n    }\n    this.states.pop();\n  }\n\n  isState(state) {\n    return this.state === state;\n  }\n\n  get state() {\n    return this.states[this.states.length - 1];\n  }\n\n  /**\n   * @function\n   * @name astMemberExpressionUnroll\n   * @desc Parses the abstract syntax tree for binary expression.\n   *\n   * <p>Utility function for astCallExpression.</p>\n   *\n   * @param {Object} ast - the AST object to parse\n   *\n   * @returns {String} the function namespace call, unrolled\n   */\n  astMemberExpressionUnroll(ast) {\n    if (ast.type === 'Identifier') {\n      return ast.name;\n    } else if (ast.type === 'ThisExpression') {\n      return 'this';\n    }\n\n    if (ast.type === 'MemberExpression') {\n      if (ast.object && ast.property) {\n        //babel sniffing\n        if (ast.object.hasOwnProperty('name') && ast.object.name !== 'Math') {\n          return this.astMemberExpressionUnroll(ast.property);\n        }\n\n        return (\n          this.astMemberExpressionUnroll(ast.object) +\n          '.' +\n          this.astMemberExpressionUnroll(ast.property)\n        );\n      }\n    }\n\n    //babel sniffing\n    if (ast.hasOwnProperty('expressions')) {\n      const firstExpression = ast.expressions[0];\n      if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {\n        return this.astMemberExpressionUnroll(ast.expressions[1]);\n      }\n    }\n\n    // Failure, unknown expression\n    throw this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);\n  }\n\n  /**\n   * @desc Parses the class function JS, and returns its Abstract Syntax Tree object.\n   * This is used internally to convert to shader code\n   *\n   * @param {Object} [inParser] - Parser to use, assumes in scope 'parser' if null or undefined\n   *\n   * @returns {Object} The function AST Object, note that result is cached under this.ast;\n   */\n  getJsAST(inParser) {\n    if (this.ast) {\n      return this.ast;\n    }\n    if (typeof this.source === 'object') {\n      this.traceFunctionAST(this.source);\n      return this.ast = this.source;\n    }\n\n    inParser = inParser || acorn;\n    if (inParser === null) {\n      throw new Error('Missing JS to AST parser');\n    }\n\n    const ast = Object.freeze(inParser.parse(`const parser_${ this.name } = ${ this.source };`, {\n      locations: true\n    }));\n    // take out the function object, outside the var declarations\n    const functionAST = ast.body[0].declarations[0].init;\n    this.traceFunctionAST(functionAST);\n\n    if (!ast) {\n      throw new Error('Failed to parse JS code');\n    }\n\n    return this.ast = functionAST;\n  }\n\n  traceFunctionAST(ast) {\n    const { contexts, declarations, functions, identifiers, functionCalls } = new FunctionTracer(ast);\n    this.contexts = contexts;\n    this.identifiers = identifiers;\n    this.functionCalls = functionCalls;\n    this.functions = functions;\n    for (let i = 0; i < declarations.length; i++) {\n      const declaration = declarations[i];\n      const { ast, inForLoopInit, inForLoopTest } = declaration;\n      const { init } = ast;\n      const dependencies = this.getDependencies(init);\n      let valueType = null;\n\n      if (inForLoopInit && inForLoopTest) {\n        valueType = 'Integer';\n      } else {\n        if (init) {\n          const realType = this.getType(init);\n          switch (realType) {\n            case 'Integer':\n            case 'Float':\n            case 'Number':\n              if (init.type === 'MemberExpression') {\n                valueType = realType;\n              } else {\n                valueType = 'Number';\n              }\n              break;\n            case 'LiteralInteger':\n              valueType = 'Number';\n              break;\n            default:\n              valueType = realType;\n          }\n        }\n      }\n      declaration.valueType = valueType;\n      declaration.dependencies = dependencies;\n      declaration.isSafe = this.isSafeDependencies(dependencies);\n    }\n\n    for (let i = 0; i < functions.length; i++) {\n      this.onNestedFunction(functions[i], this.source);\n    }\n  }\n\n  getDeclaration(ast) {\n    for (let i = 0; i < this.identifiers.length; i++) {\n      const identifier = this.identifiers[i];\n      if (ast === identifier.ast) {\n        return identifier.declaration;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @desc Return the type of parameter sent to subKernel/Kernel.\n   * @param {Object} ast - Identifier\n   * @returns {String} Type of the parameter\n   */\n  getVariableType(ast) {\n    if (ast.type !== 'Identifier') {\n      throw new Error(`ast of ${ast.type} not \"Identifier\"`);\n    }\n    let type = null;\n    const argumentIndex = this.argumentNames.indexOf(ast.name);\n    if (argumentIndex === -1) {\n      const declaration = this.getDeclaration(ast);\n      if (declaration) {\n        return declaration.valueType;\n      }\n    } else {\n      const argumentType = this.argumentTypes[argumentIndex];\n      if (argumentType) {\n        type = argumentType;\n      }\n    }\n    if (!type && this.strictTypingChecking) {\n      throw new Error(`Declaration of ${name} not found`);\n    }\n    return type;\n  }\n\n  /**\n   * Generally used to lookup the value type returned from a member expressions\n   * @param {String} type\n   * @return {String}\n   */\n  getLookupType(type) {\n    if (!typeLookupMap.hasOwnProperty(type)) {\n      throw new Error(`unknown typeLookupMap ${ type }`);\n    }\n    return typeLookupMap[type];\n  }\n\n  getConstantType(constantName) {\n    if (this.constantTypes[constantName]) {\n      const type = this.constantTypes[constantName];\n      if (type === 'Float') {\n        return 'Number';\n      } else {\n        return type;\n      }\n    }\n    throw new Error(`Type for constant \"${ constantName }\" not declared`);\n  }\n\n  toString() {\n    if (this._string) return this._string;\n    return this._string = this.astGeneric(this.getJsAST(), []).join('').trim();\n  }\n\n  toJSON() {\n    const settings = {\n      source: this.source,\n      name: this.name,\n      constants: this.constants,\n      constantTypes: this.constantTypes,\n      isRootKernel: this.isRootKernel,\n      isSubKernel: this.isSubKernel,\n      debug: this.debug,\n      output: this.output,\n      loopMaxIterations: this.loopMaxIterations,\n      argumentNames: this.argumentNames,\n      argumentTypes: this.argumentTypes,\n      argumentSizes: this.argumentSizes,\n      returnType: this.returnType,\n      leadingReturnStatement: this.leadingReturnStatement,\n      followingReturnStatement: this.followingReturnStatement,\n    };\n\n    return {\n      ast: this.ast,\n      settings\n    };\n  }\n\n  /**\n   * Recursively looks up type for ast expression until it's found\n   * @param ast\n   * @returns {String|null}\n   */\n  getType(ast) {\n    if (Array.isArray(ast)) {\n      return this.getType(ast[ast.length - 1]);\n    }\n    switch (ast.type) {\n      case 'BlockStatement':\n        return this.getType(ast.body);\n      case 'ArrayExpression':\n        const childType = this.getType(ast.elements[0]);\n        switch (childType) {\n          case 'Array(2)':\n          case 'Array(3)':\n          case 'Array(4)':\n            return `Matrix(${ast.elements.length})`;\n        }\n        return `Array(${ ast.elements.length })`;\n      case 'Literal':\n        const literalKey = this.astKey(ast);\n        if (this.literalTypes[literalKey]) {\n          return this.literalTypes[literalKey];\n        }\n        if (Number.isInteger(ast.value)) {\n          return 'LiteralInteger';\n        } else if (ast.value === true || ast.value === false) {\n          return 'Boolean';\n        } else {\n          return 'Number';\n        }\n        case 'AssignmentExpression':\n          return this.getType(ast.left);\n        case 'CallExpression':\n          if (this.isAstMathFunction(ast)) {\n            return 'Number';\n          }\n          if (!ast.callee || !ast.callee.name) {\n            if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {\n              const functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;\n              this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n              return this.lookupReturnType(functionName, ast, this);\n            }\n            if (this.getVariableSignature(ast.callee, true) === 'this.color') {\n              return null;\n            }\n            if (ast.callee.type === 'MemberExpression' && ast.callee.object && ast.callee.property && ast.callee.property.name && ast.arguments) {\n              const functionName = ast.callee.property.name;\n              this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n              return this.lookupReturnType(functionName, ast, this);\n            }\n            throw this.astErrorOutput('Unknown call expression', ast);\n          }\n          if (ast.callee && ast.callee.name) {\n            const functionName = ast.callee.name;\n            this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n            return this.lookupReturnType(functionName, ast, this);\n          }\n          throw this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\n        case 'LogicalExpression':\n          return 'Boolean';\n        case 'BinaryExpression':\n          // modulos is Number\n          switch (ast.operator) {\n            case '%':\n            case '/':\n              if (this.fixIntegerDivisionAccuracy) {\n                return 'Number';\n              } else {\n                break;\n              }\n              case '>':\n              case '<':\n                return 'Boolean';\n              case '&':\n              case '|':\n              case '^':\n              case '<<':\n              case '>>':\n              case '>>>':\n                return 'Integer';\n          }\n          const type = this.getType(ast.left);\n          if (this.isState('skip-literal-correction')) return type;\n          if (type === 'LiteralInteger') {\n            const rightType = this.getType(ast.right);\n            if (rightType === 'LiteralInteger') {\n              if (ast.left.value % 1 === 0) {\n                return 'Integer';\n              } else {\n                return 'Float';\n              }\n            }\n            return rightType;\n          }\n          return typeLookupMap[type] || type;\n        case 'UpdateExpression':\n          return this.getType(ast.argument);\n        case 'UnaryExpression':\n          if (ast.operator === '~') {\n            return 'Integer';\n          }\n          return this.getType(ast.argument);\n        case 'VariableDeclaration': {\n          const declarations = ast.declarations;\n          let lastType;\n          for (let i = 0; i < declarations.length; i++) {\n            const declaration = declarations[i];\n            lastType = this.getType(declaration);\n          }\n          if (!lastType) {\n            throw this.astErrorOutput(`Unable to find type for declaration`, ast);\n          }\n          return lastType;\n        }\n        case 'VariableDeclarator':\n          const declaration = this.getDeclaration(ast.id);\n          if (!declaration) {\n            throw this.astErrorOutput(`Unable to find declarator`, ast);\n          }\n\n          if (!declaration.valueType) {\n            throw this.astErrorOutput(`Unable to find declarator valueType`, ast);\n          }\n\n          return declaration.valueType;\n        case 'Identifier':\n          if (ast.name === 'Infinity') {\n            return 'Number';\n          }\n          if (this.isAstVariable(ast)) {\n            const signature = this.getVariableSignature(ast);\n            if (signature === 'value') {\n              return this.getCheckVariableType(ast);\n            }\n          }\n          const origin = this.findIdentifierOrigin(ast);\n          if (origin && origin.init) {\n            return this.getType(origin.init);\n          }\n          return null;\n        case 'ReturnStatement':\n          return this.getType(ast.argument);\n        case 'MemberExpression':\n          if (this.isAstMathFunction(ast)) {\n            switch (ast.property.name) {\n              case 'ceil':\n                return 'Integer';\n              case 'floor':\n                return 'Integer';\n              case 'round':\n                return 'Integer';\n            }\n            return 'Number';\n          }\n          if (this.isAstVariable(ast)) {\n            const variableSignature = this.getVariableSignature(ast);\n            switch (variableSignature) {\n              case 'value[]':\n                return this.getLookupType(this.getCheckVariableType(ast.object));\n              case 'value[][]':\n                return this.getLookupType(this.getCheckVariableType(ast.object.object));\n              case 'value[][][]':\n                return this.getLookupType(this.getCheckVariableType(ast.object.object.object));\n              case 'value[][][][]':\n                return this.getLookupType(this.getCheckVariableType(ast.object.object.object.object));\n              case 'value.thread.value':\n              case 'this.thread.value':\n                return 'Integer';\n              case 'this.output.value':\n                return this.dynamicOutput ? 'Integer' : 'LiteralInteger';\n              case 'this.constants.value':\n                return this.getConstantType(ast.property.name);\n              case 'this.constants.value[]':\n                return this.getLookupType(this.getConstantType(ast.object.property.name));\n              case 'this.constants.value[][]':\n                return this.getLookupType(this.getConstantType(ast.object.object.property.name));\n              case 'this.constants.value[][][]':\n                return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));\n              case 'this.constants.value[][][][]':\n                return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));\n              case 'fn()[]':\n              case 'fn()[][]':\n              case 'fn()[][][]':\n                return this.getLookupType(this.getType(ast.object));\n              case 'value.value':\n                if (this.isAstMathVariable(ast)) {\n                  return 'Number';\n                }\n                switch (ast.property.name) {\n                  case 'r':\n                  case 'g':\n                  case 'b':\n                  case 'a':\n                    return this.getLookupType(this.getCheckVariableType(ast.object));\n                }\n                case '[][]':\n                  return 'Number';\n            }\n            throw this.astErrorOutput('Unhandled getType MemberExpression', ast);\n          }\n          throw this.astErrorOutput('Unhandled getType MemberExpression', ast);\n        case 'ConditionalExpression':\n          return this.getType(ast.consequent);\n        case 'FunctionDeclaration':\n        case 'FunctionExpression':\n          const lastReturn = this.findLastReturn(ast.body);\n          if (lastReturn) {\n            return this.getType(lastReturn);\n          }\n          return null;\n        case 'IfStatement':\n          return this.getType(ast.consequent);\n        case 'SequenceExpression':\n          return this.getType(ast.expressions[ast.expressions.length - 1]);\n        default:\n          throw this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\n    }\n  }\n\n  getCheckVariableType(ast) {\n    const type = this.getVariableType(ast);\n    if (!type) {\n      throw this.astErrorOutput(`${ast.type} is not defined`, ast);\n    }\n    return type;\n  }\n\n  inferArgumentTypesIfNeeded(functionName, args) {\n    // ensure arguments are filled in, so when we lookup return type, we already can infer it\n    for (let i = 0; i < args.length; i++) {\n      if (!this.needsArgumentType(functionName, i)) continue;\n      const type = this.getType(args[i]);\n      if (!type) {\n        throw this.astErrorOutput(`Unable to infer argument ${i}`, args[i]);\n      }\n      this.assignArgumentType(functionName, i, type);\n    }\n  }\n\n  isAstMathVariable(ast) {\n    const mathProperties = [\n      'E',\n      'PI',\n      'SQRT2',\n      'SQRT1_2',\n      'LN2',\n      'LN10',\n      'LOG2E',\n      'LOG10E',\n    ];\n    return ast.type === 'MemberExpression' &&\n      ast.object && ast.object.type === 'Identifier' &&\n      ast.object.name === 'Math' &&\n      ast.property &&\n      ast.property.type === 'Identifier' &&\n      mathProperties.indexOf(ast.property.name) > -1;\n  }\n\n  isAstMathFunction(ast) {\n    const mathFunctions = [\n      'abs',\n      'acos',\n      'acosh',\n      'asin',\n      'asinh',\n      'atan',\n      'atan2',\n      'atanh',\n      'cbrt',\n      'ceil',\n      'clz32',\n      'cos',\n      'cosh',\n      'expm1',\n      'exp',\n      'floor',\n      'fround',\n      'imul',\n      'log',\n      'log2',\n      'log10',\n      'log1p',\n      'max',\n      'min',\n      'pow',\n      'random',\n      'round',\n      'sign',\n      'sin',\n      'sinh',\n      'sqrt',\n      'tan',\n      'tanh',\n      'trunc',\n    ];\n    return ast.type === 'CallExpression' &&\n      ast.callee &&\n      ast.callee.type === 'MemberExpression' &&\n      ast.callee.object &&\n      ast.callee.object.type === 'Identifier' &&\n      ast.callee.object.name === 'Math' &&\n      ast.callee.property &&\n      ast.callee.property.type === 'Identifier' &&\n      mathFunctions.indexOf(ast.callee.property.name) > -1;\n  }\n\n  isAstVariable(ast) {\n    return ast.type === 'Identifier' || ast.type === 'MemberExpression';\n  }\n\n  isSafe(ast) {\n    return this.isSafeDependencies(this.getDependencies(ast));\n  }\n\n  isSafeDependencies(dependencies) {\n    return dependencies && dependencies.every ? dependencies.every(dependency => dependency.isSafe) : true;\n  }\n\n  /**\n   *\n   * @param ast\n   * @param dependencies\n   * @param isNotSafe\n   * @return {Array}\n   */\n  getDependencies(ast, dependencies, isNotSafe) {\n    if (!dependencies) {\n      dependencies = [];\n    }\n    if (!ast) return null;\n    if (Array.isArray(ast)) {\n      for (let i = 0; i < ast.length; i++) {\n        this.getDependencies(ast[i], dependencies, isNotSafe);\n      }\n      return dependencies;\n    }\n    switch (ast.type) {\n      case 'AssignmentExpression':\n        this.getDependencies(ast.left, dependencies, isNotSafe);\n        this.getDependencies(ast.right, dependencies, isNotSafe);\n        return dependencies;\n      case 'ConditionalExpression':\n        this.getDependencies(ast.test, dependencies, isNotSafe);\n        this.getDependencies(ast.alternate, dependencies, isNotSafe);\n        this.getDependencies(ast.consequent, dependencies, isNotSafe);\n        return dependencies;\n      case 'Literal':\n        dependencies.push({\n          origin: 'literal',\n          value: ast.value,\n          isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)\n        });\n        break;\n      case 'VariableDeclarator':\n        return this.getDependencies(ast.init, dependencies, isNotSafe);\n      case 'Identifier':\n        const declaration = this.getDeclaration(ast);\n        if (declaration) {\n          dependencies.push({\n            name: ast.name,\n            origin: 'declaration',\n            isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies),\n          });\n        } else if (this.argumentNames.indexOf(ast.name) > -1) {\n          dependencies.push({\n            name: ast.name,\n            origin: 'argument',\n            isSafe: false,\n          });\n        } else if (this.strictTypingChecking) {\n          throw new Error(`Cannot find identifier origin \"${ast.name}\"`);\n        }\n        break;\n      case 'FunctionDeclaration':\n        return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);\n      case 'ReturnStatement':\n        return this.getDependencies(ast.argument, dependencies);\n      case 'BinaryExpression':\n      case 'LogicalExpression':\n        isNotSafe = (ast.operator === '/' || ast.operator === '*');\n        this.getDependencies(ast.left, dependencies, isNotSafe);\n        this.getDependencies(ast.right, dependencies, isNotSafe);\n        return dependencies;\n      case 'UnaryExpression':\n      case 'UpdateExpression':\n        return this.getDependencies(ast.argument, dependencies, isNotSafe);\n      case 'VariableDeclaration':\n        return this.getDependencies(ast.declarations, dependencies, isNotSafe);\n      case 'ArrayExpression':\n        dependencies.push({\n          origin: 'declaration',\n          isSafe: true,\n        });\n        return dependencies;\n      case 'CallExpression':\n        dependencies.push({\n          origin: 'function',\n          isSafe: true,\n        });\n        return dependencies;\n      case 'MemberExpression':\n        const details = this.getMemberExpressionDetails(ast);\n        switch (details.signature) {\n          case 'value[]':\n            this.getDependencies(ast.object, dependencies, isNotSafe);\n            break;\n          case 'value[][]':\n            this.getDependencies(ast.object.object, dependencies, isNotSafe);\n            break;\n          case 'value[][][]':\n            this.getDependencies(ast.object.object.object, dependencies, isNotSafe);\n            break;\n          case 'this.output.value':\n            if (this.dynamicOutput) {\n              dependencies.push({\n                name: details.name,\n                origin: 'output',\n                isSafe: false,\n              });\n            }\n            break;\n        }\n        if (details) {\n          if (details.property) {\n            this.getDependencies(details.property, dependencies, isNotSafe);\n          }\n          if (details.xProperty) {\n            this.getDependencies(details.xProperty, dependencies, isNotSafe);\n          }\n          if (details.yProperty) {\n            this.getDependencies(details.yProperty, dependencies, isNotSafe);\n          }\n          if (details.zProperty) {\n            this.getDependencies(details.zProperty, dependencies, isNotSafe);\n          }\n          return dependencies;\n        }\n        case 'SequenceExpression':\n          return this.getDependencies(ast.expressions, dependencies, isNotSafe);\n        default:\n          throw this.astErrorOutput(`Unhandled type ${ ast.type } in getDependencies`, ast);\n    }\n    return dependencies;\n  }\n\n  getVariableSignature(ast, returnRawValue) {\n    if (!this.isAstVariable(ast)) {\n      throw new Error(`ast of type \"${ ast.type }\" is not a variable signature`);\n    }\n    if (ast.type === 'Identifier') {\n      return 'value';\n    }\n    const signature = [];\n    while (true) {\n      if (!ast) break;\n      if (ast.computed) {\n        signature.push('[]');\n      } else if (ast.type === 'ThisExpression') {\n        signature.unshift('this');\n      } else if (ast.property && ast.property.name) {\n        if (\n          ast.property.name === 'x' ||\n          ast.property.name === 'y' ||\n          ast.property.name === 'z'\n        ) {\n          signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');\n        } else if (\n          ast.property.name === 'constants' ||\n          ast.property.name === 'thread' ||\n          ast.property.name === 'output'\n        ) {\n          signature.unshift('.' + ast.property.name);\n        } else {\n          signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');\n        }\n      } else if (ast.name) {\n        signature.unshift(returnRawValue ? ast.name : 'value');\n      } else if (ast.callee && ast.callee.name) {\n        signature.unshift(returnRawValue ? ast.callee.name + '()' : 'fn()');\n      } else if (ast.elements) {\n        signature.unshift('[]');\n      } else {\n        signature.unshift('unknown');\n      }\n      ast = ast.object;\n    }\n\n    const signatureString = signature.join('');\n    if (returnRawValue) {\n      return signatureString;\n    }\n\n    const allowedExpressions = [\n      'value',\n      'value[]',\n      'value[][]',\n      'value[][][]',\n      'value[][][][]',\n      'value.value',\n      'value.thread.value',\n      'this.thread.value',\n      'this.output.value',\n      'this.constants.value',\n      'this.constants.value[]',\n      'this.constants.value[][]',\n      'this.constants.value[][][]',\n      'this.constants.value[][][][]',\n      'fn()[]',\n      'fn()[][]',\n      'fn()[][][]',\n      '[][]',\n    ];\n    if (allowedExpressions.indexOf(signatureString) > -1) {\n      return signatureString;\n    }\n    return null;\n  }\n\n  build() {\n    return this.toString().length > 0;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for generically to its respective function\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed string array\n   */\n  astGeneric(ast, retArr) {\n    if (ast === null) {\n      throw this.astErrorOutput('NULL ast', ast);\n    } else {\n      if (Array.isArray(ast)) {\n        for (let i = 0; i < ast.length; i++) {\n          this.astGeneric(ast[i], retArr);\n        }\n        return retArr;\n      }\n\n      switch (ast.type) {\n        case 'FunctionDeclaration':\n          return this.astFunctionDeclaration(ast, retArr);\n        case 'FunctionExpression':\n          return this.astFunctionExpression(ast, retArr);\n        case 'ReturnStatement':\n          return this.astReturnStatement(ast, retArr);\n        case 'Literal':\n          return this.astLiteral(ast, retArr);\n        case 'BinaryExpression':\n          return this.astBinaryExpression(ast, retArr);\n        case 'Identifier':\n          return this.astIdentifierExpression(ast, retArr);\n        case 'AssignmentExpression':\n          return this.astAssignmentExpression(ast, retArr);\n        case 'ExpressionStatement':\n          return this.astExpressionStatement(ast, retArr);\n        case 'EmptyStatement':\n          return this.astEmptyStatement(ast, retArr);\n        case 'BlockStatement':\n          return this.astBlockStatement(ast, retArr);\n        case 'IfStatement':\n          return this.astIfStatement(ast, retArr);\n        case 'SwitchStatement':\n          return this.astSwitchStatement(ast, retArr);\n        case 'BreakStatement':\n          return this.astBreakStatement(ast, retArr);\n        case 'ContinueStatement':\n          return this.astContinueStatement(ast, retArr);\n        case 'ForStatement':\n          return this.astForStatement(ast, retArr);\n        case 'WhileStatement':\n          return this.astWhileStatement(ast, retArr);\n        case 'DoWhileStatement':\n          return this.astDoWhileStatement(ast, retArr);\n        case 'VariableDeclaration':\n          return this.astVariableDeclaration(ast, retArr);\n        case 'VariableDeclarator':\n          return this.astVariableDeclarator(ast, retArr);\n        case 'ThisExpression':\n          return this.astThisExpression(ast, retArr);\n        case 'SequenceExpression':\n          return this.astSequenceExpression(ast, retArr);\n        case 'UnaryExpression':\n          return this.astUnaryExpression(ast, retArr);\n        case 'UpdateExpression':\n          return this.astUpdateExpression(ast, retArr);\n        case 'LogicalExpression':\n          return this.astLogicalExpression(ast, retArr);\n        case 'MemberExpression':\n          return this.astMemberExpression(ast, retArr);\n        case 'CallExpression':\n          return this.astCallExpression(ast, retArr);\n        case 'ArrayExpression':\n          return this.astArrayExpression(ast, retArr);\n        case 'DebuggerStatement':\n          return this.astDebuggerStatement(ast, retArr);\n        case 'ConditionalExpression':\n          return this.astConditionalExpression(ast, retArr);\n      }\n\n      throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);\n    }\n  }\n  /**\n   * @desc To throw the AST error, with its location.\n   * @param {string} error - the error message output\n   * @param {Object} ast - the AST object where the error is\n   */\n  astErrorOutput(error, ast) {\n    if (typeof this.source !== 'string') {\n      return new Error(error);\n    }\n\n    const debugString = utils.getAstString(this.source, ast);\n    const leadingSource = this.source.substr(ast.start);\n    const splitLines = leadingSource.split(/\\n/);\n    const lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;\n    return new Error(`${error} on line ${ splitLines.length }, position ${ lineBefore.length }:\\n ${ debugString }`);\n  }\n\n  astDebuggerStatement(arrNode, retArr) {\n    return retArr;\n  }\n\n  astConditionalExpression(ast, retArr) {\n    if (ast.type !== 'ConditionalExpression') {\n      throw this.astErrorOutput('Not a conditional expression', ast);\n    }\n    retArr.push('(');\n    this.astGeneric(ast.test, retArr);\n    retArr.push('?');\n    this.astGeneric(ast.consequent, retArr);\n    retArr.push(':');\n    this.astGeneric(ast.alternate, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n\n  /**\n   * @abstract\n   * @param {Object} ast\n   * @param {String[]} retArr\n   * @returns {String[]}\n   */\n  astFunction(ast, retArr) {\n    throw new Error(`\"astFunction\" not defined on ${ this.constructor.name }`);\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for to its *named function declaration*\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astFunctionDeclaration(ast, retArr) {\n    if (this.isChildFunction(ast)) {\n      return retArr;\n    }\n    return this.astFunction(ast, retArr);\n  }\n  astFunctionExpression(ast, retArr) {\n    if (this.isChildFunction(ast)) {\n      return retArr;\n    }\n    return this.astFunction(ast, retArr);\n  }\n  isChildFunction(ast) {\n    for (let i = 0; i < this.functions.length; i++) {\n      if (this.functions[i] === ast) {\n        return true;\n      }\n    }\n    return false;\n  }\n  astReturnStatement(ast, retArr) {\n    return retArr;\n  }\n  astLiteral(ast, retArr) {\n    this.literalTypes[this.astKey(ast)] = 'Number';\n    return retArr;\n  }\n  astBinaryExpression(ast, retArr) {\n    return retArr;\n  }\n  astIdentifierExpression(ast, retArr) {\n    return retArr;\n  }\n  astAssignmentExpression(ast, retArr) {\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for *generic expression* statement\n   * @param {Object} esNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astExpressionStatement(esNode, retArr) {\n    this.astGeneric(esNode.expression, retArr);\n    retArr.push(';');\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for an *Empty* Statement\n   * @param {Object} eNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astEmptyStatement(eNode, retArr) {\n    return retArr;\n  }\n  astBlockStatement(ast, retArr) {\n    return retArr;\n  }\n  astIfStatement(ast, retArr) {\n    return retArr;\n  }\n  astSwitchStatement(ast, retArr) {\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for *Break* Statement\n   * @param {Object} brNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astBreakStatement(brNode, retArr) {\n    retArr.push('break;');\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for *Continue* Statement\n   * @param {Object} crNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astContinueStatement(crNode, retArr) {\n    retArr.push('continue;\\n');\n    return retArr;\n  }\n  astForStatement(ast, retArr) {\n    return retArr;\n  }\n  astWhileStatement(ast, retArr) {\n    return retArr;\n  }\n  astDoWhileStatement(ast, retArr) {\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for *Variable Declarator*\n   * @param {Object} iVarDecNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astVariableDeclarator(iVarDecNode, retArr) {\n    this.astGeneric(iVarDecNode.id, retArr);\n    if (iVarDecNode.init !== null) {\n      retArr.push('=');\n      this.astGeneric(iVarDecNode.init, retArr);\n    }\n    return retArr;\n  }\n  astThisExpression(ast, retArr) {\n    return retArr;\n  }\n  astSequenceExpression(sNode, retArr) {\n    const { expressions } = sNode;\n    const sequenceResult = [];\n    for (let i = 0; i < expressions.length; i++) {\n      const expression = expressions[i];\n      const expressionResult = [];\n      this.astGeneric(expression, expressionResult);\n      sequenceResult.push(expressionResult.join(''));\n    }\n    if (sequenceResult.length > 1) {\n      retArr.push('(', sequenceResult.join(','), ')');\n    } else {\n      retArr.push(sequenceResult[0]);\n    }\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for *Unary* Expression\n   * @param {Object} uNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astUnaryExpression(uNode, retArr) {\n    const unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);\n    if (unaryResult) {\n      return retArr;\n    }\n\n    if (uNode.prefix) {\n      retArr.push(uNode.operator);\n      this.astGeneric(uNode.argument, retArr);\n    } else {\n      this.astGeneric(uNode.argument, retArr);\n      retArr.push(uNode.operator);\n    }\n\n    return retArr;\n  }\n\n  checkAndUpconvertBitwiseUnary(uNode, retArr) {}\n\n  /**\n   * @desc Parses the abstract syntax tree for *Update* Expression\n   * @param {Object} uNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astUpdateExpression(uNode, retArr) {\n    if (uNode.prefix) {\n      retArr.push(uNode.operator);\n      this.astGeneric(uNode.argument, retArr);\n    } else {\n      this.astGeneric(uNode.argument, retArr);\n      retArr.push(uNode.operator);\n    }\n\n    return retArr;\n  }\n  /**\n   * @desc Parses the abstract syntax tree for *Logical* Expression\n   * @param {Object} logNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astLogicalExpression(logNode, retArr) {\n    retArr.push('(');\n    this.astGeneric(logNode.left, retArr);\n    retArr.push(logNode.operator);\n    this.astGeneric(logNode.right, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n  astMemberExpression(ast, retArr) {\n    return retArr;\n  }\n  astCallExpression(ast, retArr) {\n    return retArr;\n  }\n  astArrayExpression(ast, retArr) {\n    return retArr;\n  }\n\n  /**\n   *\n   * @param ast\n   * @return {IFunctionNodeMemberExpressionDetails}\n   */\n  getMemberExpressionDetails(ast) {\n    if (ast.type !== 'MemberExpression') {\n      throw this.astErrorOutput(`Expression ${ ast.type } not a MemberExpression`, ast);\n    }\n    let name = null;\n    let type = null;\n    const variableSignature = this.getVariableSignature(ast);\n    switch (variableSignature) {\n      case 'value':\n        return null;\n      case 'value.thread.value':\n      case 'this.thread.value':\n      case 'this.output.value':\n        return {\n          signature: variableSignature,\n            type: 'Integer',\n            name: ast.property.name\n        };\n      case 'value[]':\n        if (typeof ast.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object),\n            xProperty: ast.property\n        };\n      case 'value[][]':\n        if (typeof ast.object.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object.object),\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n        };\n      case 'value[][][]':\n        if (typeof ast.object.object.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.object.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object.object.object),\n            zProperty: ast.object.object.property,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n        };\n      case 'value[][][][]':\n        if (typeof ast.object.object.object.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.object.object.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object.object.object.object),\n            zProperty: ast.object.object.property,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n        };\n      case 'value.value':\n        if (typeof ast.property.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        if (this.isAstMathVariable(ast)) {\n          name = ast.property.name;\n          return {\n            name,\n            origin: 'Math',\n            type: 'Number',\n            signature: variableSignature,\n          };\n        }\n        switch (ast.property.name) {\n          case 'r':\n          case 'g':\n          case 'b':\n          case 'a':\n            name = ast.object.name;\n            return {\n              name,\n              property: ast.property.name,\n                origin: 'user',\n                signature: variableSignature,\n                type: 'Number'\n            };\n          default:\n            throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        case 'this.constants.value':\n          if (typeof ast.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n              signature: variableSignature,\n          };\n        case 'this.constants.value[]':\n          if (typeof ast.object.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.object.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n              signature: variableSignature,\n              xProperty: ast.property,\n          };\n        case 'this.constants.value[][]': {\n          if (typeof ast.object.object.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.object.object.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n            signature: variableSignature,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n          };\n        }\n        case 'this.constants.value[][][]': {\n          if (typeof ast.object.object.object.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.object.object.object.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n            signature: variableSignature,\n            zProperty: ast.object.object.property,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n          };\n        }\n        case 'fn()[]':\n        case 'fn()[][]':\n        case '[][]':\n          return {\n            signature: variableSignature,\n              property: ast.property,\n          };\n        default:\n          throw this.astErrorOutput('Unexpected expression', ast);\n    }\n  }\n\n  findIdentifierOrigin(astToFind) {\n    const stack = [this.ast];\n\n    while (stack.length > 0) {\n      const atNode = stack[0];\n      if (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {\n        return atNode;\n      }\n      stack.shift();\n      if (atNode.argument) {\n        stack.push(atNode.argument);\n      } else if (atNode.body) {\n        stack.push(atNode.body);\n      } else if (atNode.declarations) {\n        stack.push(atNode.declarations);\n      } else if (Array.isArray(atNode)) {\n        for (let i = 0; i < atNode.length; i++) {\n          stack.push(atNode[i]);\n        }\n      }\n    }\n    return null;\n  }\n\n  findLastReturn(ast) {\n    const stack = [ast || this.ast];\n\n    while (stack.length > 0) {\n      const atNode = stack.pop();\n      if (atNode.type === 'ReturnStatement') {\n        return atNode;\n      }\n      if (atNode.type === 'FunctionDeclaration') {\n        continue;\n      }\n      if (atNode.argument) {\n        stack.push(atNode.argument);\n      } else if (atNode.body) {\n        stack.push(atNode.body);\n      } else if (atNode.declarations) {\n        stack.push(atNode.declarations);\n      } else if (Array.isArray(atNode)) {\n        for (let i = 0; i < atNode.length; i++) {\n          stack.push(atNode[i]);\n        }\n      } else if (atNode.consequent) {\n        stack.push(atNode.consequent);\n      } else if (atNode.cases) {\n        stack.push(atNode.cases);\n      }\n    }\n    return null;\n  }\n\n  getInternalVariableName(name) {\n    if (!this._internalVariableNames.hasOwnProperty(name)) {\n      this._internalVariableNames[name] = 0;\n    }\n    this._internalVariableNames[name]++;\n    if (this._internalVariableNames[name] === 1) {\n      return name;\n    }\n    return name + this._internalVariableNames[name];\n  }\n\n  astKey(ast, separator = ',') {\n    if (!ast.start || !ast.end) throw new Error('AST start and end needed');\n    return `${ast.start}${separator}${ast.end}`;\n  }\n}\n\nconst typeLookupMap = {\n  'Number': 'Number',\n  'Float': 'Float',\n  'Integer': 'Integer',\n  'Array': 'Number',\n  'Array(2)': 'Number',\n  'Array(3)': 'Number',\n  'Array(4)': 'Number',\n  'Matrix(2)': 'Number',\n  'Matrix(3)': 'Number',\n  'Matrix(4)': 'Number',\n  'Array2D': 'Number',\n  'Array3D': 'Number',\n  'Input': 'Number',\n  'HTMLCanvas': 'Array(4)',\n  'OffscreenCanvas': 'Array(4)',\n  'HTMLImage': 'Array(4)',\n  'ImageBitmap': 'Array(4)',\n  'ImageData': 'Array(4)',\n  'HTMLVideo': 'Array(4)',\n  'HTMLImageArray': 'Array(4)',\n  'NumberTexture': 'Number',\n  'MemoryOptimizedNumberTexture': 'Number',\n  'Array1D(2)': 'Array(2)',\n  'Array1D(3)': 'Array(3)',\n  'Array1D(4)': 'Array(4)',\n  'Array2D(2)': 'Array(2)',\n  'Array2D(3)': 'Array(3)',\n  'Array2D(4)': 'Array(4)',\n  'Array3D(2)': 'Array(2)',\n  'Array3D(3)': 'Array(3)',\n  'Array3D(4)': 'Array(4)',\n  'ArrayTexture(1)': 'Number',\n  'ArrayTexture(2)': 'Array(2)',\n  'ArrayTexture(3)': 'Array(3)',\n  'ArrayTexture(4)': 'Array(4)',\n};\n\nmodule.exports = {\n  FunctionNode\n};", "const { FunctionNode } = require('../function-node');\n\n/**\n * @desc [INTERNAL] Represents a single function, inside JS\n *\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n */\nclass CPUFunctionNode extends FunctionNode {\n  /**\n   * @desc Parses the abstract syntax tree for to its *named function*\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astFunction(ast, retArr) {\n\n    // Setup function return type and name\n    if (!this.isRootKernel) {\n      retArr.push('function');\n      retArr.push(' ');\n      retArr.push(this.name);\n      retArr.push('(');\n\n      // Arguments handling\n      for (let i = 0; i < this.argumentNames.length; ++i) {\n        const argumentName = this.argumentNames[i];\n\n        if (i > 0) {\n          retArr.push(', ');\n        }\n        retArr.push('user_');\n        retArr.push(argumentName);\n      }\n\n      // Function opening\n      retArr.push(') {\\n');\n    }\n\n    // Body statement iteration\n    for (let i = 0; i < ast.body.body.length; ++i) {\n      this.astGeneric(ast.body.body[i], retArr);\n      retArr.push('\\n');\n    }\n\n    if (!this.isRootKernel) {\n      // Function closing\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for to *return* statement\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astReturnStatement(ast, retArr) {\n    const type = this.returnType || this.getType(ast.argument);\n\n    if (!this.returnType) {\n      this.returnType = type;\n    }\n\n    if (this.isRootKernel) {\n      retArr.push(this.leadingReturnStatement);\n      this.astGeneric(ast.argument, retArr);\n      retArr.push(';\\n');\n      retArr.push(this.followingReturnStatement);\n      retArr.push('continue;\\n');\n    } else if (this.isSubKernel) {\n      retArr.push(`subKernelResult_${ this.name } = `);\n      this.astGeneric(ast.argument, retArr);\n      retArr.push(';');\n      retArr.push(`return subKernelResult_${ this.name };`);\n    } else {\n      retArr.push('return ');\n      this.astGeneric(ast.argument, retArr);\n      retArr.push(';');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *literal value*\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astLiteral(ast, retArr) {\n\n    // Reject non numeric literals\n    if (isNaN(ast.value)) {\n      throw this.astErrorOutput(\n        'Non-numeric literal not supported : ' + ast.value,\n        ast\n      );\n    }\n\n    retArr.push(ast.value);\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *binary* expression\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astBinaryExpression(ast, retArr) {\n    retArr.push('(');\n    this.astGeneric(ast.left, retArr);\n    retArr.push(ast.operator);\n    this.astGeneric(ast.right, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *identifier* expression\n   * @param {Object} idtNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astIdentifierExpression(idtNode, retArr) {\n    if (idtNode.type !== 'Identifier') {\n      throw this.astErrorOutput(\n        'IdentifierExpression - not an Identifier',\n        idtNode\n      );\n    }\n\n    switch (idtNode.name) {\n      case 'Infinity':\n        retArr.push('Infinity');\n        break;\n      default:\n        if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {\n          retArr.push('constants_' + idtNode.name);\n        } else {\n          retArr.push('user_' + idtNode.name);\n        }\n    }\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *for-loop* expression\n   * @param {Object} forNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed webgl string\n   */\n  astForStatement(forNode, retArr) {\n    if (forNode.type !== 'ForStatement') {\n      throw this.astErrorOutput('Invalid for statement', forNode);\n    }\n\n    const initArr = [];\n    const testArr = [];\n    const updateArr = [];\n    const bodyArr = [];\n    let isSafe = null;\n\n    if (forNode.init) {\n      this.pushState('in-for-loop-init');\n      this.astGeneric(forNode.init, initArr);\n      for (let i = 0; i < initArr.length; i++) {\n        if (initArr[i].includes && initArr[i].includes(',')) {\n          isSafe = false;\n        }\n      }\n      this.popState('in-for-loop-init');\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.test) {\n      this.astGeneric(forNode.test, testArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.update) {\n      this.astGeneric(forNode.update, updateArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.body) {\n      this.pushState('loop-body');\n      this.astGeneric(forNode.body, bodyArr);\n      this.popState('loop-body');\n    }\n\n    // have all parts, now make them safe\n    if (isSafe === null) {\n      isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n    }\n\n    if (isSafe) {\n      retArr.push(`for (${initArr.join('')};${testArr.join('')};${updateArr.join('')}){\\n`);\n      retArr.push(bodyArr.join(''));\n      retArr.push('}\\n');\n    } else {\n      const iVariableName = this.getInternalVariableName('safeI');\n      if (initArr.length > 0) {\n        retArr.push(initArr.join(''), ';\\n');\n      }\n      retArr.push(`for (let ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n      if (testArr.length > 0) {\n        retArr.push(`if (!${testArr.join('')}) break;\\n`);\n      }\n      retArr.push(bodyArr.join(''));\n      retArr.push(`\\n${updateArr.join('')};`);\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *while* loop\n   * @param {Object} whileNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed javascript string\n   */\n  astWhileStatement(whileNode, retArr) {\n    if (whileNode.type !== 'WhileStatement') {\n      throw this.astErrorOutput(\n        'Invalid while statement',\n        whileNode\n      );\n    }\n\n    retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n    retArr.push('if (');\n    this.astGeneric(whileNode.test, retArr);\n    retArr.push(') {\\n');\n    this.astGeneric(whileNode.body, retArr);\n    retArr.push('} else {\\n');\n    retArr.push('break;\\n');\n    retArr.push('}\\n');\n    retArr.push('}\\n');\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *do while* loop\n   * @param {Object} doWhileNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed webgl string\n   */\n  astDoWhileStatement(doWhileNode, retArr) {\n    if (doWhileNode.type !== 'DoWhileStatement') {\n      throw this.astErrorOutput(\n        'Invalid while statement',\n        doWhileNode\n      );\n    }\n\n    retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n    this.astGeneric(doWhileNode.body, retArr);\n    retArr.push('if (!');\n    this.astGeneric(doWhileNode.test, retArr);\n    retArr.push(') {\\n');\n    retArr.push('break;\\n');\n    retArr.push('}\\n');\n    retArr.push('}\\n');\n\n    return retArr;\n\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Assignment* Expression\n   * @param {Object} assNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astAssignmentExpression(assNode, retArr) {\n    const declaration = this.getDeclaration(assNode.left);\n    if (declaration && !declaration.assignable) {\n      throw this.astErrorOutput(`Variable ${assNode.left.name} is not assignable here`, assNode);\n    }\n    this.astGeneric(assNode.left, retArr);\n    retArr.push(assNode.operator);\n    this.astGeneric(assNode.right, retArr);\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Block* statement\n   * @param {Object} bNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astBlockStatement(bNode, retArr) {\n    if (this.isState('loop-body')) {\n      this.pushState('block-body'); // this prevents recursive removal of braces\n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      this.popState('block-body');\n    } else {\n      retArr.push('{\\n');\n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\n   * @param {Object} varDecNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astVariableDeclaration(varDecNode, retArr) {\n    retArr.push(`${varDecNode.kind} `);\n    const { declarations } = varDecNode;\n    for (let i = 0; i < declarations.length; i++) {\n      if (i > 0) {\n        retArr.push(',');\n      }\n      const declaration = declarations[i];\n      const info = this.getDeclaration(declaration.id);\n      if (!info.valueType) {\n        info.valueType = this.getType(declaration.init);\n      }\n      this.astGeneric(declaration, retArr);\n    }\n    if (!this.isState('in-for-loop-init')) {\n      retArr.push(';');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *If* Statement\n   * @param {Object} ifNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astIfStatement(ifNode, retArr) {\n    retArr.push('if (');\n    this.astGeneric(ifNode.test, retArr);\n    retArr.push(')');\n    if (ifNode.consequent.type === 'BlockStatement') {\n      this.astGeneric(ifNode.consequent, retArr);\n    } else {\n      retArr.push(' {\\n');\n      this.astGeneric(ifNode.consequent, retArr);\n      retArr.push('\\n}\\n');\n    }\n\n    if (ifNode.alternate) {\n      retArr.push('else ');\n      if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {\n        this.astGeneric(ifNode.alternate, retArr);\n      } else {\n        retArr.push(' {\\n');\n        this.astGeneric(ifNode.alternate, retArr);\n        retArr.push('\\n}\\n');\n      }\n    }\n    return retArr;\n\n  }\n\n  astSwitchStatement(ast, retArr) {\n    const { discriminant, cases } = ast;\n    retArr.push('switch (');\n    this.astGeneric(discriminant, retArr);\n    retArr.push(') {\\n');\n    for (let i = 0; i < cases.length; i++) {\n      if (cases[i].test === null) {\n        retArr.push('default:\\n');\n        this.astGeneric(cases[i].consequent, retArr);\n        if (cases[i].consequent && cases[i].consequent.length > 0) {\n          retArr.push('break;\\n');\n        }\n        continue;\n      }\n      retArr.push('case ');\n      this.astGeneric(cases[i].test, retArr);\n      retArr.push(':\\n');\n      if (cases[i].consequent && cases[i].consequent.length > 0) {\n        this.astGeneric(cases[i].consequent, retArr);\n        retArr.push('break;\\n');\n      }\n    }\n    retArr.push('\\n}');\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *This* expression\n   * @param {Object} tNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astThisExpression(tNode, retArr) {\n    retArr.push('_this');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Member* Expression\n   * @param {Object} mNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astMemberExpression(mNode, retArr) {\n    const {\n      signature,\n      type,\n      property,\n      xProperty,\n      yProperty,\n      zProperty,\n      name,\n      origin\n    } = this.getMemberExpressionDetails(mNode);\n    switch (signature) {\n      case 'this.thread.value':\n        retArr.push(`_this.thread.${ name }`);\n        return retArr;\n      case 'this.output.value':\n        switch (name) {\n          case 'x':\n            retArr.push('outputX');\n            break;\n          case 'y':\n            retArr.push('outputY');\n            break;\n          case 'z':\n            retArr.push('outputZ');\n            break;\n          default:\n            throw this.astErrorOutput('Unexpected expression', mNode);\n        }\n        return retArr;\n      case 'value':\n        throw this.astErrorOutput('Unexpected expression', mNode);\n      case 'value[]':\n      case 'value[][]':\n      case 'value[][][]':\n      case 'value.value':\n        if (origin === 'Math') {\n          retArr.push(Math[name]);\n          return retArr;\n        }\n        switch (property) {\n          case 'r':\n            retArr.push(`user_${ name }[0]`);\n            return retArr;\n          case 'g':\n            retArr.push(`user_${ name }[1]`);\n            return retArr;\n          case 'b':\n            retArr.push(`user_${ name }[2]`);\n            return retArr;\n          case 'a':\n            retArr.push(`user_${ name }[3]`);\n            return retArr;\n        }\n        break;\n      case 'this.constants.value':\n      case 'this.constants.value[]':\n      case 'this.constants.value[][]':\n      case 'this.constants.value[][][]':\n        break;\n      case 'fn()[]':\n        this.astGeneric(mNode.object, retArr);\n        retArr.push('[');\n        this.astGeneric(mNode.property, retArr);\n        retArr.push(']');\n        return retArr;\n      case 'fn()[][]':\n        this.astGeneric(mNode.object.object, retArr);\n        retArr.push('[');\n        this.astGeneric(mNode.object.property, retArr);\n        retArr.push(']');\n        retArr.push('[');\n        this.astGeneric(mNode.property, retArr);\n        retArr.push(']');\n        return retArr;\n      default:\n        throw this.astErrorOutput('Unexpected expression', mNode);\n    }\n\n    if (!mNode.computed) {\n      // handle simple types\n      switch (type) {\n        case 'Number':\n        case 'Integer':\n        case 'Float':\n        case 'Boolean':\n          retArr.push(`${origin}_${name}`);\n          return retArr;\n      }\n    }\n\n    // handle more complex types\n    // argument may have come from a parent\n    const markupName = `${origin}_${name}`;\n\n    switch (type) {\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n      case 'HTMLImageArray':\n      case 'ArrayTexture(1)':\n      case 'ArrayTexture(2)':\n      case 'ArrayTexture(3)':\n      case 'ArrayTexture(4)':\n      case 'HTMLImage':\n      default:\n        let size;\n        let isInput;\n        if (origin === 'constants') {\n          const constant = this.constants[name];\n          isInput = this.constantTypes[name] === 'Input';\n          size = isInput ? constant.size : null;\n        } else {\n          isInput = this.isInput(name);\n          size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name)] : null;\n        }\n        retArr.push(`${ markupName }`);\n        if (zProperty && yProperty) {\n          if (isInput) {\n            retArr.push('[(');\n            this.astGeneric(zProperty, retArr);\n            retArr.push(`*${ this.dynamicArguments ? '(outputY * outputX)' : size[1] * size[0] })+(`);\n            this.astGeneric(yProperty, retArr);\n            retArr.push(`*${ this.dynamicArguments ? 'outputX' : size[0] })+`);\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          } else {\n            retArr.push('[');\n            this.astGeneric(zProperty, retArr);\n            retArr.push(']');\n            retArr.push('[');\n            this.astGeneric(yProperty, retArr);\n            retArr.push(']');\n            retArr.push('[');\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          }\n        } else if (yProperty) {\n          if (isInput) {\n            retArr.push('[(');\n            this.astGeneric(yProperty, retArr);\n            retArr.push(`*${ this.dynamicArguments ? 'outputX' : size[0] })+`);\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          } else {\n            retArr.push('[');\n            this.astGeneric(yProperty, retArr);\n            retArr.push(']');\n            retArr.push('[');\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          }\n        } else if (typeof xProperty !== 'undefined') {\n          retArr.push('[');\n          this.astGeneric(xProperty, retArr);\n          retArr.push(']');\n        }\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *call* expression\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns  {Array} the append retArr\n   */\n  astCallExpression(ast, retArr) {\n    if (ast.type !== 'CallExpression') {\n      // Failure, unknown expression\n      throw this.astErrorOutput('Unknown CallExpression', ast);\n    }\n    // Get the full function call, unrolled\n    let functionName = this.astMemberExpressionUnroll(ast.callee);\n\n    // Register the function into the called registry\n    if (this.calledFunctions.indexOf(functionName) < 0) {\n      this.calledFunctions.push(functionName);\n    }\n\n    const isMathFunction = this.isAstMathFunction(ast);\n\n    // track the function was called\n    if (this.onFunctionCall) {\n      this.onFunctionCall(this.name, functionName, ast.arguments);\n    }\n\n    // Call the function\n    retArr.push(functionName);\n\n    // Open arguments space\n    retArr.push('(');\n    const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n    // Add the arguments\n    for (let i = 0; i < ast.arguments.length; ++i) {\n      const argument = ast.arguments[i];\n\n      // in order to track return type, even though this is CPU\n      let argumentType = this.getType(argument);\n      if (!targetTypes[i]) {\n        this.triggerImplyArgumentType(functionName, i, argumentType, this);\n      }\n\n      if (i > 0) {\n        retArr.push(', ');\n      }\n      this.astGeneric(argument, retArr);\n    }\n    // Close arguments space\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Array* Expression\n   * @param {Object} arrNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astArrayExpression(arrNode, retArr) {\n    const returnType = this.getType(arrNode);\n    const arrLen = arrNode.elements.length;\n    const elements = [];\n    for (let i = 0; i < arrLen; ++i) {\n      const element = [];\n      this.astGeneric(arrNode.elements[i], element);\n      elements.push(element.join(''));\n    }\n    switch (returnType) {\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        retArr.push(`[${elements.join(', ')}]`);\n        break;\n      default:\n        retArr.push(`new Float32Array([${elements.join(', ')}])`);\n    }\n    return retArr;\n  }\n\n  astDebuggerStatement(arrNode, retArr) {\n    retArr.push('debugger;');\n    return retArr;\n  }\n}\n\nmodule.exports = {\n  CPUFunctionNode\n};", "const { utils } = require('../../utils');\n\nfunction constantsToString(constants, types) {\n  const results = [];\n  for (const name in types) {\n    if (!types.hasOwnProperty(name)) continue;\n    const type = types[name];\n    const constant = constants[name];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n        results.push(`${name}:${constant}`);\n        break;\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        results.push(`${name}:new ${constant.constructor.name}(${JSON.stringify(Array.from(constant))})`);\n        break;\n    }\n  }\n  return `{ ${ results.join() } }`;\n}\n\nfunction cpuKernelString(cpuKernel, name) {\n  const header = [];\n  const thisProperties = [];\n  const beforeReturn = [];\n\n  const useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());\n\n  header.push(\n    '  const { context, canvas, constants: incomingConstants } = settings;',\n    `  const output = new Int32Array(${JSON.stringify(Array.from(cpuKernel.output))});`,\n    `  const _constantTypes = ${JSON.stringify(cpuKernel.constantTypes)};`,\n    `  const _constants = ${constantsToString(cpuKernel.constants, cpuKernel.constantTypes)};`\n  );\n\n  thisProperties.push(\n    '    constants: _constants,',\n    '    context,',\n    '    output,',\n    '    thread: {x: 0, y: 0, z: 0},'\n  );\n\n  if (cpuKernel.graphical) {\n    header.push(`  const _imageData = context.createImageData(${cpuKernel.output[0]}, ${cpuKernel.output[1]});`);\n    header.push(`  const _colorData = new Uint8ClampedArray(${cpuKernel.output[0]} * ${cpuKernel.output[1]} * 4);`);\n\n    const colorFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.color.toString(), {\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case '_colorData':\n            return '_colorData';\n          case '_imageData':\n            return '_imageData';\n          case 'output':\n            return 'output';\n          case 'thread':\n            return 'this.thread';\n        }\n        return JSON.stringify(cpuKernel[propertyName]);\n      },\n      findDependency: (object, name) => {\n        return null;\n      }\n    });\n\n    const getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.getPixels.toString(), {\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case '_colorData':\n            return '_colorData';\n          case '_imageData':\n            return '_imageData';\n          case 'output':\n            return 'output';\n          case 'thread':\n            return 'this.thread';\n        }\n        return JSON.stringify(cpuKernel[propertyName]);\n      },\n      findDependency: () => {\n        return null;\n      }\n    });\n\n    thisProperties.push(\n      '    _imageData,',\n      '    _colorData,',\n      `    color: ${colorFn},`\n    );\n\n    beforeReturn.push(\n      `  kernel.getPixels = ${getPixelsFn};`\n    );\n  }\n\n  const constantTypes = [];\n  const constantKeys = Object.keys(cpuKernel.constantTypes);\n  for (let i = 0; i < constantKeys.length; i++) {\n    constantTypes.push(cpuKernel.constantTypes[constantKeys]);\n  }\n  if (cpuKernel.argumentTypes.indexOf('HTMLImageArray') !== -1 || constantTypes.indexOf('HTMLImageArray') !== -1) {\n    const flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._imageTo3DArray.toString(), {\n      doNotDefine: ['canvas'],\n      findDependency: (object, name) => {\n        if (object === 'this') {\n          return (useFunctionKeyword ? 'function ' : '') + cpuKernel[name].toString();\n        }\n        return null;\n      },\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case 'canvas':\n            return;\n          case 'context':\n            return 'context';\n        }\n      }\n    });\n    beforeReturn.push(flattenedImageTo3DArray);\n    thisProperties.push(`    _mediaTo2DArray,`);\n    thisProperties.push(`    _imageTo3DArray,`);\n  } else if (cpuKernel.argumentTypes.indexOf('HTMLImage') !== -1 || constantTypes.indexOf('HTMLImage') !== -1) {\n    const flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._mediaTo2DArray.toString(), {\n      findDependency: (object, name) => {\n        return null;\n      },\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case 'canvas':\n            return 'settings.canvas';\n          case 'context':\n            return 'settings.context';\n        }\n        throw new Error('unhandled thisLookup');\n      }\n    });\n    beforeReturn.push(flattenedImageTo2DArray);\n    thisProperties.push(`    _mediaTo2DArray,`);\n  }\n\n  return `function(settings) {\n${ header.join('\\n') }\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n${cpuKernel._kernelString}\n  })\n    .apply({ ${thisProperties.join('\\n')} });\n  ${ beforeReturn.join('\\n') }\n  return kernel;\n}`;\n}\n\nmodule.exports = {\n  cpuKernelString\n};", "const { Kernel } = require('../kernel');\nconst { FunctionBuilder } = require('../function-builder');\nconst { CPUFunctionNode } = require('./function-node');\nconst { utils } = require('../../utils');\nconst { cpuKernelString } = require('./kernel-string');\n\n/**\n * @desc Kernel Implementation for CPU.\n * <p>Instantiates properties to the CPU Kernel.</p>\n */\nclass CPUKernel extends Kernel {\n  static getFeatures() {\n    return this.features;\n  }\n  static get features() {\n    return Object.freeze({\n      kernelMap: true,\n      isIntegerDivisionAccurate: true\n    });\n  }\n  static get isSupported() {\n    return true;\n  }\n  static isContextMatch(context) {\n    return false;\n  }\n  /**\n   * @desc The current mode in which gpu.js is executing.\n   */\n  static get mode() {\n    return 'cpu';\n  }\n\n  static nativeFunctionArguments() {\n    return null;\n  }\n\n  static nativeFunctionReturnType() {\n    throw new Error(`Looking up native function return type not supported on ${this.name}`);\n  }\n\n  static combineKernels(combinedKernel) {\n    return combinedKernel;\n  }\n\n  static getSignature(kernel, argumentTypes) {\n    return 'cpu' + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');\n  }\n\n  constructor(source, settings) {\n    super(source, settings);\n    this.mergeSettings(source.settings || settings);\n\n    this._imageData = null;\n    this._colorData = null;\n    this._kernelString = null;\n    this._prependedString = [];\n    this.thread = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.translatedSources = null;\n  }\n\n  initCanvas() {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(0, 0);\n    }\n  }\n\n  initContext() {\n    if (!this.canvas) return null;\n    return this.canvas.getContext('2d');\n  }\n\n  initPlugins(settings) {\n    return [];\n  }\n\n  /**\n   * @desc Validate settings related to Kernel, such as dimensions size, and auto output support.\n   * @param {IArguments} args\n   */\n  validateSettings(args) {\n    if (!this.output || this.output.length === 0) {\n      if (args.length !== 1) {\n        throw new Error('Auto output only supported for kernels with only one input');\n      }\n\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\n      if (argType === 'Array') {\n        this.output = utils.getDimensions(argType);\n      } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n        this.output = args[0].output;\n      } else {\n        throw new Error('Auto output not supported for input type: ' + argType);\n      }\n    }\n\n    if (this.graphical) {\n      if (this.output.length !== 2) {\n        throw new Error('Output must have 2 dimensions on graphical mode');\n      }\n    }\n\n    this.checkOutput();\n  }\n\n  translateSource() {\n    this.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';\n    if (this.subKernels) {\n      const followingReturnStatement = [];\n      for (let i = 0; i < this.subKernels.length; i++) {\n        const {\n          name\n        } = this.subKernels[i];\n        followingReturnStatement.push(this.output.length > 1 ? `resultX_${ name }[x] = subKernelResult_${ name };\\n` : `result_${ name }[x] = subKernelResult_${ name };\\n`);\n      }\n      this.followingReturnStatement = followingReturnStatement.join('');\n    }\n    const functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);\n    this.translatedSources = functionBuilder.getPrototypes('kernel');\n    if (!this.graphical && !this.returnType) {\n      this.returnType = functionBuilder.getKernelResultType();\n    }\n  }\n\n  /**\n   * @desc Builds the Kernel, by generating the kernel\n   * string using thread dimensions, and arguments\n   * supplied to the kernel.\n   *\n   * <p>If the graphical flag is enabled, canvas is used.</p>\n   */\n  build() {\n    if (this.built) return;\n    this.setupConstants();\n    this.setupArguments(arguments);\n    this.validateSettings(arguments);\n    this.translateSource();\n\n    if (this.graphical) {\n      const {\n        canvas,\n        output\n      } = this;\n      if (!canvas) {\n        throw new Error('no canvas available for using graphical output');\n      }\n      const width = output[0];\n      const height = output[1] || 1;\n      canvas.width = width;\n      canvas.height = height;\n      this._imageData = this.context.createImageData(width, height);\n      this._colorData = new Uint8ClampedArray(width * height * 4);\n    }\n\n    const kernelString = this.getKernelString();\n    this.kernelString = kernelString;\n\n    if (this.debug) {\n      console.log('Function output:');\n      console.log(kernelString);\n    }\n\n    try {\n      this.run = new Function([], kernelString).bind(this)();\n    } catch (e) {\n      console.error('An error occurred compiling the javascript: ', e);\n    }\n    this.buildSignature(arguments);\n    this.built = true;\n  }\n\n  color(r, g, b, a) {\n    if (typeof a === 'undefined') {\n      a = 1;\n    }\n\n    r = Math.floor(r * 255);\n    g = Math.floor(g * 255);\n    b = Math.floor(b * 255);\n    a = Math.floor(a * 255);\n\n    const width = this.output[0];\n    const height = this.output[1];\n\n    const x = this.thread.x;\n    const y = height - this.thread.y - 1;\n\n    const index = x + y * width;\n\n    this._colorData[index * 4 + 0] = r;\n    this._colorData[index * 4 + 1] = g;\n    this._colorData[index * 4 + 2] = b;\n    this._colorData[index * 4 + 3] = a;\n  }\n\n  /**\n   * @desc Generates kernel string for this kernel program.\n   *\n   * <p>If sub-kernels are supplied, they are also factored in.\n   * This string can be saved by calling the `toString` method\n   * and then can be reused later.</p>\n   *\n   * @returns {String} result\n   *\n   */\n  getKernelString() {\n    if (this._kernelString !== null) return this._kernelString;\n\n    let kernelThreadString = null;\n    let {\n      translatedSources\n    } = this;\n    if (translatedSources.length > 1) {\n      translatedSources = translatedSources.filter(fn => {\n        if (/^function/.test(fn)) return fn;\n        kernelThreadString = fn;\n        return false;\n      });\n    } else {\n      kernelThreadString = translatedSources.shift();\n    }\n    return this._kernelString = `  const LOOP_MAX = ${ this._getLoopMaxString() };\n  ${ this.injectedNative || '' }\n  const _this = this;\n  ${ this._resultKernelHeader() }\n  ${ this._processConstants() }\n  return (${ this.argumentNames.map(argumentName => 'user_' + argumentName).join(', ') }) => {\n    ${ this._prependedString.join('') }\n    ${ this._earlyThrows() }\n    ${ this._processArguments() }\n    ${ this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString) }\n    ${ translatedSources.length > 0 ? translatedSources.join('\\n') : '' }\n  };`;\n  }\n\n  /**\n   * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n   */\n  toString() {\n    return cpuKernelString(this);\n  }\n\n  /**\n   * @desc Get the maximum loop size String.\n   * @returns {String} result\n   */\n  _getLoopMaxString() {\n    return (\n      this.loopMaxIterations ?\n      ` ${ parseInt(this.loopMaxIterations) };` :\n      ' 1000;'\n    );\n  }\n\n  _processConstants() {\n    if (!this.constants) return '';\n\n    const result = [];\n    for (let p in this.constants) {\n      const type = this.constantTypes[p];\n      switch (type) {\n        case 'HTMLCanvas':\n        case 'OffscreenCanvas':\n        case 'HTMLImage':\n        case 'ImageBitmap':\n        case 'ImageData':\n        case 'HTMLVideo':\n          result.push(`    const constants_${p} = this._mediaTo2DArray(this.constants.${p});\\n`);\n          break;\n        case 'HTMLImageArray':\n          result.push(`    const constants_${p} = this._imageTo3DArray(this.constants.${p});\\n`);\n          break;\n        case 'Input':\n          result.push(`    const constants_${p} = this.constants.${p}.value;\\n`);\n          break;\n        default:\n          result.push(`    const constants_${p} = this.constants.${p};\\n`);\n      }\n    }\n    return result.join('');\n  }\n\n  _earlyThrows() {\n    if (this.graphical) return '';\n    if (this.immutable) return '';\n    if (!this.pipeline) return '';\n    const arrayArguments = [];\n    for (let i = 0; i < this.argumentTypes.length; i++) {\n      if (this.argumentTypes[i] === 'Array') {\n        arrayArguments.push(this.argumentNames[i]);\n      }\n    }\n    if (arrayArguments.length === 0) return '';\n    const checks = [];\n    for (let i = 0; i < arrayArguments.length; i++) {\n      const argumentName = arrayArguments[i];\n      const checkSubKernels = this._mapSubKernels(subKernel => `user_${argumentName} === result_${subKernel.name}`).join(' || ');\n      checks.push(`user_${argumentName} === result${checkSubKernels ? ` || ${checkSubKernels}` : ''}`);\n    }\n    return `if (${checks.join(' || ')}) throw new Error('Source and destination arrays are the same.  Use immutable = true');`;\n  }\n\n  _processArguments() {\n    const result = [];\n    for (let i = 0; i < this.argumentTypes.length; i++) {\n      const variableName = `user_${this.argumentNames[i]}`;\n      switch (this.argumentTypes[i]) {\n        case 'HTMLCanvas':\n        case 'OffscreenCanvas':\n        case 'HTMLImage':\n        case 'ImageBitmap':\n        case 'ImageData':\n        case 'HTMLVideo':\n          result.push(`    ${variableName} = this._mediaTo2DArray(${variableName});\\n`);\n          break;\n        case 'HTMLImageArray':\n          result.push(`    ${variableName} = this._imageTo3DArray(${variableName});\\n`);\n          break;\n        case 'Input':\n          result.push(`    ${variableName} = ${variableName}.value;\\n`);\n          break;\n        case 'ArrayTexture(1)':\n        case 'ArrayTexture(2)':\n        case 'ArrayTexture(3)':\n        case 'ArrayTexture(4)':\n        case 'NumberTexture':\n        case 'MemoryOptimizedNumberTexture':\n          result.push(`\n    if (${variableName}.toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(${variableName});\n      if (textureIndex !== -1) {\n        ${variableName} = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(${variableName});\n        ${variableName} = ${variableName}.toArray();\n        _this.arrayCache.push(${variableName});\n      }\n    }`);\n          break;\n      }\n    }\n    return result.join('');\n  }\n\n  _mediaTo2DArray(media) {\n    const canvas = this.canvas;\n    const width = media.width > 0 ? media.width : media.videoWidth;\n    const height = media.height > 0 ? media.height : media.videoHeight;\n    if (canvas.width < width) {\n      canvas.width = width;\n    }\n    if (canvas.height < height) {\n      canvas.height = height;\n    }\n    const ctx = this.context;\n    let pixelsData;\n    if (media.constructor === ImageData) {\n      pixelsData = media.data;\n    } else {\n      ctx.drawImage(media, 0, 0, width, height);\n      pixelsData = ctx.getImageData(0, 0, width, height).data;\n    }\n    const imageArray = new Array(height);\n    let index = 0;\n    for (let y = height - 1; y >= 0; y--) {\n      const row = imageArray[y] = new Array(width);\n      for (let x = 0; x < width; x++) {\n        const pixel = new Float32Array(4);\n        pixel[0] = pixelsData[index++] / 255; // r\n        pixel[1] = pixelsData[index++] / 255; // g\n        pixel[2] = pixelsData[index++] / 255; // b\n        pixel[3] = pixelsData[index++] / 255; // a\n        row[x] = pixel;\n      }\n    }\n    return imageArray;\n  }\n\n  /**\n   *\n   * @param flip\n   * @return {Uint8ClampedArray}\n   */\n  getPixels(flip) {\n    const [width, height] = this.output;\n    // cpu is not flipped by default\n    return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);\n  }\n\n  _imageTo3DArray(images) {\n    const imagesArray = new Array(images.length);\n    for (let i = 0; i < images.length; i++) {\n      imagesArray[i] = this._mediaTo2DArray(images[i]);\n    }\n    return imagesArray;\n  }\n\n  _resultKernelHeader() {\n    if (this.graphical) return '';\n    if (this.immutable) return '';\n    if (!this.pipeline) return '';\n    switch (this.output.length) {\n      case 1:\n        return this._mutableKernel1DResults();\n      case 2:\n        return this._mutableKernel2DResults();\n      case 3:\n        return this._mutableKernel3DResults();\n    }\n  }\n\n  _resultKernelBody(kernelString) {\n    switch (this.output.length) {\n      case 1:\n        return (!this.immutable && this.pipeline ? this._resultMutableKernel1DLoop(kernelString) : this._resultImmutableKernel1DLoop(kernelString)) + this._kernelOutput();\n      case 2:\n        return (!this.immutable && this.pipeline ? this._resultMutableKernel2DLoop(kernelString) : this._resultImmutableKernel2DLoop(kernelString)) + this._kernelOutput();\n      case 3:\n        return (!this.immutable && this.pipeline ? this._resultMutableKernel3DLoop(kernelString) : this._resultImmutableKernel3DLoop(kernelString)) + this._kernelOutput();\n      default:\n        throw new Error('unsupported size kernel');\n    }\n  }\n\n  _graphicalKernelBody(kernelThreadString) {\n    switch (this.output.length) {\n      case 2:\n        return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();\n      default:\n        throw new Error('unsupported size kernel');\n    }\n  }\n\n  _graphicalOutput() {\n    return `\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;`\n  }\n\n  _getKernelResultTypeConstructorString() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        return 'Float32Array';\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n        return 'Array';\n      default:\n        if (this.graphical) {\n          return 'Float32Array';\n        }\n        throw new Error(`unhandled returnType ${ this.returnType }`);\n    }\n  }\n\n  _resultImmutableKernel1DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const result = new ${constructorString}(outputX);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new ${constructorString}(outputX);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${ kernelString }\n    }`;\n  }\n\n  _mutableKernel1DResults() {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const result = new ${constructorString}(outputX);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new ${constructorString}(outputX);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }`;\n  }\n\n  _resultMutableKernel1DLoop(kernelString) {\n    return `  const outputX = _this.output[0];\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${ kernelString }\n    }`;\n  }\n\n  _resultImmutableKernel2DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputY);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ${constructorString}(outputX);\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n  }\n\n  _mutableKernel2DResults() {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputY);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let y = 0; y < outputY; y++) {\n      const resultX = result[y] = new ${constructorString}(outputX);\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\n    }`;\n  }\n\n  _resultMutableKernel2DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y];\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n  }\n\n  _graphicalKernel2DLoop(kernelString) {\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n  }\n\n  _resultImmutableKernel3DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputZ);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ${ this._mapSubKernels(subKernel => `const resultY_${ subKernel.name } = result_${subKernel.name}[z] = new Array(outputY);\\n`).join('      ') }\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ${constructorString}(outputX);\n        ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('        ') }\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${ kernelString }\n        }\n      }\n    }`;\n  }\n\n  _mutableKernel3DResults() {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputZ);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let z = 0; z < outputZ; z++) {\n      const resultY = result[z] = new Array(outputY);\n      ${ this._mapSubKernels(subKernel => `const resultY_${ subKernel.name } = result_${subKernel.name}[z] = new Array(outputY);\\n`).join('      ') }\n      for (let y = 0; y < outputY; y++) {\n        const resultX = resultY[y] = new ${constructorString}(outputX);\n        ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('        ') }\n      }\n    }`;\n  }\n\n  _resultMutableKernel3DLoop(kernelString) {\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z];\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y];\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${ kernelString }\n        }\n      }\n    }`;\n  }\n\n  _kernelOutput() {\n    if (!this.subKernels) {\n      return '\\n    return result;';\n    }\n    return `\\n    return {\n      result: result,\n      ${ this.subKernels.map(subKernel => `${ subKernel.property }: result_${ subKernel.name }`).join(',\\n      ') }\n    };`;\n  }\n\n  _mapSubKernels(fn) {\n    return this.subKernels === null ? [''] :\n      this.subKernels.map(fn);\n  }\n\n  destroy(removeCanvasReference) {\n    if (removeCanvasReference) {\n      delete this.canvas;\n    }\n  }\n\n  static destroyContext(context) {}\n\n  toJSON() {\n    const json = super.toJSON();\n    json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();\n    return json;\n  }\n\n  setOutput(output) {\n    super.setOutput(output);\n    const [width, height] = this.output;\n    if (this.graphical) {\n      this._imageData = this.context.createImageData(width, height);\n      this._colorData = new Uint8ClampedArray(width * height * 4);\n    }\n  }\n\n  prependString(value) {\n    if (this._kernelString) throw new Error('Kernel already built');\n    this._prependedString.push(value);\n  }\n\n  hasPrependString(value) {\n    return this._prependedString.indexOf(value) > -1;\n  }\n}\n\nmodule.exports = {\n  CPUKernel\n};", "const { Texture } = require('../../../texture');\n\n/**\n * @class\n * @property framebuffer\n * @extends Texture\n */\nclass GLTexture extends Texture {\n  /**\n   * @returns {Number}\n   * @abstract\n   */\n  get textureType() {\n    throw new Error(`\"textureType\" not implemented on ${ this.name }`);\n  }\n\n  clone() {\n    return new this.constructor(this);\n  }\n\n  /**\n   * @returns {Boolean}\n   */\n  beforeMutate() {\n    if (this.texture._refs > 1) {\n      this.newTexture();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  cloneTexture() {\n    this.texture._refs--;\n    const { context: gl, size, texture, kernel } = this;\n    if (kernel.debug) {\n      console.warn('cloning internal texture');\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    selectTexture(gl, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const target = gl.createTexture();\n    selectTexture(gl, target);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n    gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);\n    target._refs = 1;\n    this.texture = target;\n  }\n\n  /**\n   * @private\n   */\n  newTexture() {\n    this.texture._refs--;\n    const gl = this.context;\n    const size = this.size;\n    const kernel = this.kernel;\n    if (kernel.debug) {\n      console.warn('new internal texture');\n    }\n    const target = gl.createTexture();\n    selectTexture(gl, target);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n    target._refs = 1;\n    this.texture = target;\n  }\n\n  clear() {\n    if (this.texture._refs) {\n      this.texture._refs--;\n      const gl = this.context;\n      const target = this.texture = gl.createTexture();\n      selectTexture(gl, target);\n      const size = this.size;\n      target._refs = 1;\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n    }\n    const { context: gl, texture } = this;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    selectTexture(gl, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  }\n\n  delete() {\n    if (this._deleted) return;\n    this._deleted = true;\n    if (this.texture._refs) {\n      this.texture._refs--;\n      if (this.texture._refs) return;\n    }\n    this.context.deleteTexture(this.texture);\n    // TODO: Remove me\n    // if (this.texture._refs === 0 && this._framebuffer) {\n    //   this.context.deleteFramebuffer(this._framebuffer);\n    //   this._framebuffer = null;\n    // }\n  }\n\n  framebuffer() {\n    if (!this._framebuffer) {\n      this._framebuffer = this.kernel.getRawValueFramebuffer(this.size[0], this.size[1]);\n    }\n    return this._framebuffer;\n  }\n}\n\nfunction selectTexture(gl, texture) {\n  /* Maximum a texture can be, so that collision is highly unlikely\n   * basically gl.TEXTURE15 + gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n   * Was gl.TEXTURE31, but safari didn't like it\n   * */\n  gl.activeTexture(gl.TEXTURE15);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n}\n\nmodule.exports = { GLTexture };", "const { utils } = require('../../../utils');\nconst { GLTexture } = require('./index');\n\nclass GLTextureFloat extends GLTexture {\n  get textureType() {\n    return this.context.FLOAT;\n  }\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(1)';\n  }\n  renderRawOutput() {\n    const gl = this.context;\n    const size = this.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture,\n      0\n    );\n    const result = new Float32Array(size[0] * size[1] * 4);\n    gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.FLOAT, result);\n    return result;\n  }\n  renderValues() {\n    if (this._deleted) return null;\n    return this.renderRawOutput();\n  }\n  toArray() {\n    return utils.erectFloat(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureFloat\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray2Float extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(2)';\n  }\n  toArray() {\n    return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray2Float\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray2Float2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(2)';\n  }\n  toArray() {\n    return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray2Float2D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray2Float3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(2)';\n  }\n  toArray() {\n    return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray2Float3D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray3Float extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(3)';\n  }\n  toArray() {\n    return utils.erectArray3(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray3Float\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray3Float2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(3)';\n  }\n  toArray() {\n    return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray3Float2D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray3Float3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(3)';\n  }\n  toArray() {\n    return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray3Float3D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray4Float extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return utils.erectArray4(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray4Float\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray4Float2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray4Float2D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray4Float3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray4Float3D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureFloat2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(1)';\n  }\n  toArray() {\n    return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureFloat2D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureFloat3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(1)';\n  }\n  toArray() {\n    return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureFloat3D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureMemoryOptimized extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'MemoryOptimizedNumberTexture';\n  }\n  toArray() {\n    return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureMemoryOptimized\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureMemoryOptimized2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'MemoryOptimizedNumberTexture';\n  }\n  toArray() {\n    return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureMemoryOptimized2D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureMemoryOptimized3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'MemoryOptimizedNumberTexture';\n  }\n  toArray() {\n    return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureMemoryOptimized3D\n};", "const { utils } = require('../../../utils');\nconst { GLTexture } = require('./index');\n\nclass GLTextureUnsigned extends GLTexture {\n  get textureType() {\n    return this.context.UNSIGNED_BYTE;\n  }\n  constructor(settings) {\n    super(settings);\n    this.type = 'NumberTexture';\n  }\n  renderRawOutput() {\n    const { context: gl } = this;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture,\n      0\n    );\n    const result = new Uint8Array(this.size[0] * this.size[1] * 4);\n    gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n    return result;\n  }\n  renderValues() {\n    if (this._deleted) return null;\n    return new Float32Array(this.renderRawOutput().buffer);\n  }\n  toArray() {\n    return utils.erectPackedFloat(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureUnsigned\n};", "const { utils } = require('../../../utils');\nconst { GLTextureUnsigned } = require('./unsigned');\n\nclass GLTextureUnsigned2D extends GLTextureUnsigned {\n  constructor(settings) {\n    super(settings);\n    this.type = 'NumberTexture';\n  }\n  toArray() {\n    return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureUnsigned2D\n};", "const { utils } = require('../../../utils');\nconst { GLTextureUnsigned } = require('./unsigned');\n\nclass GLTextureUnsigned3D extends GLTextureUnsigned {\n  constructor(settings) {\n    super(settings);\n    this.type = 'NumberTexture';\n  }\n  toArray() {\n    return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureUnsigned3D\n};", "const { GLTextureUnsigned } = require('./unsigned');\n\nclass GLTextureGraphical extends GLTextureUnsigned {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return this.renderValues();\n  }\n}\n\nmodule.exports = {\n  GLTextureGraphical\n};", "const { Kernel } = require('../kernel');\nconst { utils } = require('../../utils');\nconst { GLTextureArray2Float } = require('./texture/array-2-float');\nconst { GLTextureArray2Float2D } = require('./texture/array-2-float-2d');\nconst { GLTextureArray2Float3D } = require('./texture/array-2-float-3d');\nconst { GLTextureArray3Float } = require('./texture/array-3-float');\nconst { GLTextureArray3Float2D } = require('./texture/array-3-float-2d');\nconst { GLTextureArray3Float3D } = require('./texture/array-3-float-3d');\nconst { GLTextureArray4Float } = require('./texture/array-4-float');\nconst { GLTextureArray4Float2D } = require('./texture/array-4-float-2d');\nconst { GLTextureArray4Float3D } = require('./texture/array-4-float-3d');\nconst { GLTextureFloat } = require('./texture/float');\nconst { GLTextureFloat2D } = require('./texture/float-2d');\nconst { GLTextureFloat3D } = require('./texture/float-3d');\nconst { GLTextureMemoryOptimized } = require('./texture/memory-optimized');\nconst { GLTextureMemoryOptimized2D } = require('./texture/memory-optimized-2d');\nconst { GLTextureMemoryOptimized3D } = require('./texture/memory-optimized-3d');\nconst { GLTextureUnsigned } = require('./texture/unsigned');\nconst { GLTextureUnsigned2D } = require('./texture/unsigned-2d');\nconst { GLTextureUnsigned3D } = require('./texture/unsigned-3d');\nconst { GLTextureGraphical } = require('./texture/graphical');\n\n/**\n * @abstract\n * @extends Kernel\n */\nclass GLKernel extends Kernel {\n  static get mode() {\n    return 'gpu';\n  }\n\n  static getIsFloatRead() {\n    const kernelString = `function kernelFunction() {\n      return 1;\n    }`;\n    const kernel = new this(kernelString, {\n      context: this.testContext,\n      canvas: this.testCanvas,\n      validate: false,\n      output: [1],\n      precision: 'single',\n      returnType: 'Number',\n      tactic: 'speed',\n    });\n    kernel.build();\n    kernel.run();\n    const result = kernel.renderOutput();\n    kernel.destroy(true);\n    return result[0] === 1;\n  }\n\n  static getIsIntegerDivisionAccurate() {\n    function kernelFunction(v1, v2) {\n      return v1[this.thread.x] / v2[this.thread.x];\n    }\n    const kernel = new this(kernelFunction.toString(), {\n      context: this.testContext,\n      canvas: this.testCanvas,\n      validate: false,\n      output: [2],\n      returnType: 'Number',\n      precision: 'unsigned',\n      tactic: 'speed',\n    });\n    const args = [\n      [6, 6030401],\n      [3, 3991]\n    ];\n    kernel.build.apply(kernel, args);\n    kernel.run.apply(kernel, args);\n    const result = kernel.renderOutput();\n    kernel.destroy(true);\n    // have we not got whole numbers for 6/3 or 6030401/3991\n    // add more here if others see this problem\n    return result[0] === 2 && result[1] === 1511;\n  }\n\n  static getIsSpeedTacticSupported() {\n    function kernelFunction(value) {\n      return value[this.thread.x];\n    }\n    const kernel = new this(kernelFunction.toString(), {\n      context: this.testContext,\n      canvas: this.testCanvas,\n      validate: false,\n      output: [4],\n      returnType: 'Number',\n      precision: 'unsigned',\n      tactic: 'speed',\n    });\n    const args = [\n      [0, 1, 2, 3]\n    ];\n    kernel.build.apply(kernel, args);\n    kernel.run.apply(kernel, args);\n    const result = kernel.renderOutput();\n    kernel.destroy(true);\n    return Math.round(result[0]) === 0 && Math.round(result[1]) === 1 && Math.round(result[2]) === 2 && Math.round(result[3]) === 3;\n  }\n\n  /**\n   * @abstract\n   */\n  static get testCanvas() {\n    throw new Error(`\"testCanvas\" not defined on ${ this.name }`);\n  }\n\n  /**\n   * @abstract\n   */\n  static get testContext() {\n    throw new Error(`\"testContext\" not defined on ${ this.name }`);\n  }\n\n  static getFeatures() {\n    const gl = this.testContext;\n    const isDrawBuffers = this.getIsDrawBuffers();\n    return Object.freeze({\n      isFloatRead: this.getIsFloatRead(),\n      isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n      isSpeedTacticSupported: this.getIsSpeedTacticSupported(),\n      isTextureFloat: this.getIsTextureFloat(),\n      isDrawBuffers,\n      kernelMap: isDrawBuffers,\n      channelCount: this.getChannelCount(),\n      maxTextureSize: this.getMaxTextureSize(),\n      lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),\n      lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),\n      mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),\n      mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),\n      highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),\n      highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT),\n    });\n  }\n\n  /**\n   * @abstract\n   */\n  static setupFeatureChecks() {\n    throw new Error(`\"setupFeatureChecks\" not defined on ${ this.name }`);\n  }\n\n  static getSignature(kernel, argumentTypes) {\n    return kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');\n  }\n\n  /**\n   * @desc Fix division by factor of 3 FP accuracy bug\n   * @param {Boolean} fix - should fix\n   */\n  setFixIntegerDivisionAccuracy(fix) {\n    this.fixIntegerDivisionAccuracy = fix;\n    return this;\n  }\n\n  /**\n   * @desc Toggle output mode\n   * @param {String} flag - 'single' or 'unsigned'\n   */\n  setPrecision(flag) {\n    this.precision = flag;\n    return this;\n  }\n\n  /**\n   * @desc Toggle texture output mode\n   * @param {Boolean} flag - true to enable floatTextures\n   * @deprecated\n   */\n  setFloatTextures(flag) {\n    utils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');\n    this.floatTextures = flag;\n    return this;\n  }\n\n  /**\n   * A highly readable very forgiving micro-parser for a glsl function that gets argument types\n   * @param {String} source\n   * @returns {{argumentTypes: String[], argumentNames: String[]}}\n   */\n  static nativeFunctionArguments(source) {\n    const argumentTypes = [];\n    const argumentNames = [];\n    const states = [];\n    const isStartingVariableName = /^[a-zA-Z_]/;\n    const isVariableChar = /[a-zA-Z_0-9]/;\n    let i = 0;\n    let argumentName = null;\n    let argumentType = null;\n    while (i < source.length) {\n      const char = source[i];\n      const nextChar = source[i + 1];\n      const state = states.length > 0 ? states[states.length - 1] : null;\n\n      // begin MULTI_LINE_COMMENT handling\n      if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {\n        states.push('MULTI_LINE_COMMENT');\n        i += 2;\n        continue;\n      } else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {\n        states.pop();\n        i += 2;\n        continue;\n      }\n      // end MULTI_LINE_COMMENT handling\n\n      // begin COMMENT handling\n      else if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {\n        states.push('COMMENT');\n        i += 2;\n        continue;\n      } else if (state === 'COMMENT' && char === '\\n') {\n        states.pop();\n        i++;\n        continue;\n      }\n      // end COMMENT handling\n\n      // being FUNCTION_ARGUMENTS handling\n      else if (state === null && char === '(') {\n        states.push('FUNCTION_ARGUMENTS');\n        i++;\n        continue;\n      } else if (state === 'FUNCTION_ARGUMENTS') {\n        if (char === ')') {\n          states.pop();\n          break;\n        }\n        if (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'float';\n          argumentName = '';\n          i += 6;\n          continue;\n        } else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'int';\n          argumentName = '';\n          i += 4;\n          continue;\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'vec2';\n          argumentName = '';\n          i += 5;\n          continue;\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'vec3';\n          argumentName = '';\n          i += 5;\n          continue;\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'vec4';\n          argumentName = '';\n          i += 5;\n          continue;\n        }\n      }\n      // end FUNCTION_ARGUMENTS handling\n\n      // begin DECLARE_VARIABLE handling\n      else if (state === 'DECLARE_VARIABLE') {\n        if (argumentName === '') {\n          if (char === ' ') {\n            i++;\n            continue;\n          }\n          if (!isStartingVariableName.test(char)) {\n            throw new Error('variable name is not expected string');\n          }\n        }\n        argumentName += char;\n        if (!isVariableChar.test(nextChar)) {\n          states.pop();\n          argumentNames.push(argumentName);\n          argumentTypes.push(typeMap[argumentType]);\n        }\n      }\n      // end DECLARE_VARIABLE handling\n\n      // Progress to next character\n      i++;\n    }\n    if (states.length > 0) {\n      throw new Error('GLSL function was not parsable');\n    }\n    return {\n      argumentNames,\n      argumentTypes,\n    };\n  }\n\n  static nativeFunctionReturnType(source) {\n    return typeMap[source.match(/int|float|vec[2-4]/)[0]];\n  }\n\n  static combineKernels(combinedKernel, lastKernel) {\n    combinedKernel.apply(null, arguments);\n    const {\n      texSize,\n      context,\n      threadDim\n    } = lastKernel.texSize;\n    let result;\n    if (lastKernel.precision === 'single') {\n      const w = texSize[0];\n      const h = Math.ceil(texSize[1] / 4);\n      result = new Float32Array(w * h * 4 * 4);\n      context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);\n    } else {\n      const bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n      context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);\n      result = new Float32Array(bytes.buffer);\n    }\n\n    result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n\n    if (lastKernel.output.length === 1) {\n      return result;\n    } else if (lastKernel.output.length === 2) {\n      return utils.splitArray(result, lastKernel.output[0]);\n    } else if (lastKernel.output.length === 3) {\n      const cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);\n      return cube.map(function(x) {\n        return utils.splitArray(x, lastKernel.output[0]);\n      });\n    }\n  }\n\n  constructor(source, settings) {\n    super(source, settings);\n    this.transferValues = null;\n    this.formatValues = null;\n    /**\n     *\n     * @type {Texture}\n     */\n    this.TextureConstructor = null;\n    this.renderOutput = null;\n    this.renderRawOutput = null;\n    this.texSize = null;\n    this.translatedSource = null;\n    this.compiledFragmentShader = null;\n    this.compiledVertexShader = null;\n    this.switchingKernels = null;\n    this._textureSwitched = null;\n    this._mappedTextureSwitched = null;\n  }\n\n  checkTextureSize() {\n    const { features } = this.constructor;\n    if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {\n      throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${features.maxTextureSize},${features.maxTextureSize}]`);\n    }\n  }\n\n  translateSource() {\n    throw new Error(`\"translateSource\" not defined on ${this.constructor.name}`);\n  }\n\n  /**\n   * Picks a render strategy for the now finally parsed kernel\n   * @param args\n   * @return {null|KernelOutput}\n   */\n  pickRenderStrategy(args) {\n    if (this.graphical) {\n      this.renderRawOutput = this.readPackedPixelsToUint8Array;\n      this.transferValues = (pixels) => pixels;\n      this.TextureConstructor = GLTextureGraphical;\n      return null;\n    }\n    if (this.precision === 'unsigned') {\n      this.renderRawOutput = this.readPackedPixelsToUint8Array;\n      this.transferValues = this.readPackedPixelsToFloat32Array;\n      if (this.pipeline) {\n        this.renderOutput = this.renderTexture;\n        if (this.subKernels !== null) {\n          this.renderKernels = this.renderKernelsToTextures;\n        }\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer':\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureUnsigned3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureUnsigned2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureUnsigned;\n              return null;\n            }\n            case 'Array(2)':\n            case 'Array(3)':\n            case 'Array(4)':\n              return this.requestFallback(args);\n        }\n      } else {\n        if (this.subKernels !== null) {\n          this.renderKernels = this.renderKernelsToArrays;\n        }\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer':\n            this.renderOutput = this.renderValues;\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureUnsigned3D;\n              this.formatValues = utils.erect3DPackedFloat;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureUnsigned2D;\n              this.formatValues = utils.erect2DPackedFloat;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureUnsigned;\n              this.formatValues = utils.erectPackedFloat;\n              return null;\n            }\n            case 'Array(2)':\n            case 'Array(3)':\n            case 'Array(4)':\n              return this.requestFallback(args);\n        }\n      }\n    } else if (this.precision === 'single') {\n      this.renderRawOutput = this.readFloatPixelsToFloat32Array;\n      this.transferValues = this.readFloatPixelsToFloat32Array;\n      if (this.pipeline) {\n        this.renderOutput = this.renderTexture;\n        if (this.subKernels !== null) {\n          this.renderKernels = this.renderKernelsToTextures;\n        }\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer': {\n            if (this.optimizeFloatMemory) {\n              if (this.output[2] > 0) {\n                this.TextureConstructor = GLTextureMemoryOptimized3D;\n                return null;\n              } else if (this.output[1] > 0) {\n                this.TextureConstructor = GLTextureMemoryOptimized2D;\n                return null;\n              } else {\n                this.TextureConstructor = GLTextureMemoryOptimized;\n                return null;\n              }\n            } else {\n              if (this.output[2] > 0) {\n                this.TextureConstructor = GLTextureFloat3D;\n                return null;\n              } else if (this.output[1] > 0) {\n                this.TextureConstructor = GLTextureFloat2D;\n                return null;\n              } else {\n                this.TextureConstructor = GLTextureFloat;\n                return null;\n              }\n            }\n          }\n          case 'Array(2)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray2Float3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray2Float2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray2Float;\n              return null;\n            }\n          }\n          case 'Array(3)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray3Float3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray3Float2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray3Float;\n              return null;\n            }\n          }\n          case 'Array(4)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray4Float3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray4Float2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray4Float;\n              return null;\n            }\n          }\n        }\n      }\n      this.renderOutput = this.renderValues;\n      if (this.subKernels !== null) {\n        this.renderKernels = this.renderKernelsToArrays;\n      }\n      if (this.optimizeFloatMemory) {\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureMemoryOptimized3D;\n              this.formatValues = utils.erectMemoryOptimized3DFloat;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureMemoryOptimized2D;\n              this.formatValues = utils.erectMemoryOptimized2DFloat;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureMemoryOptimized;\n              this.formatValues = utils.erectMemoryOptimizedFloat;\n              return null;\n            }\n          }\n          case 'Array(2)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray2Float3D;\n              this.formatValues = utils.erect3DArray2;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray2Float2D;\n              this.formatValues = utils.erect2DArray2;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray2Float;\n              this.formatValues = utils.erectArray2;\n              return null;\n            }\n          }\n          case 'Array(3)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray3Float3D;\n              this.formatValues = utils.erect3DArray3;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray3Float2D;\n              this.formatValues = utils.erect2DArray3;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray3Float;\n              this.formatValues = utils.erectArray3;\n              return null;\n            }\n          }\n          case 'Array(4)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray4Float3D;\n              this.formatValues = utils.erect3DArray4;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray4Float2D;\n              this.formatValues = utils.erect2DArray4;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray4Float;\n              this.formatValues = utils.erectArray4;\n              return null;\n            }\n          }\n        }\n      } else {\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureFloat3D;\n              this.formatValues = utils.erect3DFloat;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureFloat2D;\n              this.formatValues = utils.erect2DFloat;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureFloat;\n              this.formatValues = utils.erectFloat;\n              return null;\n            }\n          }\n          case 'Array(2)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray2Float3D;\n              this.formatValues = utils.erect3DArray2;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray2Float2D;\n              this.formatValues = utils.erect2DArray2;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray2Float;\n              this.formatValues = utils.erectArray2;\n              return null;\n            }\n          }\n          case 'Array(3)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray3Float3D;\n              this.formatValues = utils.erect3DArray3;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray3Float2D;\n              this.formatValues = utils.erect2DArray3;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray3Float;\n              this.formatValues = utils.erectArray3;\n              return null;\n            }\n          }\n          case 'Array(4)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray4Float3D;\n              this.formatValues = utils.erect3DArray4;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray4Float2D;\n              this.formatValues = utils.erect2DArray4;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray4Float;\n              this.formatValues = utils.erectArray4;\n              return null;\n            }\n          }\n        }\n      }\n    } else {\n      throw new Error(`unhandled precision of \"${this.precision}\"`);\n    }\n\n    throw new Error(`unhandled return type \"${this.returnType}\"`);\n  }\n\n  /**\n   * @abstract\n   * @returns String\n   */\n  getKernelString() {\n    throw new Error(`abstract method call`);\n  }\n\n  getMainResultTexture() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Float':\n      case 'Integer':\n      case 'Number':\n        return this.getMainResultNumberTexture();\n      case 'Array(2)':\n        return this.getMainResultArray2Texture();\n      case 'Array(3)':\n        return this.getMainResultArray3Texture();\n      case 'Array(4)':\n        return this.getMainResultArray4Texture();\n      default:\n        throw new Error(`unhandled returnType type ${ this.returnType }`);\n    }\n  }\n\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultKernelNumberTexture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultSubKernelNumberTexture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultKernelArray2Texture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultSubKernelArray2Texture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultKernelArray3Texture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultSubKernelArray3Texture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultKernelArray4Texture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultSubKernelArray4Texture() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultGraphical() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultMemoryOptimizedFloats() {\n    throw new Error(`abstract method call`);\n  }\n  /**\n   * @abstract\n   * @returns String[]\n   */\n  getMainResultPackedPixels() {\n    throw new Error(`abstract method call`);\n  }\n\n  getMainResultString() {\n    if (this.graphical) {\n      return this.getMainResultGraphical();\n    } else if (this.precision === 'single') {\n      if (this.optimizeFloatMemory) {\n        return this.getMainResultMemoryOptimizedFloats();\n      }\n      return this.getMainResultTexture();\n    } else {\n      return this.getMainResultPackedPixels();\n    }\n  }\n\n  getMainResultNumberTexture() {\n    return utils.linesToString(this.getMainResultKernelNumberTexture()) +\n      utils.linesToString(this.getMainResultSubKernelNumberTexture());\n  }\n\n  getMainResultArray2Texture() {\n    return utils.linesToString(this.getMainResultKernelArray2Texture()) +\n      utils.linesToString(this.getMainResultSubKernelArray2Texture());\n  }\n\n  getMainResultArray3Texture() {\n    return utils.linesToString(this.getMainResultKernelArray3Texture()) +\n      utils.linesToString(this.getMainResultSubKernelArray3Texture());\n  }\n\n  getMainResultArray4Texture() {\n    return utils.linesToString(this.getMainResultKernelArray4Texture()) +\n      utils.linesToString(this.getMainResultSubKernelArray4Texture());\n  }\n\n  /**\n   *\n   * @return {string}\n   */\n  getFloatTacticDeclaration() {\n    const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);\n    return `precision ${variablePrecision} float;\\n`;\n  }\n\n  /**\n   *\n   * @return {string}\n   */\n  getIntTacticDeclaration() {\n    return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic, true)} int;\\n`;\n  }\n\n  /**\n   *\n   * @return {string}\n   */\n  getSampler2DTacticDeclaration() {\n    return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2D;\\n`;\n  }\n\n  getSampler2DArrayTacticDeclaration() {\n    return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2DArray;\\n`;\n  }\n\n  renderTexture() {\n    return this.immutable ? this.texture.clone() : this.texture;\n  }\n  readPackedPixelsToUint8Array() {\n    if (this.precision !== 'unsigned') throw new Error('Requires this.precision to be \"unsigned\"');\n    const {\n      texSize,\n      context: gl\n    } = this;\n    const result = new Uint8Array(texSize[0] * texSize[1] * 4);\n    gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n    return result;\n  }\n\n  readPackedPixelsToFloat32Array() {\n    return new Float32Array(this.readPackedPixelsToUint8Array().buffer);\n  }\n\n  readFloatPixelsToFloat32Array() {\n    if (this.precision !== 'single') throw new Error('Requires this.precision to be \"single\"');\n    const {\n      texSize,\n      context: gl\n    } = this;\n    const w = texSize[0];\n    const h = texSize[1];\n    const result = new Float32Array(w * h * 4);\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n    return result;\n  }\n\n  /**\n   *\n   * @param {Boolean} [flip]\n   * @return {Uint8ClampedArray}\n   */\n  getPixels(flip) {\n    const {\n      context: gl,\n      output\n    } = this;\n    const [width, height] = output;\n    const pixels = new Uint8Array(width * height * 4);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    // flipped by default, so invert\n    return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);\n  }\n\n  renderKernelsToArrays() {\n    const result = {\n      result: this.renderOutput(),\n    };\n    for (let i = 0; i < this.subKernels.length; i++) {\n      result[this.subKernels[i].property] = this.mappedTextures[i].toArray();\n    }\n    return result;\n  }\n\n  renderKernelsToTextures() {\n    const result = {\n      result: this.renderOutput(),\n    };\n    if (this.immutable) {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        result[this.subKernels[i].property] = this.mappedTextures[i].clone();\n      }\n    } else {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        result[this.subKernels[i].property] = this.mappedTextures[i];\n      }\n    }\n    return result;\n  }\n\n  resetSwitchingKernels() {\n    const existingValue = this.switchingKernels;\n    this.switchingKernels = null;\n    return existingValue;\n  }\n\n  setOutput(output) {\n    const newOutput = this.toKernelOutput(output);\n    if (this.program) {\n      if (!this.dynamicOutput) {\n        throw new Error('Resizing a kernel with dynamicOutput: false is not possible');\n      }\n      const newThreadDim = [newOutput[0], newOutput[1] || 1, newOutput[2] || 1];\n      const newTexSize = utils.getKernelTextureSize({\n        optimizeFloatMemory: this.optimizeFloatMemory,\n        precision: this.precision,\n      }, newThreadDim);\n      const oldTexSize = this.texSize;\n      if (oldTexSize) {\n        const oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);\n        const newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);\n        if (oldPrecision !== newPrecision) {\n          if (this.debug) {\n            console.warn('Precision requirement changed, asking GPU instance to recompile');\n          }\n          this.switchKernels({\n            type: 'outputPrecisionMismatch',\n            precision: newPrecision,\n            needed: output\n          });\n          return;\n        }\n      }\n      this.output = newOutput;\n      this.threadDim = newThreadDim;\n      this.texSize = newTexSize;\n      const { context: gl } = this;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n      this.updateMaxTexSize();\n      this.framebuffer.width = this.texSize[0];\n      this.framebuffer.height = this.texSize[1];\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n      this.canvas.width = this.maxTexSize[0];\n      this.canvas.height = this.maxTexSize[1];\n      if (this.texture) {\n        this.texture.delete();\n      }\n      this.texture = null;\n      this._setupOutputTexture();\n      if (this.mappedTextures && this.mappedTextures.length > 0) {\n        for (let i = 0; i < this.mappedTextures.length; i++) {\n          this.mappedTextures[i].delete();\n        }\n        this.mappedTextures = null;\n        this._setupSubOutputTextures();\n      }\n    } else {\n      this.output = newOutput;\n    }\n    return this;\n  }\n  renderValues() {\n    return this.formatValues(\n      this.transferValues(),\n      this.output[0],\n      this.output[1],\n      this.output[2]\n    );\n  }\n  switchKernels(reason) {\n    if (this.switchingKernels) {\n      this.switchingKernels.push(reason);\n    } else {\n      this.switchingKernels = [reason];\n    }\n  }\n  getVariablePrecisionString(textureSize = this.texSize, tactic = this.tactic, isInt = false) {\n    if (!tactic) {\n      if (!this.constructor.features.isSpeedTacticSupported) return 'highp';\n      const low = this.constructor.features[isInt ? 'lowIntPrecision' : 'lowFloatPrecision'];\n      const medium = this.constructor.features[isInt ? 'mediumIntPrecision' : 'mediumFloatPrecision'];\n      const high = this.constructor.features[isInt ? 'highIntPrecision' : 'highFloatPrecision'];\n      const requiredSize = Math.log2(textureSize[0] * textureSize[1]);\n      if (requiredSize <= low.rangeMax) {\n        return 'lowp';\n      } else if (requiredSize <= medium.rangeMax) {\n        return 'mediump';\n      } else if (requiredSize <= high.rangeMax) {\n        return 'highp';\n      } else {\n        throw new Error(`The required size exceeds that of the ability of your system`);\n      }\n    }\n    switch (tactic) {\n      case 'speed':\n        return 'lowp';\n      case 'balanced':\n        return 'mediump';\n      case 'precision':\n        return 'highp';\n      default:\n        throw new Error(`Unknown tactic \"${tactic}\" use \"speed\", \"balanced\", \"precision\", or empty for auto`);\n    }\n  }\n\n  /**\n   *\n   * @param {WebGLKernelValue} kernelValue\n   * @param {GLTexture} arg\n   */\n  updateTextureArgumentRefs(kernelValue, arg) {\n    if (!this.immutable) return;\n    if (this.texture.texture === arg.texture) {\n      const { prevArg } = kernelValue;\n      if (prevArg) {\n        if (prevArg.texture._refs === 1) {\n          this.texture.delete();\n          this.texture = prevArg.clone();\n          this._textureSwitched = true;\n        }\n        prevArg.delete();\n      }\n      kernelValue.prevArg = arg.clone();\n    } else if (this.mappedTextures && this.mappedTextures.length > 0) {\n      const { mappedTextures } = this;\n      for (let i = 0; i < mappedTextures.length; i++) {\n        const mappedTexture = mappedTextures[i];\n        if (mappedTexture.texture === arg.texture) {\n          const { prevArg } = kernelValue;\n          if (prevArg) {\n            if (prevArg.texture._refs === 1) {\n              mappedTexture.delete();\n              mappedTextures[i] = prevArg.clone();\n              this._mappedTextureSwitched[i] = true;\n            }\n            prevArg.delete();\n          }\n          kernelValue.prevArg = arg.clone();\n          return;\n        }\n      }\n    }\n  }\n\n  onActivate(previousKernel) {\n    this._textureSwitched = true;\n    this.texture = previousKernel.texture;\n    if (this.mappedTextures) {\n      for (let i = 0; i < this.mappedTextures.length; i++) {\n        this._mappedTextureSwitched[i] = true;\n      }\n      this.mappedTextures = previousKernel.mappedTextures;\n    }\n  }\n\n  initCanvas() {}\n}\n\nconst typeMap = {\n  int: 'Integer',\n  float: 'Number',\n  vec2: 'Array(2)',\n  vec3: 'Array(3)',\n  vec4: 'Array(4)',\n};\n\nmodule.exports = {\n  GLKernel\n};", "const { utils } = require('../../utils');\nconst { FunctionNode } = require('../function-node');\n\n/**\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to toString its respective WebGL code\n */\nclass WebGLFunctionNode extends FunctionNode {\n  constructor(source, settings) {\n    super(source, settings);\n    if (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {\n      this.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;\n    }\n  }\n\n  astConditionalExpression(ast, retArr) {\n    if (ast.type !== 'ConditionalExpression') {\n      throw this.astErrorOutput('Not a conditional expression', ast);\n    }\n    const consequentType = this.getType(ast.consequent);\n    const alternateType = this.getType(ast.alternate);\n    // minification handling if void\n    if (consequentType === null && alternateType === null) {\n      retArr.push('if (');\n      this.astGeneric(ast.test, retArr);\n      retArr.push(') {');\n      this.astGeneric(ast.consequent, retArr);\n      retArr.push(';');\n      retArr.push('} else {');\n      this.astGeneric(ast.alternate, retArr);\n      retArr.push(';');\n      retArr.push('}');\n      return retArr;\n    }\n    retArr.push('(');\n    this.astGeneric(ast.test, retArr);\n    retArr.push('?');\n    this.astGeneric(ast.consequent, retArr);\n    retArr.push(':');\n    this.astGeneric(ast.alternate, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for to its *named function*\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astFunction(ast, retArr) {\n    // Setup function return type and name\n    if (this.isRootKernel) {\n      retArr.push('void');\n    } else {\n      // looking up return type, this is a little expensive, and can be avoided if returnType is set\n      if (!this.returnType) {\n        const lastReturn = this.findLastReturn();\n        if (lastReturn) {\n          this.returnType = this.getType(ast.body);\n          if (this.returnType === 'LiteralInteger') {\n            this.returnType = 'Number';\n          }\n        }\n      }\n\n      const { returnType } = this;\n      if (!returnType) {\n        retArr.push('void');\n      } else {\n        const type = typeMap[returnType];\n        if (!type) {\n          throw new Error(`unknown type ${returnType}`);\n        }\n        retArr.push(type);\n      }\n    }\n    retArr.push(' ');\n    retArr.push(this.name);\n    retArr.push('(');\n\n    if (!this.isRootKernel) {\n      // Arguments handling\n      for (let i = 0; i < this.argumentNames.length; ++i) {\n        const argumentName = this.argumentNames[i];\n\n        if (i > 0) {\n          retArr.push(', ');\n        }\n        let argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];\n        // The type is too loose ended, here we decide to solidify a type, lets go with float\n        if (!argumentType) {\n          throw this.astErrorOutput(`Unknown argument ${argumentName} type`, ast);\n        }\n        if (argumentType === 'LiteralInteger') {\n          this.argumentTypes[i] = argumentType = 'Number';\n        }\n        const type = typeMap[argumentType];\n        if (!type) {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        const name = utils.sanitizeName(argumentName);\n        if (type === 'sampler2D' || type === 'sampler2DArray') {\n          // mash needed arguments together, since now we have end to end inference\n          retArr.push(`${type} user_${name},ivec2 user_${name}Size,ivec3 user_${name}Dim`);\n        } else {\n          retArr.push(`${type} user_${name}`);\n        }\n      }\n    }\n\n    // Function opening\n    retArr.push(') {\\n');\n\n    // Body statement iteration\n    for (let i = 0; i < ast.body.body.length; ++i) {\n      this.astGeneric(ast.body.body[i], retArr);\n      retArr.push('\\n');\n    }\n\n    // Function closing\n    retArr.push('}\\n');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for to *return* statement\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astReturnStatement(ast, retArr) {\n    if (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);\n    this.pushState('skip-literal-correction');\n    const type = this.getType(ast.argument);\n    this.popState('skip-literal-correction');\n\n    const result = [];\n\n    if (!this.returnType) {\n      if (type === 'LiteralInteger' || type === 'Integer') {\n        this.returnType = 'Number';\n      } else {\n        this.returnType = type;\n      }\n    }\n\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Float':\n        switch (type) {\n          case 'Integer':\n            result.push('float(');\n            this.astGeneric(ast.argument, result);\n            result.push(')');\n            break;\n          case 'LiteralInteger':\n            this.castLiteralToFloat(ast.argument, result);\n\n            // Running astGeneric forces the LiteralInteger to pick a type, and here, if we are returning a float, yet\n            // the LiteralInteger has picked to be an integer because of constraints on it we cast it to float.\n            if (this.getType(ast) === 'Integer') {\n              result.unshift('float(');\n              result.push(')');\n            }\n            break;\n          default:\n            this.astGeneric(ast.argument, result);\n        }\n        break;\n      case 'Integer':\n        switch (type) {\n          case 'Float':\n          case 'Number':\n            this.castValueToInteger(ast.argument, result);\n            break;\n          case 'LiteralInteger':\n            this.castLiteralToInteger(ast.argument, result);\n            break;\n          default:\n            this.astGeneric(ast.argument, result);\n        }\n        break;\n      case 'Array(4)':\n      case 'Array(3)':\n      case 'Array(2)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n      case 'Input':\n        this.astGeneric(ast.argument, result);\n        break;\n      default:\n        throw this.astErrorOutput(`unhandled return type ${this.returnType}`, ast);\n    }\n\n    if (this.isRootKernel) {\n      retArr.push(`kernelResult = ${ result.join('') };`);\n      retArr.push('return;');\n    } else if (this.isSubKernel) {\n      retArr.push(`subKernelResult_${ this.name } = ${ result.join('') };`);\n      retArr.push(`return subKernelResult_${ this.name };`);\n    } else {\n      retArr.push(`return ${ result.join('') };`);\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *literal value*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n  astLiteral(ast, retArr) {\n    // Reject non numeric literals\n    if (isNaN(ast.value)) {\n      throw this.astErrorOutput(\n        'Non-numeric literal not supported : ' + ast.value,\n        ast\n      );\n    }\n\n    const key = this.astKey(ast);\n    if (Number.isInteger(ast.value)) {\n      if (this.isState('casting-to-integer') || this.isState('building-integer')) {\n        this.literalTypes[key] = 'Integer';\n        retArr.push(`${ast.value}`);\n      } else if (this.isState('casting-to-float') || this.isState('building-float')) {\n        this.literalTypes[key] = 'Number';\n        retArr.push(`${ast.value}.0`);\n      } else {\n        this.literalTypes[key] = 'Number';\n        retArr.push(`${ast.value}.0`);\n      }\n    } else if (this.isState('casting-to-integer') || this.isState('building-integer')) {\n      this.literalTypes[key] = 'Integer';\n      retArr.push(Math.round(ast.value));\n    } else {\n      this.literalTypes[key] = 'Number';\n      retArr.push(`${ast.value}`);\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *binary* expression\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astBinaryExpression(ast, retArr) {\n    if (this.checkAndUpconvertOperator(ast, retArr)) {\n      return retArr;\n    }\n\n    if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {\n      retArr.push('divWithIntCheck(');\n      this.pushState('building-float');\n      switch (this.getType(ast.left)) {\n        case 'Integer':\n          this.castValueToFloat(ast.left, retArr);\n          break;\n        case 'LiteralInteger':\n          this.castLiteralToFloat(ast.left, retArr);\n          break;\n        default:\n          this.astGeneric(ast.left, retArr);\n      }\n      retArr.push(', ');\n      switch (this.getType(ast.right)) {\n        case 'Integer':\n          this.castValueToFloat(ast.right, retArr);\n          break;\n        case 'LiteralInteger':\n          this.castLiteralToFloat(ast.right, retArr);\n          break;\n        default:\n          this.astGeneric(ast.right, retArr);\n      }\n      this.popState('building-float');\n      retArr.push(')');\n      return retArr;\n    }\n\n    retArr.push('(');\n    const leftType = this.getType(ast.left) || 'Number';\n    const rightType = this.getType(ast.right) || 'Number';\n    if (!leftType || !rightType) {\n      throw this.astErrorOutput(`Unhandled binary expression`, ast);\n    }\n    const key = leftType + ' & ' + rightType;\n    switch (key) {\n      case 'Integer & Integer':\n        this.pushState('building-integer');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-integer');\n        break;\n      case 'Number & Float':\n      case 'Float & Number':\n      case 'Float & Float':\n      case 'Number & Number':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-float');\n        break;\n      case 'LiteralInteger & LiteralInteger':\n        if (this.isState('casting-to-integer') || this.isState('building-integer')) {\n          this.pushState('building-integer');\n          this.astGeneric(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.astGeneric(ast.right, retArr);\n          this.popState('building-integer');\n        } else {\n          this.pushState('building-float');\n          this.castLiteralToFloat(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.castLiteralToFloat(ast.right, retArr);\n          this.popState('building-float');\n        }\n        break;\n\n      case 'Integer & Float':\n      case 'Integer & Number':\n        if (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {\n          // if right value is actually a float, don't loose that information, cast left to right rather than the usual right to left\n          if (!Number.isInteger(ast.right.value)) {\n            this.pushState('building-float');\n            this.castValueToFloat(ast.left, retArr);\n            retArr.push(operatorMap[ast.operator] || ast.operator);\n            this.astGeneric(ast.right, retArr);\n            this.popState('building-float');\n            break;\n          }\n        }\n        this.pushState('building-integer');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.pushState('casting-to-integer');\n        if (ast.right.type === 'Literal') {\n          const literalResult = [];\n          this.astGeneric(ast.right, literalResult);\n          const literalType = this.getType(ast.right);\n          if (literalType === 'Integer') {\n            retArr.push(literalResult.join(''));\n          } else {\n            throw this.astErrorOutput(`Unhandled binary expression with literal`, ast);\n          }\n        } else {\n          retArr.push('int(');\n          this.astGeneric(ast.right, retArr);\n          retArr.push(')');\n        }\n        this.popState('casting-to-integer');\n        this.popState('building-integer');\n        break;\n      case 'Integer & LiteralInteger':\n        this.pushState('building-integer');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castLiteralToInteger(ast.right, retArr);\n        this.popState('building-integer');\n        break;\n\n      case 'Number & Integer':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castValueToFloat(ast.right, retArr);\n        this.popState('building-float');\n        break;\n      case 'Float & LiteralInteger':\n      case 'Number & LiteralInteger':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castLiteralToFloat(ast.right, retArr);\n        this.popState('building-float');\n        break;\n      case 'LiteralInteger & Float':\n      case 'LiteralInteger & Number':\n        if (this.isState('casting-to-integer')) {\n          this.pushState('building-integer');\n          this.castLiteralToInteger(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.castValueToInteger(ast.right, retArr);\n          this.popState('building-integer');\n        } else {\n          this.pushState('building-float');\n          this.astGeneric(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.pushState('casting-to-float');\n          this.astGeneric(ast.right, retArr);\n          this.popState('casting-to-float');\n          this.popState('building-float');\n        }\n        break;\n      case 'LiteralInteger & Integer':\n        this.pushState('building-integer');\n        this.castLiteralToInteger(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-integer');\n        break;\n\n      case 'Boolean & Boolean':\n        this.pushState('building-boolean');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-boolean');\n        break;\n\n      case 'Float & Integer':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castValueToFloat(ast.right, retArr);\n        this.popState('building-float');\n        break;\n\n      default:\n        throw this.astErrorOutput(`Unhandled binary expression between ${key}`, ast);\n    }\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  checkAndUpconvertOperator(ast, retArr) {\n    const bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);\n    if (bitwiseResult) {\n      return bitwiseResult;\n    }\n    const upconvertableOperators = {\n      '%': this.fixIntegerDivisionAccuracy ? 'integerCorrectionModulo' : 'modulo',\n      '**': 'pow',\n    };\n    const foundOperator = upconvertableOperators[ast.operator];\n    if (!foundOperator) return null;\n    retArr.push(foundOperator);\n    retArr.push('(');\n    switch (this.getType(ast.left)) {\n      case 'Integer':\n        this.castValueToFloat(ast.left, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToFloat(ast.left, retArr);\n        break;\n      default:\n        this.astGeneric(ast.left, retArr);\n    }\n    retArr.push(',');\n    switch (this.getType(ast.right)) {\n      case 'Integer':\n        this.castValueToFloat(ast.right, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToFloat(ast.right, retArr);\n        break;\n      default:\n        this.astGeneric(ast.right, retArr);\n    }\n    retArr.push(')');\n    return retArr;\n  }\n\n  checkAndUpconvertBitwiseOperators(ast, retArr) {\n    const upconvertableOperators = {\n      '&': 'bitwiseAnd',\n      '|': 'bitwiseOr',\n      '^': 'bitwiseXOR',\n      '<<': 'bitwiseZeroFillLeftShift',\n      '>>': 'bitwiseSignedRightShift',\n      '>>>': 'bitwiseZeroFillRightShift',\n    };\n    const foundOperator = upconvertableOperators[ast.operator];\n    if (!foundOperator) return null;\n    retArr.push(foundOperator);\n    retArr.push('(');\n    const leftType = this.getType(ast.left);\n    switch (leftType) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(ast.left, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(ast.left, retArr);\n        break;\n      default:\n        this.astGeneric(ast.left, retArr);\n    }\n    retArr.push(',');\n    const rightType = this.getType(ast.right);\n    switch (rightType) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(ast.right, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(ast.right, retArr);\n        break;\n      default:\n        this.astGeneric(ast.right, retArr);\n    }\n    retArr.push(')');\n    return retArr;\n  }\n\n  checkAndUpconvertBitwiseUnary(ast, retArr) {\n    const upconvertableOperators = {\n      '~': 'bitwiseNot',\n    };\n    const foundOperator = upconvertableOperators[ast.operator];\n    if (!foundOperator) return null;\n    retArr.push(foundOperator);\n    retArr.push('(');\n    switch (this.getType(ast.argument)) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(ast.argument, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(ast.argument, retArr);\n        break;\n      default:\n        this.astGeneric(ast.argument, retArr);\n    }\n    retArr.push(')');\n    return retArr;\n  }\n\n  /**\n   *\n   * @param {Object} ast\n   * @param {Array} retArr\n   * @return {String[]}\n   */\n  castLiteralToInteger(ast, retArr) {\n    this.pushState('casting-to-integer');\n    this.astGeneric(ast, retArr);\n    this.popState('casting-to-integer');\n    return retArr;\n  }\n\n  /**\n   *\n   * @param {Object} ast\n   * @param {Array} retArr\n   * @return {String[]}\n   */\n  castLiteralToFloat(ast, retArr) {\n    this.pushState('casting-to-float');\n    this.astGeneric(ast, retArr);\n    this.popState('casting-to-float');\n    return retArr;\n  }\n\n  /**\n   *\n   * @param {Object} ast\n   * @param {Array} retArr\n   * @return {String[]}\n   */\n  castValueToInteger(ast, retArr) {\n    this.pushState('casting-to-integer');\n    retArr.push('int(');\n    this.astGeneric(ast, retArr);\n    retArr.push(')');\n    this.popState('casting-to-integer');\n    return retArr;\n  }\n\n  /**\n   *\n   * @param {Object} ast\n   * @param {Array} retArr\n   * @return {String[]}\n   */\n  castValueToFloat(ast, retArr) {\n    this.pushState('casting-to-float');\n    retArr.push('float(');\n    this.astGeneric(ast, retArr);\n    retArr.push(')');\n    this.popState('casting-to-float');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *identifier* expression\n   * @param {Object} idtNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astIdentifierExpression(idtNode, retArr) {\n    if (idtNode.type !== 'Identifier') {\n      throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n    }\n\n    const type = this.getType(idtNode);\n\n    const name = utils.sanitizeName(idtNode.name);\n    if (idtNode.name === 'Infinity') {\n      // https://stackoverflow.com/a/47543127/1324039\n      retArr.push('3.402823466e+38');\n    } else if (type === 'Boolean') {\n      if (this.argumentNames.indexOf(name) > -1) {\n        retArr.push(`bool(user_${name})`);\n      } else {\n        retArr.push(`user_${name}`);\n      }\n    } else {\n      retArr.push(`user_${name}`);\n    }\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *for-loop* expression\n   * @param {Object} forNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed webgl string\n   */\n  astForStatement(forNode, retArr) {\n    if (forNode.type !== 'ForStatement') {\n      throw this.astErrorOutput('Invalid for statement', forNode);\n    }\n\n    const initArr = [];\n    const testArr = [];\n    const updateArr = [];\n    const bodyArr = [];\n    let isSafe = null;\n\n    if (forNode.init) {\n      const { declarations } = forNode.init;\n      if (declarations.length > 1) {\n        isSafe = false;\n      }\n      this.astGeneric(forNode.init, initArr);\n      for (let i = 0; i < declarations.length; i++) {\n        if (declarations[i].init && declarations[i].init.type !== 'Literal') {\n          isSafe = false;\n        }\n      }\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.test) {\n      this.astGeneric(forNode.test, testArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.update) {\n      this.astGeneric(forNode.update, updateArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.body) {\n      this.pushState('loop-body');\n      this.astGeneric(forNode.body, bodyArr);\n      this.popState('loop-body');\n    }\n\n    // have all parts, now make them safe\n    if (isSafe === null) {\n      isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n    }\n\n    if (isSafe) {\n      const initString = initArr.join('');\n      const initNeedsSemiColon = initString[initString.length - 1] !== ';';\n      retArr.push(`for (${initString}${initNeedsSemiColon ? ';' : ''}${testArr.join('')};${updateArr.join('')}){\\n`);\n      retArr.push(bodyArr.join(''));\n      retArr.push('}\\n');\n    } else {\n      const iVariableName = this.getInternalVariableName('safeI');\n      if (initArr.length > 0) {\n        retArr.push(initArr.join(''), '\\n');\n      }\n      retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n      if (testArr.length > 0) {\n        retArr.push(`if (!${testArr.join('')}) break;\\n`);\n      }\n      retArr.push(bodyArr.join(''));\n      retArr.push(`\\n${updateArr.join('')};`);\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *while* loop\n   * @param {Object} whileNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed webgl string\n   */\n  astWhileStatement(whileNode, retArr) {\n    if (whileNode.type !== 'WhileStatement') {\n      throw this.astErrorOutput('Invalid while statement', whileNode);\n    }\n\n    const iVariableName = this.getInternalVariableName('safeI');\n    retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n    retArr.push('if (!');\n    this.astGeneric(whileNode.test, retArr);\n    retArr.push(') break;\\n');\n    this.astGeneric(whileNode.body, retArr);\n    retArr.push('}\\n');\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *do while* loop\n   * @param {Object} doWhileNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the parsed webgl string\n   */\n  astDoWhileStatement(doWhileNode, retArr) {\n    if (doWhileNode.type !== 'DoWhileStatement') {\n      throw this.astErrorOutput('Invalid while statement', doWhileNode);\n    }\n\n    const iVariableName = this.getInternalVariableName('safeI');\n    retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n    this.astGeneric(doWhileNode.body, retArr);\n    retArr.push('if (!');\n    this.astGeneric(doWhileNode.test, retArr);\n    retArr.push(') break;\\n');\n    retArr.push('}\\n');\n\n    return retArr;\n  }\n\n\n  /**\n   * @desc Parses the abstract syntax tree for *Assignment* Expression\n   * @param {Object} assNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astAssignmentExpression(assNode, retArr) {\n    // TODO: casting needs implemented here\n    if (assNode.operator === '%=') {\n      this.astGeneric(assNode.left, retArr);\n      retArr.push('=');\n      retArr.push('mod(');\n      this.astGeneric(assNode.left, retArr);\n      retArr.push(',');\n      this.astGeneric(assNode.right, retArr);\n      retArr.push(')');\n    } else if (assNode.operator === '**=') {\n      this.astGeneric(assNode.left, retArr);\n      retArr.push('=');\n      retArr.push('pow(');\n      this.astGeneric(assNode.left, retArr);\n      retArr.push(',');\n      this.astGeneric(assNode.right, retArr);\n      retArr.push(')');\n    } else {\n      const leftType = this.getType(assNode.left);\n      const rightType = this.getType(assNode.right);\n      this.astGeneric(assNode.left, retArr);\n      retArr.push(assNode.operator);\n      if (leftType !== 'Integer' && rightType === 'Integer') {\n        retArr.push('float(');\n        this.astGeneric(assNode.right, retArr);\n        retArr.push(')');\n      } else {\n        this.astGeneric(assNode.right, retArr);\n      }\n      return retArr;\n    }\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Block* statement\n   * @param {Object} bNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astBlockStatement(bNode, retArr) {\n    if (this.isState('loop-body')) {\n      this.pushState('block-body'); // this prevents recursive removal of braces\n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      this.popState('block-body');\n    } else {\n      retArr.push('{\\n');\n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\n   * @param {Object} varDecNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astVariableDeclaration(varDecNode, retArr) {\n    const declarations = varDecNode.declarations;\n    if (!declarations || !declarations[0] || !declarations[0].init) {\n      throw this.astErrorOutput('Unexpected expression', varDecNode);\n    }\n    const result = [];\n    let lastType = null;\n    const declarationSets = [];\n    let declarationSet = [];\n    for (let i = 0; i < declarations.length; i++) {\n      const declaration = declarations[i];\n      const init = declaration.init;\n      const info = this.getDeclaration(declaration.id);\n      const actualType = this.getType(declaration.init);\n      let type = actualType;\n      if (type === 'LiteralInteger') {\n        if (info.suggestedType === 'Integer') {\n          type = 'Integer';\n        } else {\n          // We had the choice to go either float or int, choosing float\n          type = 'Number';\n        }\n      }\n      const markupType = typeMap[type];\n      if (!markupType) {\n        throw this.astErrorOutput(`Markup type ${ type } not handled`, varDecNode);\n      }\n      const declarationResult = [];\n      if (actualType === 'Integer' && type === 'Integer') {\n        // Since we are assigning to a float, ensure valueType is reset to that\n        info.valueType = 'Number';\n        if (i === 0 || lastType === null) {\n          declarationResult.push('float ');\n        } else if (type !== lastType) {\n          throw new Error('Unhandled declaration');\n        }\n        lastType = type;\n        declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);\n        declarationResult.push('float(');\n        this.astGeneric(init, declarationResult);\n        declarationResult.push(')');\n      } else {\n        // Since we are assigning to a float, ensure valueType is reset to that\n        info.valueType = type;\n        if (i === 0 || lastType === null) {\n          declarationResult.push(`${markupType} `);\n        } else if (type !== lastType) {\n          declarationSets.push(declarationSet.join(','));\n          declarationSet = [];\n          declarationResult.push(`${markupType} `);\n        }\n        lastType = type;\n        declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);\n        if (actualType === 'Number' && type === 'Integer') {\n          if (init.left && init.left.type === 'Literal') {\n            this.astGeneric(init, declarationResult);\n          } else {\n            declarationResult.push('int(');\n            this.astGeneric(init, declarationResult);\n            declarationResult.push(')');\n          }\n        } else if (actualType === 'LiteralInteger' && type === 'Integer') {\n          this.castLiteralToInteger(init, declarationResult);\n        } else {\n          this.astGeneric(init, declarationResult);\n        }\n      }\n      declarationSet.push(declarationResult.join(''));\n    }\n\n    if (declarationSet.length > 0) {\n      declarationSets.push(declarationSet.join(','));\n    }\n\n    result.push(declarationSets.join(';'));\n\n    retArr.push(result.join(''));\n    retArr.push(';');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *If* Statement\n   * @param {Object} ifNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astIfStatement(ifNode, retArr) {\n    retArr.push('if (');\n    this.astGeneric(ifNode.test, retArr);\n    retArr.push(')');\n    if (ifNode.consequent.type === 'BlockStatement') {\n      this.astGeneric(ifNode.consequent, retArr);\n    } else {\n      retArr.push(' {\\n');\n      this.astGeneric(ifNode.consequent, retArr);\n      retArr.push('\\n}\\n');\n    }\n\n    if (ifNode.alternate) {\n      retArr.push('else ');\n      if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {\n        this.astGeneric(ifNode.alternate, retArr);\n      } else {\n        retArr.push(' {\\n');\n        this.astGeneric(ifNode.alternate, retArr);\n        retArr.push('\\n}\\n');\n      }\n    }\n    return retArr;\n  }\n\n  astSwitchStatement(ast, retArr) {\n    if (ast.type !== 'SwitchStatement') {\n      throw this.astErrorOutput('Invalid switch statement', ast);\n    }\n    const { discriminant, cases } = ast;\n    const type = this.getType(discriminant);\n    const varName = `switchDiscriminant${this.astKey(ast, '_')}`;\n    switch (type) {\n      case 'Float':\n      case 'Number':\n        retArr.push(`float ${varName} = `);\n        this.astGeneric(discriminant, retArr);\n        retArr.push(';\\n');\n        break;\n      case 'Integer':\n        retArr.push(`int ${varName} = `);\n        this.astGeneric(discriminant, retArr);\n        retArr.push(';\\n');\n        break;\n    }\n    // switch with just a default:\n    if (cases.length === 1 && !cases[0].test) {\n      this.astGeneric(cases[0].consequent, retArr);\n      return retArr;\n    }\n\n    // regular switches:\n    let fallingThrough = false;\n    let defaultResult = [];\n    let movingDefaultToEnd = false;\n    let pastFirstIf = false;\n    for (let i = 0; i < cases.length; i++) {\n      // default\n      if (!cases[i].test) {\n        if (cases.length > i + 1) {\n          movingDefaultToEnd = true;\n          this.astGeneric(cases[i].consequent, defaultResult);\n          continue;\n        } else {\n          retArr.push(' else {\\n');\n        }\n      } else {\n        // all others\n        if (i === 0 || !pastFirstIf) {\n          pastFirstIf = true;\n          retArr.push(`if (${varName} == `);\n        } else {\n          if (fallingThrough) {\n            retArr.push(`${varName} == `);\n            fallingThrough = false;\n          } else {\n            retArr.push(` else if (${varName} == `);\n          }\n        }\n        if (type === 'Integer') {\n          const testType = this.getType(cases[i].test);\n          switch (testType) {\n            case 'Number':\n            case 'Float':\n              this.castValueToInteger(cases[i].test, retArr);\n              break;\n            case 'LiteralInteger':\n              this.castLiteralToInteger(cases[i].test, retArr);\n              break;\n          }\n        } else if (type === 'Float') {\n          const testType = this.getType(cases[i].test);\n          switch (testType) {\n            case 'LiteralInteger':\n              this.castLiteralToFloat(cases[i].test, retArr);\n              break;\n            case 'Integer':\n              this.castValueToFloat(cases[i].test, retArr);\n              break;\n          }\n        } else {\n          throw new Error('unhanlded');\n        }\n        if (!cases[i].consequent || cases[i].consequent.length === 0) {\n          fallingThrough = true;\n          retArr.push(' || ');\n          continue;\n        }\n        retArr.push(`) {\\n`);\n      }\n      this.astGeneric(cases[i].consequent, retArr);\n      retArr.push('\\n}');\n    }\n    if (movingDefaultToEnd) {\n      retArr.push(' else {');\n      retArr.push(defaultResult.join(''));\n      retArr.push('}');\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *This* expression\n   * @param {Object} tNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astThisExpression(tNode, retArr) {\n    retArr.push('this');\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Member* Expression\n   * @param {Object} mNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astMemberExpression(mNode, retArr) {\n    const {\n      property,\n      name,\n      signature,\n      origin,\n      type,\n      xProperty,\n      yProperty,\n      zProperty\n    } = this.getMemberExpressionDetails(mNode);\n    switch (signature) {\n      case 'value.thread.value':\n      case 'this.thread.value':\n        if (name !== 'x' && name !== 'y' && name !== 'z') {\n          throw this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);\n        }\n        retArr.push(`threadId.${name}`);\n        return retArr;\n      case 'this.output.value':\n        if (this.dynamicOutput) {\n          switch (name) {\n            case 'x':\n              if (this.isState('casting-to-float')) {\n                retArr.push('float(uOutputDim.x)');\n              } else {\n                retArr.push('uOutputDim.x');\n              }\n              break;\n            case 'y':\n              if (this.isState('casting-to-float')) {\n                retArr.push('float(uOutputDim.y)');\n              } else {\n                retArr.push('uOutputDim.y');\n              }\n              break;\n            case 'z':\n              if (this.isState('casting-to-float')) {\n                retArr.push('float(uOutputDim.z)');\n              } else {\n                retArr.push('uOutputDim.z');\n              }\n              break;\n            default:\n              throw this.astErrorOutput('Unexpected expression', mNode);\n          }\n        } else {\n          switch (name) {\n            case 'x':\n              if (this.isState('casting-to-integer')) {\n                retArr.push(this.output[0]);\n              } else {\n                retArr.push(this.output[0], '.0');\n              }\n              break;\n            case 'y':\n              if (this.isState('casting-to-integer')) {\n                retArr.push(this.output[1]);\n              } else {\n                retArr.push(this.output[1], '.0');\n              }\n              break;\n            case 'z':\n              if (this.isState('casting-to-integer')) {\n                retArr.push(this.output[2]);\n              } else {\n                retArr.push(this.output[2], '.0');\n              }\n              break;\n            default:\n              throw this.astErrorOutput('Unexpected expression', mNode);\n          }\n        }\n        return retArr;\n      case 'value':\n        throw this.astErrorOutput('Unexpected expression', mNode);\n      case 'value[]':\n      case 'value[][]':\n      case 'value[][][]':\n      case 'value[][][][]':\n      case 'value.value':\n        if (origin === 'Math') {\n          retArr.push(Math[name]);\n          return retArr;\n        }\n        const cleanName = utils.sanitizeName(name);\n        switch (property) {\n          case 'r':\n            retArr.push(`user_${ cleanName }.r`);\n            return retArr;\n          case 'g':\n            retArr.push(`user_${ cleanName }.g`);\n            return retArr;\n          case 'b':\n            retArr.push(`user_${ cleanName }.b`);\n            return retArr;\n          case 'a':\n            retArr.push(`user_${ cleanName }.a`);\n            return retArr;\n        }\n        break;\n      case 'this.constants.value':\n        if (typeof xProperty === 'undefined') {\n          switch (type) {\n            case 'Array(2)':\n            case 'Array(3)':\n            case 'Array(4)':\n              retArr.push(`constants_${ utils.sanitizeName(name) }`);\n              return retArr;\n          }\n        }\n        case 'this.constants.value[]':\n        case 'this.constants.value[][]':\n        case 'this.constants.value[][][]':\n        case 'this.constants.value[][][][]':\n          break;\n        case 'fn()[]':\n          this.astCallExpression(mNode.object, retArr);\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(property));\n          retArr.push(']');\n          return retArr;\n        case 'fn()[][]':\n          this.astCallExpression(mNode.object.object, retArr);\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(mNode.object.property));\n          retArr.push(']');\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(mNode.property));\n          retArr.push(']');\n          return retArr;\n        case '[][]':\n          this.astArrayExpression(mNode.object, retArr);\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(property));\n          retArr.push(']');\n          return retArr;\n        default:\n          throw this.astErrorOutput('Unexpected expression', mNode);\n    }\n\n    if (mNode.computed === false) {\n      // handle simple types\n      switch (type) {\n        case 'Number':\n        case 'Integer':\n        case 'Float':\n        case 'Boolean':\n          retArr.push(`${origin}_${utils.sanitizeName(name)}`);\n          return retArr;\n      }\n    }\n\n    // handle more complex types\n    // argument may have come from a parent\n    const markupName = `${origin}_${utils.sanitizeName(name)}`;\n\n    switch (type) {\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n        // Get from local vec4\n        this.astGeneric(mNode.object, retArr);\n        retArr.push('[');\n        retArr.push(this.memberExpressionPropertyMarkup(xProperty));\n        retArr.push(']');\n        break;\n      case 'HTMLImageArray':\n        retArr.push(`getImage3D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(1)':\n        retArr.push(`getFloatFromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Array1D(2)':\n      case 'Array2D(2)':\n      case 'Array3D(2)':\n        retArr.push(`getMemoryOptimizedVec2(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(2)':\n        retArr.push(`getVec2FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Array1D(3)':\n      case 'Array2D(3)':\n      case 'Array3D(3)':\n        retArr.push(`getMemoryOptimizedVec3(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(3)':\n        retArr.push(`getVec3FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Array1D(4)':\n      case 'Array2D(4)':\n      case 'Array3D(4)':\n        retArr.push(`getMemoryOptimizedVec4(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(4)':\n      case 'HTMLCanvas':\n      case 'OffscreenCanvas':\n      case 'HTMLImage':\n      case 'ImageBitmap':\n      case 'ImageData':\n      case 'HTMLVideo':\n        retArr.push(`getVec4FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'NumberTexture':\n      case 'Array':\n      case 'Array2D':\n      case 'Array3D':\n      case 'Array4D':\n      case 'Input':\n      case 'Number':\n      case 'Float':\n      case 'Integer':\n        if (this.precision === 'single') {\n          // bitRatio is always 4 here, javascript doesn't yet have 8 or 16 bit support\n          // TODO: make 8 or 16 bit work anyway!\n          retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n          this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n          retArr.push(')');\n        } else {\n          const bitRatio = (origin === 'user' ?\n            this.lookupFunctionArgumentBitRatio(this.name, name) :\n            this.constantBitRatios[name]\n          );\n          switch (bitRatio) {\n            case 1:\n              retArr.push(`get8(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n              break;\n            case 2:\n              retArr.push(`get16(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n              break;\n            case 4:\n            case 0:\n              retArr.push(`get32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n              break;\n            default:\n              throw new Error(`unhandled bit ratio of ${bitRatio}`);\n          }\n          this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n          retArr.push(')');\n        }\n        break;\n      case 'MemoryOptimizedNumberTexture':\n        retArr.push(`getMemoryOptimized32(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        retArr.push(`${markupName}[${this.memberExpressionPropertyMarkup(yProperty)}]`);\n        if (yProperty) {\n          retArr.push(`[${this.memberExpressionPropertyMarkup(xProperty)}]`);\n        }\n        break;\n      default:\n        throw new Error(`unhandled member expression \"${ type }\"`);\n    }\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *call* expression\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns  {Array} the append retArr\n   */\n  astCallExpression(ast, retArr) {\n    if (!ast.callee) {\n      throw this.astErrorOutput('Unknown CallExpression', ast);\n    }\n\n    let functionName = null;\n    const isMathFunction = this.isAstMathFunction(ast);\n\n    // Its a math operator or this.something(), remove the prefix\n    if (isMathFunction || (ast.callee.object && ast.callee.object.type === 'ThisExpression')) {\n      functionName = ast.callee.property.name;\n    }\n    // Issue #212, BABEL!\n    else if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[0].type === 'Literal' && !isNaN(ast.callee.expressions[0].raw)) {\n      functionName = ast.callee.expressions[1].property.name;\n    } else {\n      functionName = ast.callee.name;\n    }\n\n    if (!functionName) {\n      throw this.astErrorOutput(`Unhandled function, couldn't find name`, ast);\n    }\n\n    // if this if grows to more than one, lets use a switch\n    switch (functionName) {\n      case 'pow':\n        functionName = '_pow';\n        break;\n      case 'round':\n        functionName = '_round';\n        break;\n    }\n\n    // Register the function into the called registry\n    if (this.calledFunctions.indexOf(functionName) < 0) {\n      this.calledFunctions.push(functionName);\n    }\n\n    if (functionName === 'random' && this.plugins && this.plugins.length > 0) {\n      for (let i = 0; i < this.plugins.length; i++) {\n        const plugin = this.plugins[i];\n        if (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {\n          retArr.push(plugin.functionReplace);\n          return retArr;\n        }\n      }\n    }\n\n    // track the function was called\n    if (this.onFunctionCall) {\n      this.onFunctionCall(this.name, functionName, ast.arguments);\n    }\n\n    // Call the function\n    retArr.push(functionName);\n\n    // Open arguments space\n    retArr.push('(');\n\n    // Add the arguments\n    if (isMathFunction) {\n      for (let i = 0; i < ast.arguments.length; ++i) {\n        const argument = ast.arguments[i];\n        const argumentType = this.getType(argument);\n        if (i > 0) {\n          retArr.push(', ');\n        }\n\n        switch (argumentType) {\n          case 'Integer':\n            this.castValueToFloat(argument, retArr);\n            break;\n          default:\n            this.astGeneric(argument, retArr);\n            break;\n        }\n      }\n    } else {\n      const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n      for (let i = 0; i < ast.arguments.length; ++i) {\n        const argument = ast.arguments[i];\n        let targetType = targetTypes[i];\n        if (i > 0) {\n          retArr.push(', ');\n        }\n        const argumentType = this.getType(argument);\n        if (!targetType) {\n          this.triggerImplyArgumentType(functionName, i, argumentType, this);\n          targetType = argumentType;\n        }\n        switch (argumentType) {\n          case 'Boolean':\n            this.astGeneric(argument, retArr);\n            continue;\n          case 'Number':\n          case 'Float':\n            if (targetType === 'Integer') {\n              retArr.push('int(');\n              this.astGeneric(argument, retArr);\n              retArr.push(')');\n              continue;\n            } else if (targetType === 'Number' || targetType === 'Float') {\n              this.astGeneric(argument, retArr);\n              continue;\n            } else if (targetType === 'LiteralInteger') {\n              this.castLiteralToFloat(argument, retArr);\n              continue;\n            }\n            break;\n          case 'Integer':\n            if (targetType === 'Number' || targetType === 'Float') {\n              retArr.push('float(');\n              this.astGeneric(argument, retArr);\n              retArr.push(')');\n              continue;\n            } else if (targetType === 'Integer') {\n              this.astGeneric(argument, retArr);\n              continue;\n            }\n            break;\n          case 'LiteralInteger':\n            if (targetType === 'Integer') {\n              this.castLiteralToInteger(argument, retArr);\n              continue;\n            } else if (targetType === 'Number' || targetType === 'Float') {\n              this.castLiteralToFloat(argument, retArr);\n              continue;\n            } else if (targetType === 'LiteralInteger') {\n              this.astGeneric(argument, retArr);\n              continue;\n            }\n            break;\n          case 'Array(2)':\n          case 'Array(3)':\n          case 'Array(4)':\n            if (targetType === argumentType) {\n              if (argument.type === 'Identifier') {\n                retArr.push(`user_${utils.sanitizeName(argument.name)}`);\n              } else if (argument.type === 'ArrayExpression' || argument.type === 'MemberExpression' || argument.type === 'CallExpression') {\n                this.astGeneric(argument, retArr);\n              } else {\n                throw this.astErrorOutput(`Unhandled argument type ${ argument.type }`, ast);\n              }\n              continue;\n            }\n            break;\n          case 'HTMLCanvas':\n          case 'OffscreenCanvas':\n          case 'HTMLImage':\n          case 'ImageBitmap':\n          case 'ImageData':\n          case 'HTMLImageArray':\n          case 'HTMLVideo':\n          case 'ArrayTexture(1)':\n          case 'ArrayTexture(2)':\n          case 'ArrayTexture(3)':\n          case 'ArrayTexture(4)':\n          case 'Array':\n          case 'Input':\n            if (targetType === argumentType) {\n              if (argument.type !== 'Identifier') throw this.astErrorOutput(`Unhandled argument type ${ argument.type }`, ast);\n              this.triggerImplyArgumentBitRatio(this.name, argument.name, functionName, i);\n              const name = utils.sanitizeName(argument.name);\n              retArr.push(`user_${name},user_${name}Size,user_${name}Dim`);\n              continue;\n            }\n            break;\n        }\n        throw this.astErrorOutput(`Unhandled argument combination of ${ argumentType } and ${ targetType } for argument named \"${ argument.name }\"`, ast);\n      }\n    }\n    // Close arguments space\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  /**\n   * @desc Parses the abstract syntax tree for *Array* Expression\n   * @param {Object} arrNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astArrayExpression(arrNode, retArr) {\n    const returnType = this.getType(arrNode);\n\n    const arrLen = arrNode.elements.length;\n\n    switch (returnType) {\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        retArr.push(`mat${arrLen}(`);\n        break;\n      default:\n        retArr.push(`vec${arrLen}(`);\n    }\n    for (let i = 0; i < arrLen; ++i) {\n      if (i > 0) {\n        retArr.push(', ');\n      }\n      const subNode = arrNode.elements[i];\n      this.astGeneric(subNode, retArr)\n    }\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  memberExpressionXYZ(x, y, z, retArr) {\n    if (z) {\n      retArr.push(this.memberExpressionPropertyMarkup(z), ', ');\n    } else {\n      retArr.push('0, ');\n    }\n    if (y) {\n      retArr.push(this.memberExpressionPropertyMarkup(y), ', ');\n    } else {\n      retArr.push('0, ');\n    }\n    retArr.push(this.memberExpressionPropertyMarkup(x));\n    return retArr;\n  }\n\n  memberExpressionPropertyMarkup(property) {\n    if (!property) {\n      throw new Error('Property not set');\n    }\n    const type = this.getType(property);\n    const result = [];\n    switch (type) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(property, result);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(property, result);\n        break;\n      default:\n        this.astGeneric(property, result);\n    }\n    return result.join('');\n  }\n}\n\nconst typeMap = {\n  'Array': 'sampler2D',\n  'Array(2)': 'vec2',\n  'Array(3)': 'vec3',\n  'Array(4)': 'vec4',\n  'Matrix(2)': 'mat2',\n  'Matrix(3)': 'mat3',\n  'Matrix(4)': 'mat4',\n  'Array2D': 'sampler2D',\n  'Array3D': 'sampler2D',\n  'Boolean': 'bool',\n  'Float': 'float',\n  'Input': 'sampler2D',\n  'Integer': 'int',\n  'Number': 'float',\n  'LiteralInteger': 'float',\n  'NumberTexture': 'sampler2D',\n  'MemoryOptimizedNumberTexture': 'sampler2D',\n  'ArrayTexture(1)': 'sampler2D',\n  'ArrayTexture(2)': 'sampler2D',\n  'ArrayTexture(3)': 'sampler2D',\n  'ArrayTexture(4)': 'sampler2D',\n  'HTMLVideo': 'sampler2D',\n  'HTMLCanvas': 'sampler2D',\n  'OffscreenCanvas': 'sampler2D',\n  'HTMLImage': 'sampler2D',\n  'ImageBitmap': 'sampler2D',\n  'ImageData': 'sampler2D',\n  'HTMLImageArray': 'sampler2DArray',\n};\n\nconst operatorMap = {\n  '===': '==',\n  '!==': '!='\n};\n\nmodule.exports = {\n  WebGLFunctionNode\n};", "// language=GLSL\nconst source = `// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}`;\n\nconst name = 'math-random-uniformly-distributed';\n\n// language=JavaScript\nconst functionMatch = `Math.random()`;\n\nconst functionReplace = `nrand(vTexCoord)`;\n\nconst functionReturnType = 'Number';\n/**\n *\n * @param {Kernel} kernel\n */\nconst onBeforeRun = (kernel) => {\n  kernel.setUniform1f('randomSeed1', Math.random());\n  kernel.setUniform1f('randomSeed2', Math.random());\n};\n\n/**\n *\n * @type IPlugin\n */\nconst plugin = {\n  name,\n  onBeforeRun,\n  functionMatch,\n  functionReplace,\n  functionReturnType,\n  source\n};\n\nmodule.exports = plugin;", "// language=GLSL\nconst fragmentShader = `__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nfloat acosh(float x) {\n  return log(x + sqrt(x * x - 1.0));\n}\n\nfloat sinh(float x) {\n  return (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n}\n\nfloat asinh(float x) {\n  return log(x + sqrt(x * x + 1.0));\n}\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat atanh(float x) {\n  x = (x + 1.0) / (x - 1.0);\n  if (x < 0.0) {\n    return 0.5 * log(-x);\n  }\n  return 0.5 * log(x);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat cosh(float x) {\n  return (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat tanh(float x) {\n  float e = exp(2.0 * x);\n  return (e - 1.0) / (e + 1.0);\n}\n\nfloat trunc(float x) {\n  if (x >= 0.0) {\n    return floor(x); \n  } else {\n    return ceil(x);\n  }\n}\n\nvec4 _round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(_round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n\nmodule.exports = {\n  fragmentShader\n};", "// language=GLSL\nconst vertexShader = `__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n\nmodule.exports = {\n  vertexShader\n};", "/**\n *\n * @param {WebGLRenderingContext} gl\n * @param {IGLWiretapOptions} [options]\n * @returns {GLWiretapProxy}\n */\nfunction glWiretap(gl, options = {}) {\n  const {\n    contextName = 'gl',\n    throwGetError,\n    useTrackablePrimitives,\n    readPixelsFile,\n    recording = [],\n    variables = {},\n    onReadPixels,\n    onUnrecognizedArgumentLookup,\n  } = options;\n  const proxy = new Proxy(gl, { get: listen });\n  const contextVariables = [];\n  const entityNames = {};\n  let imageCount = 0;\n  let indent = '';\n  let readPixelsVariableName;\n  return proxy;\n  function listen(obj, property) {\n    switch (property) {\n      case 'addComment': return addComment;\n      case 'checkThrowError': return checkThrowError;\n      case 'getReadPixelsVariableName': return readPixelsVariableName;\n      case 'insertVariable': return insertVariable;\n      case 'reset': return reset;\n      case 'setIndent': return setIndent;\n      case 'toString': return toString;\n      case 'getContextVariableName': return getContextVariableName;\n    }\n    if (typeof gl[property] === 'function') {\n      return function() { // need arguments from this, fyi\n        switch (property) {\n          case 'getError':\n            if (throwGetError) {\n              recording.push(`${indent}if (${contextName}.getError() !== ${contextName}.NONE) throw new Error('error');`);\n            } else {\n              recording.push(`${indent}${contextName}.getError();`); // flush out errors\n            }\n            return gl.getError();\n          case 'getExtension': {\n            const variableName = `${contextName}Variables${contextVariables.length}`;\n            recording.push(`${indent}const ${variableName} = ${contextName}.getExtension('${arguments[0]}');`);\n            const extension = gl.getExtension(arguments[0]);\n            if (extension && typeof extension === 'object') {\n              const tappedExtension = glExtensionWiretap(extension, {\n                getEntity,\n                useTrackablePrimitives,\n                recording,\n                contextName: variableName,\n                contextVariables,\n                variables,\n                indent,\n                onUnrecognizedArgumentLookup,\n              });\n              contextVariables.push(tappedExtension);\n              return tappedExtension;\n            } else {\n              contextVariables.push(null);\n            }\n            return extension;\n          }\n          case 'readPixels':\n            const i = contextVariables.indexOf(arguments[6]);\n            let targetVariableName;\n            if (i === -1) {\n              const variableName = getVariableName(arguments[6]);\n              if (variableName) {\n                targetVariableName = variableName;\n                recording.push(`${indent}${variableName}`);\n              } else {\n                targetVariableName = `${contextName}Variable${contextVariables.length}`;\n                contextVariables.push(arguments[6]);\n                recording.push(`${indent}const ${targetVariableName} = new ${arguments[6].constructor.name}(${arguments[6].length});`);\n              }\n            } else {\n              targetVariableName = `${contextName}Variable${i}`;\n            }\n            readPixelsVariableName = targetVariableName;\n            const argumentAsStrings = [\n              arguments[0],\n              arguments[1],\n              arguments[2],\n              arguments[3],\n              getEntity(arguments[4]),\n              getEntity(arguments[5]),\n              targetVariableName\n            ];\n            recording.push(`${indent}${contextName}.readPixels(${argumentAsStrings.join(', ')});`);\n            if (readPixelsFile) {\n              writePPM(arguments[2], arguments[3]);\n            }\n            if (onReadPixels) {\n              onReadPixels(targetVariableName, argumentAsStrings);\n            }\n            return gl.readPixels.apply(gl, arguments);\n          case 'drawBuffers':\n            recording.push(`${indent}${contextName}.drawBuffers([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup } )}]);`);\n            return gl.drawBuffers(arguments[0]);\n        }\n        let result = gl[property].apply(gl, arguments);\n        switch (typeof result) {\n          case 'undefined':\n            recording.push(`${indent}${methodCallToString(property, arguments)};`);\n            return;\n          case 'number':\n          case 'boolean':\n            if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result = trackablePrimitive(result));\n              break;\n            }\n          default:\n            if (result === null) {\n              recording.push(`${methodCallToString(property, arguments)};`);\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n            }\n\n            contextVariables.push(result);\n        }\n        return result;\n      }\n    }\n    entityNames[gl[property]] = property;\n    return gl[property];\n  }\n  function toString() {\n    return recording.join('\\n');\n  }\n  function reset() {\n    while (recording.length > 0) {\n      recording.pop();\n    }\n  }\n  function insertVariable(name, value) {\n    variables[name] = value;\n  }\n  function getEntity(value) {\n    const name = entityNames[value];\n    if (name) {\n      return contextName + '.' + name;\n    }\n    return value;\n  }\n  function setIndent(spaces) {\n    indent = ' '.repeat(spaces);\n  }\n  function addVariable(value, source) {\n    const variableName = `${contextName}Variable${contextVariables.length}`;\n    recording.push(`${indent}const ${variableName} = ${source};`);\n    contextVariables.push(value);\n    return variableName;\n  }\n  function writePPM(width, height) {\n    const sourceVariable = `${contextName}Variable${contextVariables.length}`;\n    const imageVariable = `imageDatum${imageCount}`;\n    recording.push(`${indent}let ${imageVariable} = [\"P3\\\\n# ${readPixelsFile}.ppm\\\\n\", ${width}, ' ', ${height}, \"\\\\n255\\\\n\"].join(\"\");`);\n    recording.push(`${indent}for (let i = 0; i < ${imageVariable}.length; i += 4) {`);\n    recording.push(`${indent}  ${imageVariable} += ${sourceVariable}[i] + ' ' + ${sourceVariable}[i + 1] + ' ' + ${sourceVariable}[i + 2] + ' ';`);\n    recording.push(`${indent}}`);\n    recording.push(`${indent}if (typeof require !== \"undefined\") {`);\n    recording.push(`${indent}  require('fs').writeFileSync('./${readPixelsFile}.ppm', ${imageVariable});`);\n    recording.push(`${indent}}`);\n    imageCount++;\n  }\n  function addComment(value) {\n    recording.push(`${indent}// ${value}`);\n  }\n  function checkThrowError() {\n    recording.push(`${indent}(() => {\n${indent}const error = ${contextName}.getError();\n${indent}if (error !== ${contextName}.NONE) {\n${indent}  const names = Object.getOwnPropertyNames(gl);\n${indent}  for (let i = 0; i < names.length; i++) {\n${indent}    const name = names[i];\n${indent}    if (${contextName}[name] === error) {\n${indent}      throw new Error('${contextName} threw ' + name);\n${indent}    }\n${indent}  }\n${indent}}\n${indent}})();`);\n  }\n  function methodCallToString(method, args) {\n    return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;\n  }\n\n  function getVariableName(value) {\n    if (variables) {\n      for (const name in variables) {\n        if (variables[name] === value) {\n          return name;\n        }\n      }\n    }\n    return null;\n  }\n\n  function getContextVariableName(value) {\n    const i = contextVariables.indexOf(value);\n    if (i !== -1) {\n      return `${contextName}Variable${i}`;\n    }\n    return null;\n  }\n}\n\n/**\n *\n * @param extension\n * @param {IGLExtensionWiretapOptions} options\n * @returns {*}\n */\nfunction glExtensionWiretap(extension, options) {\n  const proxy = new Proxy(extension, { get: listen });\n  const extensionEntityNames = {};\n  const {\n    contextName,\n    contextVariables,\n    getEntity,\n    useTrackablePrimitives,\n    recording,\n    variables,\n    indent,\n    onUnrecognizedArgumentLookup,\n  } = options;\n  return proxy;\n  function listen(obj, property) {\n    if (typeof obj[property] === 'function') {\n      return function() {\n        switch (property) {\n          case 'drawBuffersWEBGL':\n            recording.push(`${indent}${contextName}.drawBuffersWEBGL([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })}]);`);\n            return extension.drawBuffersWEBGL(arguments[0]);\n        }\n        let result = extension[property].apply(extension, arguments);\n        switch (typeof result) {\n          case 'undefined':\n            recording.push(`${indent}${methodCallToString(property, arguments)};`);\n            return;\n          case 'number':\n          case 'boolean':\n            if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result = trackablePrimitive(result));\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result);\n            }\n            break;\n          default:\n            if (result === null) {\n              recording.push(`${methodCallToString(property, arguments)};`);\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n            }\n            contextVariables.push(result);\n        }\n        return result;\n      };\n    }\n    extensionEntityNames[extension[property]] = property;\n    return extension[property];\n  }\n\n  function getExtensionEntity(value) {\n    if (extensionEntityNames.hasOwnProperty(value)) {\n      return `${contextName}.${extensionEntityNames[value]}`;\n    }\n    return getEntity(value);\n  }\n\n  function methodCallToString(method, args) {\n    return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;\n  }\n\n  function addVariable(value, source) {\n    const variableName = `${contextName}Variable${contextVariables.length}`;\n    contextVariables.push(value);\n    recording.push(`${indent}const ${variableName} = ${source};`);\n    return variableName;\n  }\n}\n\nfunction argumentsToString(args, options) {\n  const { variables, onUnrecognizedArgumentLookup } = options;\n  return (Array.from(args).map((arg) => {\n    const variableName = getVariableName(arg);\n    if (variableName) {\n      return variableName;\n    }\n    return argumentToString(arg, options);\n  }).join(', '));\n\n  function getVariableName(value) {\n    if (variables) {\n      for (const name in variables) {\n        if (!variables.hasOwnProperty(name)) continue;\n        if (variables[name] === value) {\n          return name;\n        }\n      }\n    }\n    if (onUnrecognizedArgumentLookup) {\n      return onUnrecognizedArgumentLookup(value);\n    }\n    return null;\n  }\n}\n\nfunction argumentToString(arg, options) {\n  const { contextName, contextVariables, getEntity, addVariable, onUnrecognizedArgumentLookup } = options;\n  if (typeof arg === 'undefined') {\n    return 'undefined';\n  }\n  if (arg === null) {\n    return 'null';\n  }\n  const i = contextVariables.indexOf(arg);\n  if (i > -1) {\n    return `${contextName}Variable${i}`;\n  }\n  switch (arg.constructor.name) {\n    case 'String':\n      const hasLines = /\\n/.test(arg);\n      const hasSingleQuotes = /'/.test(arg);\n      const hasDoubleQuotes = /\"/.test(arg);\n      if (hasLines) {\n        return '`' + arg + '`';\n      } else if (hasSingleQuotes && !hasDoubleQuotes) {\n        return '\"' + arg + '\"';\n      } else if (!hasSingleQuotes && hasDoubleQuotes) {\n        return \"'\" + arg + \"'\";\n      } else {\n        return '\\'' + arg + '\\'';\n      }\n    case 'Number': return getEntity(arg);\n    case 'Boolean': return getEntity(arg);\n    case 'Array':\n      return addVariable(arg, `new ${arg.constructor.name}([${Array.from(arg).join(',')}])`);\n    case 'Float32Array':\n    case 'Uint8Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n      return addVariable(arg, `new ${arg.constructor.name}(${JSON.stringify(Array.from(arg))})`);\n    default:\n      if (onUnrecognizedArgumentLookup) {\n        const instantiationString = onUnrecognizedArgumentLookup(arg);\n        if (instantiationString) {\n          return instantiationString;\n        }\n      }\n      throw new Error(`unrecognized argument type ${arg.constructor.name}`);\n  }\n}\n\nfunction trackablePrimitive(value) {\n  // wrapped in object, so track-able\n  return new value.constructor(value);\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = { glWiretap, glExtensionWiretap };\n}\n\nif (typeof window !== 'undefined') {\n  glWiretap.glExtensionWiretap = glExtensionWiretap;\n  window.glWiretap = glWiretap;\n}\n", "const { glWiretap } = require('gl-wiretap');\nconst { utils } = require('../../utils');\n\nfunction toStringWithoutUtils(fn) {\n  return fn.toString()\n    .replace('=>', '')\n    .replace(/^function /, '')\n    .replace(/utils[.]/g, '/*utils.*/');\n}\n\n/**\n *\n * @param {GLKernel} Kernel\n * @param {KernelVariable[]} args\n * @param {Kernel} originKernel\n * @param {string} [setupContextString]\n * @param {string} [destroyContextString]\n * @returns {string}\n */\nfunction glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {\n  if (!originKernel.built) {\n    originKernel.build.apply(originKernel, args);\n  }\n  args = args ? Array.from(args).map(arg => {\n    switch (typeof arg) {\n      case 'boolean':\n        return new Boolean(arg);\n      case 'number':\n        return new Number(arg);\n      default:\n        return arg;\n    }\n  }) : null;\n  const uploadedValues = [];\n  const postResult = [];\n  const context = glWiretap(originKernel.context, {\n    useTrackablePrimitives: true,\n    onReadPixels: (targetName) => {\n      if (kernel.subKernels) {\n        if (!subKernelsResultVariableSetup) {\n          postResult.push(`    const result = { result: ${getRenderString(targetName, kernel)} };`);\n          subKernelsResultVariableSetup = true;\n        } else {\n          const property = kernel.subKernels[subKernelsResultIndex++].property;\n          postResult.push(`    result${isNaN(property) ? '.' + property : `[${property}]`} = ${getRenderString(targetName, kernel)};`);\n        }\n        if (subKernelsResultIndex === kernel.subKernels.length) {\n          postResult.push('    return result;');\n        }\n        return;\n      }\n      if (targetName) {\n        postResult.push(`    return ${getRenderString(targetName, kernel)};`);\n      } else {\n        postResult.push(`    return null;`);\n      }\n    },\n    onUnrecognizedArgumentLookup: (argument) => {\n      const argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);\n      if (argumentName) {\n        return argumentName;\n      }\n      const constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map(key => constants[key]) : [], context, uploadedValues);\n      if (constantName) {\n        return constantName;\n      }\n      return null;\n    }\n  });\n  let subKernelsResultVariableSetup = false;\n  let subKernelsResultIndex = 0;\n  const {\n    source,\n    canvas,\n    output,\n    pipeline,\n    graphical,\n    loopMaxIterations,\n    constants,\n    optimizeFloatMemory,\n    precision,\n    fixIntegerDivisionAccuracy,\n    functions,\n    nativeFunctions,\n    subKernels,\n    immutable,\n    argumentTypes,\n    constantTypes,\n    kernelArguments,\n    kernelConstants,\n    tactic,\n  } = originKernel;\n  const kernel = new Kernel(source, {\n    canvas,\n    context,\n    checkContext: false,\n    output,\n    pipeline,\n    graphical,\n    loopMaxIterations,\n    constants,\n    optimizeFloatMemory,\n    precision,\n    fixIntegerDivisionAccuracy,\n    functions,\n    nativeFunctions,\n    subKernels,\n    immutable,\n    argumentTypes,\n    constantTypes,\n    tactic,\n  });\n  let result = [];\n  context.setIndent(2);\n  kernel.build.apply(kernel, args);\n  result.push(context.toString());\n  context.reset();\n\n  kernel.kernelArguments.forEach((kernelArgument, i) => {\n    switch (kernelArgument.type) {\n      // primitives\n      case 'Integer':\n      case 'Boolean':\n      case 'Number':\n      case 'Float':\n        // non-primitives\n      case 'Array':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'HTMLCanvas':\n      case 'HTMLImage':\n      case 'HTMLVideo':\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\n        break;\n      case 'HTMLImageArray':\n        for (let imageIndex = 0; imageIndex < args[i].length; imageIndex++) {\n          const arg = args[i];\n          context.insertVariable(`uploadValue_${kernelArgument.name}[${imageIndex}]`, arg[imageIndex]);\n        }\n        break;\n      case 'Input':\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\n        break;\n      case 'MemoryOptimizedNumberTexture':\n      case 'NumberTexture':\n      case 'Array1D(2)':\n      case 'Array1D(3)':\n      case 'Array1D(4)':\n      case 'Array2D(2)':\n      case 'Array2D(3)':\n      case 'Array2D(4)':\n      case 'Array3D(2)':\n      case 'Array3D(3)':\n      case 'Array3D(4)':\n      case 'ArrayTexture(1)':\n      case 'ArrayTexture(2)':\n      case 'ArrayTexture(3)':\n      case 'ArrayTexture(4)':\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, args[i].texture);\n        break;\n      default:\n        throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${kernelArgument.type}`);\n    }\n  });\n  result.push('/** start of injected functions **/');\n  result.push(`function ${toStringWithoutUtils(utils.flattenTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.flatten2dArrayTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.flatten3dArrayTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.flatten4dArrayTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.isArray)}`);\n  if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {\n    result.push(\n      `  const renderOutput = function ${toStringWithoutUtils(kernel.formatValues)};`\n    );\n  }\n  result.push('/** end of injected functions **/');\n  result.push(`  const innerKernel = function (${kernel.kernelArguments.map(kernelArgument => kernelArgument.varName).join(', ')}) {`);\n  context.setIndent(4);\n  kernel.run.apply(kernel, args);\n  if (kernel.renderKernels) {\n    kernel.renderKernels();\n  } else if (kernel.renderOutput) {\n    kernel.renderOutput();\n  }\n  result.push('    /** start setup uploads for kernel values **/');\n  kernel.kernelArguments.forEach(kernelArgument => {\n    result.push('    ' + kernelArgument.getStringValueHandler().split('\\n').join('\\n    '));\n  });\n  result.push('    /** end setup uploads for kernel values **/');\n  result.push(context.toString());\n  if (kernel.renderOutput === kernel.renderTexture) {\n    context.reset();\n    const framebufferName = context.getContextVariableName(kernel.framebuffer);\n    if (kernel.renderKernels) {\n      const results = kernel.renderKernels();\n      const textureName = context.getContextVariableName(kernel.texture.texture);\n      result.push(`    return {\n      result: {\n        texture: ${ textureName },\n        type: '${ results.result.type }',\n        toArray: ${ getToArrayString(results.result, textureName, framebufferName) }\n      },`);\n      const { subKernels, mappedTextures } = kernel;\n      for (let i = 0; i < subKernels.length; i++) {\n        const texture = mappedTextures[i];\n        const subKernel = subKernels[i];\n        const subKernelResult = results[subKernel.property];\n        const subKernelTextureName = context.getContextVariableName(texture.texture);\n        result.push(`\n      ${subKernel.property}: {\n        texture: ${ subKernelTextureName },\n        type: '${ subKernelResult.type }',\n        toArray: ${ getToArrayString(subKernelResult, subKernelTextureName, framebufferName) }\n      },`);\n      }\n      result.push(`    };`);\n    } else {\n      const rendered = kernel.renderOutput();\n      const textureName = context.getContextVariableName(kernel.texture.texture);\n      result.push(`    return {\n        texture: ${ textureName },\n        type: '${ rendered.type }',\n        toArray: ${ getToArrayString(rendered, textureName, framebufferName) }\n      };`);\n    }\n  }\n  result.push(`    ${destroyContextString ? '\\n' + destroyContextString + '    ': ''}`);\n  result.push(postResult.join('\\n'));\n  result.push('  };');\n  if (kernel.graphical) {\n    result.push(getGetPixelsString(kernel));\n    result.push(`  innerKernel.getPixels = getPixels;`);\n  }\n  result.push('  return innerKernel;');\n\n  let constantsUpload = [];\n  kernelConstants.forEach((kernelConstant) => {\n    constantsUpload.push(`${kernelConstant.getStringValueHandler()}`);\n  });\n  return `function kernel(settings) {\n  const { context, constants } = settings;\n  ${constantsUpload.join('')}\n  ${setupContextString ? setupContextString : ''}\n${result.join('\\n')}\n}`;\n}\n\nfunction getRenderString(targetName, kernel) {\n  const readBackValue = kernel.precision === 'single' ? targetName : `new Float32Array(${targetName}.buffer)`;\n  if (kernel.output[2]) {\n    return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]}, ${kernel.output[2]})`;\n  }\n  if (kernel.output[1]) {\n    return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]})`;\n  }\n\n  return `renderOutput(${readBackValue}, ${kernel.output[0]})`;\n}\n\nfunction getGetPixelsString(kernel) {\n  const getPixels = kernel.getPixels.toString();\n  const useFunctionKeyword = !/^function/.test(getPixels);\n  return utils.flattenFunctionToString(`${useFunctionKeyword ? 'function ' : ''}${ getPixels }`, {\n    findDependency: (object, name) => {\n      if (object === 'utils') {\n        return `const ${name} = ${utils[name].toString()};`;\n      }\n      return null;\n    },\n    thisLookup: (property) => {\n      if (property === 'context') {\n        return null;\n      }\n      if (kernel.hasOwnProperty(property)) {\n        return JSON.stringify(kernel[property]);\n      }\n      throw new Error(`unhandled thisLookup ${ property }`);\n    }\n  });\n}\n\nfunction getToArrayString(kernelResult, textureName, framebufferName) {\n  const toArray = kernelResult.toArray.toString();\n  const useFunctionKeyword = !/^function/.test(toArray);\n  const flattenedFunctions = utils.flattenFunctionToString(`${useFunctionKeyword ? 'function ' : ''}${ toArray }`, {\n    findDependency: (object, name) => {\n      if (object === 'utils') {\n        return `const ${name} = ${utils[name].toString()};`;\n      } else if (object === 'this') {\n        if (name === 'framebuffer') {\n          return '';\n        }\n        return `${useFunctionKeyword ? 'function ' : ''}${kernelResult[name].toString()}`;\n      } else {\n        throw new Error('unhandled fromObject');\n      }\n    },\n    thisLookup: (property, isDeclaration) => {\n      if (property === 'texture') {\n        return textureName;\n      }\n      if (property === 'context') {\n        if (isDeclaration) return null;\n        return 'gl';\n      }\n      if (kernelResult.hasOwnProperty(property)) {\n        return JSON.stringify(kernelResult[property]);\n      }\n      throw new Error(`unhandled thisLookup ${ property }`);\n    }\n  });\n  return `() => {\n  function framebuffer() { return ${framebufferName}; };\n  ${flattenedFunctions}\n  return toArray();\n  }`;\n}\n\n/**\n *\n * @param {KernelVariable} argument\n * @param {KernelValue[]} kernelValues\n * @param {KernelVariable[]} values\n * @param context\n * @param {KernelVariable[]} uploadedValues\n * @return {string|null}\n */\nfunction findKernelValue(argument, kernelValues, values, context, uploadedValues) {\n  if (argument === null) return null;\n  if (kernelValues === null) return null;\n  switch (typeof argument) {\n    case 'boolean':\n    case 'number':\n      return null;\n  }\n  if (\n    typeof HTMLImageElement !== 'undefined' &&\n    argument instanceof HTMLImageElement\n  ) {\n    for (let i = 0; i < kernelValues.length; i++) {\n      const kernelValue = kernelValues[i];\n      if (kernelValue.type !== 'HTMLImageArray' && kernelValue) continue;\n      if (kernelValue.uploadValue !== argument) continue;\n      // TODO: if we send two of the same image, the parser could get confused, and short circuit to the first, handle that here\n      const variableIndex = values[i].indexOf(argument);\n      if (variableIndex === -1) continue;\n      const variableName = `uploadValue_${kernelValue.name}[${variableIndex}]`;\n      context.insertVariable(variableName, argument);\n      return variableName;\n    }\n  }\n\n  for (let i = 0; i < kernelValues.length; i++) {\n    const kernelValue = kernelValues[i];\n    if (argument !== kernelValue.uploadValue) continue;\n    const variable = `uploadValue_${kernelValue.name}`;\n    context.insertVariable(variable, kernelValue);\n    return variable;\n  }\n  return null;\n}\n\nmodule.exports = {\n  glKernelString\n};", "/**\n * @class KernelValue\n */\nclass KernelValue {\n  /**\n   * @param {KernelVariable} value\n   * @param {IKernelValueSettings} settings\n   */\n  constructor(value, settings) {\n    const {\n      name,\n      kernel,\n      context,\n      checkContext,\n      onRequestContextHandle,\n      onUpdateValueMismatch,\n      origin,\n      strictIntegers,\n      type,\n      tactic,\n    } = settings;\n    if (!name) {\n      throw new Error('name not set');\n    }\n    if (!type) {\n      throw new Error('type not set');\n    }\n    if (!origin) {\n      throw new Error('origin not set');\n    }\n    if (origin !== 'user' && origin !== 'constants') {\n      throw new Error(`origin must be \"user\" or \"constants\" value is \"${ origin }\"`);\n    }\n    if (!onRequestContextHandle) {\n      throw new Error('onRequestContextHandle is not set');\n    }\n    this.name = name;\n    this.origin = origin;\n    this.tactic = tactic;\n    this.varName = origin === 'constants' ? `constants.${name}` : name;\n    this.kernel = kernel;\n    this.strictIntegers = strictIntegers;\n    // handle textures\n    this.type = value.type || type;\n    this.size = value.size || null;\n    this.index = null;\n    this.context = context;\n    this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;\n    this.contextHandle = null;\n    this.onRequestContextHandle = onRequestContextHandle;\n    this.onUpdateValueMismatch = onUpdateValueMismatch;\n    this.forceUploadEachRun = null;\n  }\n\n  get id() {\n    return `${this.origin}_${name}`;\n  }\n\n  getSource() {\n    throw new Error(`\"getSource\" not defined on ${ this.constructor.name }`);\n  }\n\n  updateValue(value) {\n    throw new Error(`\"updateValue\" not defined on ${ this.constructor.name }`);\n  }\n}\n\nmodule.exports = {\n  KernelValue\n};", "const { utils } = require('../../../utils');\nconst { KernelValue } = require('../../kernel-value');\n\nclass WebGLKernelValue extends KernelValue {\n  /**\n   * @param {KernelVariable} value\n   * @param {IWebGLKernelValueSettings} settings\n   */\n  constructor(value, settings) {\n    super(value, settings);\n    this.dimensionsId = null;\n    this.sizeId = null;\n    this.initialValueConstructor = value.constructor;\n    this.onRequestTexture = settings.onRequestTexture;\n    this.onRequestIndex = settings.onRequestIndex;\n    this.uploadValue = null;\n    this.textureSize = null;\n    this.bitRatio = null;\n    this.prevArg = null;\n  }\n\n  get id() {\n    return `${this.origin}_${utils.sanitizeName(this.name)}`;\n  }\n\n  setup() {}\n\n  getTransferArrayType(value) {\n    if (Array.isArray(value[0])) {\n      return this.getTransferArrayType(value[0]);\n    }\n    switch (value.constructor) {\n      case Array:\n      case Int32Array:\n      case Int16Array:\n      case Int8Array:\n        return Float32Array;\n      case Uint8ClampedArray:\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Float32Array:\n      case Float64Array:\n        return value.constructor;\n    }\n    console.warn('Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros');\n    return value.constructor;\n  }\n\n  /**\n   * Used for when we want a string output of our kernel, so we can still input values to the kernel\n   */\n  getStringValueHandler() {\n    throw new Error(`\"getStringValueHandler\" not implemented on ${this.constructor.name}`);\n  }\n\n  getVariablePrecisionString() {\n    return this.kernel.getVariablePrecisionString(this.textureSize || undefined, this.tactic || undefined);\n  }\n\n  destroy() {}\n}\n\nmodule.exports = {\n  WebGLKernelValue\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueBoolean extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const bool ${this.id} = ${value};\\n`;\n    }\n    return `uniform bool ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueBoolean\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueFloat extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      if (Number.isInteger(value)) {\n        return `const float ${this.id} = ${value}.0;\\n`;\n      }\n      return `const float ${this.id} = ${value};\\n`;\n    }\n    return `uniform float ${this.id};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1f(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueFloat\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueInteger extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const int ${this.id} = ${ parseInt(value) };\\n`;\n    }\n    return `uniform int ${this.id};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueInteger\n};", "const { WebGLKernelValue } = require('./index');\nconst { Input } = require('../../../input');\n\n/**\n * @abstract\n */\nclass WebGLKernelArray extends WebGLKernelValue {\n  /**\n   *\n   * @param {number} width\n   * @param {number} height\n   */\n  checkSize(width, height) {\n    if (!this.kernel.validate) return;\n    const { maxTextureSize } = this.kernel.constructor.features;\n    if (width > maxTextureSize || height > maxTextureSize) {\n      if (width > height) {\n        throw new Error(`Argument texture width of ${width} larger than maximum size of ${maxTextureSize} for your GPU`);\n      } else if (width < height) {\n        throw new Error(`Argument texture height of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\n      } else {\n        throw new Error(`Argument texture height and width of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\n      }\n    }\n  }\n\n  setup() {\n    this.requestTexture();\n    this.setupTexture();\n    this.defineTexture();\n  }\n\n  requestTexture() {\n    this.texture = this.onRequestTexture();\n  }\n\n  defineTexture() {\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  }\n\n  setupTexture() {\n    this.contextHandle = this.onRequestContextHandle();\n    this.index = this.onRequestIndex();\n    this.dimensionsId = this.id + 'Dim';\n    this.sizeId = this.id + 'Size';\n  }\n\n  /**\n   * bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\n   * @param value\n   * @returns {number}\n   */\n  getBitRatio(value) {\n    if (Array.isArray(value[0])) {\n      return this.getBitRatio(value[0]);\n    } else if (value.constructor === Input) {\n      return this.getBitRatio(value.value);\n    }\n    switch (value.constructor) {\n      case Uint8ClampedArray:\n      case Uint8Array:\n      case Int8Array:\n        return 1;\n      case Uint16Array:\n      case Int16Array:\n        return 2;\n      case Float32Array:\n      case Int32Array:\n      default:\n        return 4;\n    }\n  }\n\n  destroy() {\n    if (this.prevArg) {\n      this.prevArg.delete();\n    }\n    this.context.deleteTexture(this.texture);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelArray\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueHTMLImage extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    const { width, height } = value;\n    this.checkSize(width, height);\n    this.dimensions = [width, height, 1];\n    this.textureSize = [width, height];\n    this.uploadValue = value;\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(inputImage) {\n    if (inputImage.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(inputImage.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueHTMLImage\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueHTMLImage } = require('./html-image');\n\nclass WebGLKernelValueDynamicHTMLImage extends WebGLKernelValueHTMLImage {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    const { width, height } = value;\n    this.checkSize(width, height);\n    this.dimensions = [width, height, 1];\n    this.textureSize = [width, height];\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicHTMLImage\n};", "const { WebGLKernelValueHTMLImage } = require('./html-image');\n\nclass WebGLKernelValueHTMLVideo extends WebGLKernelValueHTMLImage {}\n\nmodule.exports = {\n  WebGLKernelValueHTMLVideo\n};", "const { WebGLKernelValueDynamicHTMLImage } = require('./dynamic-html-image');\n\nclass WebGLKernelValueDynamicHTMLVideo extends WebGLKernelValueDynamicHTMLImage {}\n\nmodule.exports = {\n  WebGLKernelValueDynamicHTMLVideo\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleInput extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}.value, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(input) {\n    if (input.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(input.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(input.value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleInput } = require('./single-input');\n\nclass WebGLKernelValueDynamicSingleInput extends WebGLKernelValueSingleInput {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueUnsignedInput extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = this.getBitRatio(value);\n    const [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.TranserArrayType = this.getTransferArrayType(value.value);\n    this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\n      `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\n      `flattenTo(${this.varName}.value, preUploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(input) {\n    if (input.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(input.value, this.preUploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueUnsignedInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedInput } = require('./unsigned-input');\n\nclass WebGLKernelValueDynamicUnsignedInput extends WebGLKernelValueUnsignedInput {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    const Type = this.getTransferArrayType(value.value);\n    this.preUploadValue = new Type(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicUnsignedInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nconst sameError = `Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()`;\n\nclass WebGLKernelValueMemoryOptimizedNumberTexture extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    const [width, height] = value.size;\n    this.checkSize(width, height);\n    this.dimensions = value.dimensions;\n    this.textureSize = value.size;\n    this.uploadValue = value.texture;\n    this.forceUploadEachRun = true;\n  }\n\n  setup() {\n    this.setupTexture();\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  /**\n   * @param {GLTextureMemoryOptimized} inputTexture\n   */\n  updateValue(inputTexture) {\n    if (inputTexture.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(inputTexture.constructor);\n      return;\n    }\n    if (this.checkContext && inputTexture.context !== this.context) {\n      throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\n    }\n\n    const { kernel, context: gl } = this;\n    if (kernel.pipeline) {\n      if (kernel.immutable) {\n        kernel.updateTextureArgumentRefs(this, inputTexture);\n      } else {\n        if (kernel.texture && kernel.texture.texture === inputTexture.texture) {\n          throw new Error(sameError);\n        } else if (kernel.mappedTextures) {\n          const { mappedTextures } = kernel;\n          for (let i = 0; i < mappedTextures.length; i++) {\n            if (mappedTextures[i].texture === inputTexture.texture) {\n              throw new Error(sameError);\n            }\n          }\n        }\n      }\n    }\n\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueMemoryOptimizedNumberTexture,\n  sameError\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueMemoryOptimizedNumberTexture } = require('./memory-optimized-number-texture');\n\nclass WebGLKernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(inputTexture) {\n    this.dimensions = inputTexture.dimensions;\n    this.checkSize(inputTexture.size[0], inputTexture.size[1]);\n    this.textureSize = inputTexture.size;\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(inputTexture);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicMemoryOptimizedNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\nconst { sameError } = require('./memory-optimized-number-texture');\n\nclass WebGLKernelValueNumberTexture extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    const [width, height] = value.size;\n    this.checkSize(width, height);\n    const { size: textureSize, dimensions } = value;\n    this.bitRatio = this.getBitRatio(value);\n    this.dimensions = dimensions;\n    this.textureSize = textureSize;\n    this.uploadValue = value.texture;\n    this.forceUploadEachRun = true;\n  }\n\n  setup() {\n    this.setupTexture();\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  /**\n   *\n   * @param {GLTexture} inputTexture\n   */\n  updateValue(inputTexture) {\n    if (inputTexture.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(inputTexture.constructor);\n      return;\n    }\n    if (this.checkContext && inputTexture.context !== this.context) {\n      throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\n    }\n\n    const { kernel, context: gl } = this;\n    if (kernel.pipeline) {\n      if (kernel.immutable) {\n        kernel.updateTextureArgumentRefs(this, inputTexture);\n      } else {\n        if (kernel.texture && kernel.texture.texture === inputTexture.texture) {\n          throw new Error(sameError);\n        } else if (kernel.mappedTextures) {\n          const { mappedTextures } = kernel;\n          for (let i = 0; i < mappedTextures.length; i++) {\n            if (mappedTextures[i].texture === inputTexture.texture) {\n              throw new Error(sameError);\n            }\n          }\n        }\n      }\n    }\n\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueNumberTexture } = require('./number-texture');\n\nclass WebGLKernelValueDynamicNumberTexture extends WebGLKernelValueNumberTexture {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = value.dimensions;\n    this.checkSize(value.size[0], value.size[1]);\n    this.textureSize = value.size;\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray } = require('./single-array');\n\nclass WebGLKernelValueDynamicSingleArray extends WebGLKernelValueSingleArray {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray1DI extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.setShape(value);\n  }\n\n  setShape(value) {\n    const valueDimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n    this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flatten2dArrayTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray1DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray1DI } = require('./single-array1d-i');\n\nclass WebGLKernelValueDynamicSingleArray1DI extends WebGLKernelValueSingleArray1DI {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray1DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray2DI extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.setShape(value);\n  }\n\n  setShape(value) {\n    const valueDimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n    this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flatten3dArrayTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray2DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray2DI } = require('./single-array2d-i');\n\nclass WebGLKernelValueDynamicSingleArray2DI extends WebGLKernelValueSingleArray2DI {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray2DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray3DI extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.setShape(value);\n  }\n\n  setShape(value) {\n    const valueDimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n    this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flatten4dArrayTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray3DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray3DI } = require('./single-array3d-i');\n\nclass WebGLKernelValueDynamicSingleArray3DI extends WebGLKernelValueSingleArray3DI {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray3DI\n};", "const { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueArray2 extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const vec2 ${this.id} = vec2(${value[0]},${value[1]});\\n`;\n    }\n    return `uniform vec2 ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    // resetting isn't supported for Array(2)\n    if (this.origin === 'constants') return '';\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform2fv(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueArray2\n};", "const { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueArray3 extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const vec3 ${this.id} = vec3(${value[0]},${value[1]},${value[2]});\\n`;\n    }\n    return `uniform vec3 ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    // resetting isn't supported for Array(3)\n    if (this.origin === 'constants') return '';\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform3fv(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueArray3\n};", "const { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueArray4 extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const vec4 ${this.id} = vec4(${value[0]},${value[1]},${value[2]},${value[3]});\\n`;\n    }\n    return `uniform vec4 ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    // resetting isn't supported for Array(4)\n    if (this.origin === 'constants') return '';\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform4fv(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueArray4\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueUnsignedArray extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = this.getBitRatio(value);\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.TranserArrayType = this.getTransferArrayType(value);\n    this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\n      `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\n      `flattenTo(${this.varName}, preUploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.preUploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueUnsignedArray\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedArray } = require('./unsigned-array');\n\nclass WebGLKernelValueDynamicUnsignedArray extends WebGLKernelValueUnsignedArray {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    const Type = this.getTransferArrayType(value);\n    this.preUploadValue = new Type(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicUnsignedArray\n};", "const { WebGLKernelValueBoolean } = require('./kernel-value/boolean');\nconst { WebGLKernelValueFloat } = require('./kernel-value/float');\nconst { WebGLKernelValueInteger } = require('./kernel-value/integer');\n\nconst { WebGLKernelValueHTMLImage } = require('./kernel-value/html-image');\nconst { WebGLKernelValueDynamicHTMLImage } = require('./kernel-value/dynamic-html-image');\n\nconst { WebGLKernelValueHTMLVideo } = require('./kernel-value/html-video');\nconst { WebGLKernelValueDynamicHTMLVideo } = require('./kernel-value/dynamic-html-video');\n\nconst { WebGLKernelValueSingleInput } = require('./kernel-value/single-input');\nconst { WebGLKernelValueDynamicSingleInput } = require('./kernel-value/dynamic-single-input');\n\nconst { WebGLKernelValueUnsignedInput } = require('./kernel-value/unsigned-input');\nconst { WebGLKernelValueDynamicUnsignedInput } = require('./kernel-value/dynamic-unsigned-input');\n\nconst { WebGLKernelValueMemoryOptimizedNumberTexture } = require('./kernel-value/memory-optimized-number-texture');\nconst { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } = require('./kernel-value/dynamic-memory-optimized-number-texture');\n\nconst { WebGLKernelValueNumberTexture } = require('./kernel-value/number-texture');\nconst { WebGLKernelValueDynamicNumberTexture } = require('./kernel-value/dynamic-number-texture');\n\nconst { WebGLKernelValueSingleArray } = require('./kernel-value/single-array');\nconst { WebGLKernelValueDynamicSingleArray } = require('./kernel-value/dynamic-single-array');\n\nconst { WebGLKernelValueSingleArray1DI } = require('./kernel-value/single-array1d-i');\nconst { WebGLKernelValueDynamicSingleArray1DI } = require('./kernel-value/dynamic-single-array1d-i');\n\nconst { WebGLKernelValueSingleArray2DI } = require('./kernel-value/single-array2d-i');\nconst { WebGLKernelValueDynamicSingleArray2DI } = require('./kernel-value/dynamic-single-array2d-i');\n\nconst { WebGLKernelValueSingleArray3DI } = require('./kernel-value/single-array3d-i');\nconst { WebGLKernelValueDynamicSingleArray3DI } = require('./kernel-value/dynamic-single-array3d-i');\n\nconst { WebGLKernelValueArray2 } = require('./kernel-value/array2');\nconst { WebGLKernelValueArray3 } = require('./kernel-value/array3');\nconst { WebGLKernelValueArray4 } = require('./kernel-value/array4');\n\nconst { WebGLKernelValueUnsignedArray } = require('./kernel-value/unsigned-array');\nconst { WebGLKernelValueDynamicUnsignedArray } = require('./kernel-value/dynamic-unsigned-array');\n\nconst kernelValueMaps = {\n  unsigned: {\n    dynamic: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Integer': WebGLKernelValueInteger,\n      'Float': WebGLKernelValueFloat,\n      'Array': WebGLKernelValueDynamicUnsignedArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGLKernelValueDynamicUnsignedInput,\n      'NumberTexture': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImage': WebGLKernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGLKernelValueDynamicHTMLImage,\n      'ImageData': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Float': WebGLKernelValueFloat,\n      'Integer': WebGLKernelValueInteger,\n      'Array': WebGLKernelValueUnsignedArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGLKernelValueUnsignedInput,\n      'NumberTexture': WebGLKernelValueNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueHTMLImage,\n      'HTMLImage': WebGLKernelValueHTMLImage,\n      'ImageBitmap': WebGLKernelValueHTMLImage,\n      'ImageData': WebGLKernelValueHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueHTMLVideo,\n    }\n  },\n  single: {\n    dynamic: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Integer': WebGLKernelValueInteger,\n      'Float': WebGLKernelValueFloat,\n      'Array': WebGLKernelValueDynamicSingleArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': WebGLKernelValueDynamicSingleArray1DI,\n      'Array1D(3)': WebGLKernelValueDynamicSingleArray1DI,\n      'Array1D(4)': WebGLKernelValueDynamicSingleArray1DI,\n      'Array2D(2)': WebGLKernelValueDynamicSingleArray2DI,\n      'Array2D(3)': WebGLKernelValueDynamicSingleArray2DI,\n      'Array2D(4)': WebGLKernelValueDynamicSingleArray2DI,\n      'Array3D(2)': WebGLKernelValueDynamicSingleArray3DI,\n      'Array3D(3)': WebGLKernelValueDynamicSingleArray3DI,\n      'Array3D(4)': WebGLKernelValueDynamicSingleArray3DI,\n      'Input': WebGLKernelValueDynamicSingleInput,\n      'NumberTexture': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImage': WebGLKernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGLKernelValueDynamicHTMLImage,\n      'ImageData': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Float': WebGLKernelValueFloat,\n      'Integer': WebGLKernelValueInteger,\n      'Array': WebGLKernelValueSingleArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': WebGLKernelValueSingleArray1DI,\n      'Array1D(3)': WebGLKernelValueSingleArray1DI,\n      'Array1D(4)': WebGLKernelValueSingleArray1DI,\n      'Array2D(2)': WebGLKernelValueSingleArray2DI,\n      'Array2D(3)': WebGLKernelValueSingleArray2DI,\n      'Array2D(4)': WebGLKernelValueSingleArray2DI,\n      'Array3D(2)': WebGLKernelValueSingleArray3DI,\n      'Array3D(3)': WebGLKernelValueSingleArray3DI,\n      'Array3D(4)': WebGLKernelValueSingleArray3DI,\n      'Input': WebGLKernelValueSingleInput,\n      'NumberTexture': WebGLKernelValueNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueHTMLImage,\n      'HTMLImage': WebGLKernelValueHTMLImage,\n      'ImageBitmap': WebGLKernelValueHTMLImage,\n      'ImageData': WebGLKernelValueHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueHTMLVideo,\n    }\n  },\n};\n\nfunction lookupKernelValueType(type, dynamic, precision, value) {\n  if (!type) {\n    throw new Error('type missing');\n  }\n  if (!dynamic) {\n    throw new Error('dynamic missing');\n  }\n  if (!precision) {\n    throw new Error('precision missing');\n  }\n  if (value.type) {\n    type = value.type;\n  }\n  const types = kernelValueMaps[precision][dynamic];\n  if (types[type] === false) {\n    return null;\n  } else if (types[type] === undefined) {\n    throw new Error(`Could not find a KernelValue for ${ type }`);\n  }\n  return types[type];\n}\n\nmodule.exports = {\n  lookupKernelValueType,\n  kernelValueMaps,\n};", "const { GLKernel } = require('../gl/kernel');\nconst { FunctionBuilder } = require('../function-builder');\nconst { WebGLFunctionNode } = require('./function-node');\nconst { utils } = require('../../utils');\nconst mrud = require('../../plugins/math-random-uniformly-distributed');\nconst { fragmentShader } = require('./fragment-shader');\nconst { vertexShader } = require('./vertex-shader');\nconst { glKernelString } = require('../gl/kernel-string');\nconst { lookupKernelValueType } = require('./kernel-value-maps');\n\nlet isSupported = null;\n/**\n *\n * @type {HTMLCanvasElement|OffscreenCanvas|null}\n */\nlet testCanvas = null;\n/**\n *\n * @type {WebGLRenderingContext|null}\n */\nlet testContext = null;\nlet testExtensions = null;\nlet features = null;\n\nconst plugins = [mrud];\nconst canvases = [];\nconst maxTexSizes = {};\n\n\n/**\n * @desc Kernel Implementation for WebGL.\n * <p>This builds the shaders and runs them on the GPU,\n * the outputs the result back as float(enabled by default) and Texture.</p>\n *\n * @property {WebGLTexture[]} textureCache - webGl Texture cache\n * @property {Object.<string, WebGLUniformLocation>} programUniformLocationCache - Location of program variables in memory\n * @property {WebGLFramebuffer} framebuffer - Webgl frameBuffer\n * @property {WebGLBuffer} buffer - WebGL buffer\n * @property {WebGLProgram} program - The webGl Program\n * @property {FunctionBuilder} functionBuilder - Function Builder instance bound to this Kernel\n * @property {Boolean} pipeline - Set output type to FAST mode (GPU to GPU via Textures), instead of float\n * @property {string} endianness - Endian information like Little-endian, Big-endian.\n * @property {string[]} argumentTypes - Types of parameters sent to the Kernel\n * @property {string|null} compiledFragmentShader - Compiled fragment shader string\n * @property {string|null} compiledVertexShader - Compiled Vertical shader string\n * @extends GLKernel\n */\nclass WebGLKernel extends GLKernel {\n  static get isSupported() {\n    if (isSupported !== null) {\n      return isSupported;\n    }\n    this.setupFeatureChecks();\n    isSupported = this.isContextMatch(testContext);\n    return isSupported;\n  }\n\n  static setupFeatureChecks() {\n    if (typeof document !== 'undefined') {\n      testCanvas = document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      testCanvas = new OffscreenCanvas(0, 0);\n    }\n    if (!testCanvas) return;\n    testContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');\n    if (!testContext || !testContext.getExtension) return;\n    testExtensions = {\n      OES_texture_float: testContext.getExtension('OES_texture_float'),\n      OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n      OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),\n      WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),\n    };\n    features = this.getFeatures();\n  }\n\n  static isContextMatch(context) {\n    if (typeof WebGLRenderingContext !== 'undefined') {\n      return context instanceof WebGLRenderingContext;\n    }\n    return false;\n  }\n\n  static getIsTextureFloat() {\n    return Boolean(testExtensions.OES_texture_float);\n  }\n\n  static getIsDrawBuffers() {\n    return Boolean(testExtensions.WEBGL_draw_buffers);\n  }\n\n  static getChannelCount() {\n    return testExtensions.WEBGL_draw_buffers ?\n      testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) :\n      1;\n  }\n\n  static getMaxTextureSize() {\n    return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n  }\n\n  /**\n   *\n   * @param type\n   * @param dynamic\n   * @param precision\n   * @param value\n   * @returns {KernelValue}\n   */\n  static lookupKernelValueType(type, dynamic, precision, value) {\n    return lookupKernelValueType(type, dynamic, precision, value);\n  }\n\n  static get testCanvas() {\n    return testCanvas;\n  }\n\n  static get testContext() {\n    return testContext;\n  }\n\n  static get features() {\n    return features;\n  }\n\n  static get fragmentShader() {\n    return fragmentShader;\n  }\n\n  static get vertexShader() {\n    return vertexShader;\n  }\n\n  /**\n   *\n   * @param {String|IKernelJSON} source\n   * @param {IDirectKernelSettings} settings\n   */\n  constructor(source, settings) {\n    super(source, settings);\n    this.program = null;\n    this.pipeline = settings.pipeline;\n    this.endianness = utils.systemEndianness();\n    this.extensions = {};\n    this.argumentTextureCount = 0;\n    this.constantTextureCount = 0;\n    this.fragShader = null;\n    this.vertShader = null;\n    this.drawBuffersMap = null;\n\n    /**\n     *\n     * @type {Int32Array|null}\n     */\n    this.maxTexSize = null;\n    this.onRequestSwitchKernel = null;\n\n    this.texture = null;\n    this.mappedTextures = null;\n    this.mergeSettings(source.settings || settings);\n\n    /**\n     * The thread dimensions, x, y and z\n     * @type {Array|null}\n     */\n    this.threadDim = null;\n    this.framebuffer = null;\n    this.buffer = null;\n\n    this.textureCache = [];\n    this.programUniformLocationCache = {};\n    this.uniform1fCache = {};\n    this.uniform1iCache = {};\n    this.uniform2fCache = {};\n    this.uniform2fvCache = {};\n    this.uniform2ivCache = {};\n    this.uniform3fvCache = {};\n    this.uniform3ivCache = {};\n    this.uniform4fvCache = {};\n    this.uniform4ivCache = {};\n  }\n\n  initCanvas() {\n    if (typeof document !== 'undefined') {\n      const canvas = document.createElement('canvas');\n      // Default width and height, to fix webgl issue in safari\n      canvas.width = 2;\n      canvas.height = 2;\n      return canvas;\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(0, 0);\n    }\n  }\n\n  /**\n   *\n   * @return {WebGLRenderingContext}\n   */\n  initContext() {\n    const settings = {\n      alpha: false,\n      depth: false,\n      antialias: false\n    };\n    return this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);\n  }\n\n  /**\n   *\n   * @param {IDirectKernelSettings} settings\n   * @return {string[]}\n   */\n  initPlugins(settings) {\n    // default plugins\n    const pluginsToUse = [];\n    const { source } = this;\n    if (typeof source === 'string') {\n      for (let i = 0; i < plugins.length; i++) {\n        const plugin = plugins[i];\n        if (source.match(plugin.functionMatch)) {\n          pluginsToUse.push(plugin);\n        }\n      }\n    } else if (typeof source === 'object') {\n      // `source` is from object, json\n      if (settings.pluginNames) { //TODO: in context of JSON support, pluginNames may not exist here\n        for (let i = 0; i < plugins.length; i++) {\n          const plugin = plugins[i];\n          const usePlugin = settings.pluginNames.some(pluginName => pluginName === plugin.name);\n          if (usePlugin) {\n            pluginsToUse.push(plugin);\n          }\n        }\n      }\n    }\n    return pluginsToUse;\n  }\n\n  initExtensions() {\n    this.extensions = {\n      OES_texture_float: this.context.getExtension('OES_texture_float'),\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n      OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),\n      WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),\n      WEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float'),\n    };\n  }\n\n  /**\n   * @desc Validate settings related to Kernel, such as dimensions size, and auto output support.\n   * @param {IArguments} args\n   */\n  validateSettings(args) {\n    if (!this.validate) {\n      this.texSize = utils.getKernelTextureSize({\n        optimizeFloatMemory: this.optimizeFloatMemory,\n        precision: this.precision,\n      }, this.output);\n      return;\n    }\n\n    const { features } = this.constructor;\n\n    if (this.optimizeFloatMemory === true && !features.isTextureFloat) {\n      throw new Error('Float textures are not supported');\n    } else if (this.precision === 'single' && !features.isFloatRead) {\n      throw new Error('Single precision not supported');\n    } else if (!this.graphical && this.precision === null && features.isTextureFloat) {\n      this.precision = features.isFloatRead ? 'single' : 'unsigned';\n    }\n\n    if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {\n      throw new Error('could not instantiate draw buffers extension');\n    }\n\n    if (this.fixIntegerDivisionAccuracy === null) {\n      this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n    } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\n      this.fixIntegerDivisionAccuracy = false;\n    }\n\n    this.checkOutput();\n\n    if (!this.output || this.output.length === 0) {\n      if (args.length !== 1) {\n        throw new Error('Auto output only supported for kernels with only one input');\n      }\n\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\n      switch (argType) {\n        case 'Array':\n          this.output = utils.getDimensions(argType);\n          break;\n        case 'NumberTexture':\n        case 'MemoryOptimizedNumberTexture':\n        case 'ArrayTexture(1)':\n        case 'ArrayTexture(2)':\n        case 'ArrayTexture(3)':\n        case 'ArrayTexture(4)':\n          this.output = args[0].output;\n          break;\n        default:\n          throw new Error('Auto output not supported for input type: ' + argType);\n      }\n    }\n\n    if (this.graphical) {\n      if (this.output.length !== 2) {\n        throw new Error('Output must have 2 dimensions on graphical mode');\n      }\n\n      if (this.precision === 'precision') {\n        this.precision = 'unsigned';\n        console.warn('Cannot use graphical mode and single precision at the same time');\n      }\n\n      this.texSize = utils.clone(this.output);\n      return;\n    } else if (this.precision === null && features.isTextureFloat) {\n      this.precision = 'single';\n    }\n\n    this.texSize = utils.getKernelTextureSize({\n      optimizeFloatMemory: this.optimizeFloatMemory,\n      precision: this.precision,\n    }, this.output);\n\n    this.checkTextureSize();\n  }\n\n  updateMaxTexSize() {\n    const { texSize, canvas } = this;\n    if (this.maxTexSize === null) {\n      let canvasIndex = canvases.indexOf(canvas);\n      if (canvasIndex === -1) {\n        canvasIndex = canvases.length;\n        canvases.push(canvas);\n        maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];\n      }\n      this.maxTexSize = maxTexSizes[canvasIndex];\n    }\n    if (this.maxTexSize[0] < texSize[0]) {\n      this.maxTexSize[0] = texSize[0];\n    }\n    if (this.maxTexSize[1] < texSize[1]) {\n      this.maxTexSize[1] = texSize[1];\n    }\n  }\n\n  setupArguments(args) {\n    this.kernelArguments = [];\n    this.argumentTextureCount = 0;\n    const needsArgumentTypes = this.argumentTypes === null;\n    // TODO: remove\n    if (needsArgumentTypes) {\n      this.argumentTypes = [];\n    }\n    this.argumentSizes = [];\n    this.argumentBitRatios = [];\n    // TODO: end remove\n\n    if (args.length < this.argumentNames.length) {\n      throw new Error('not enough arguments for kernel');\n    } else if (args.length > this.argumentNames.length) {\n      throw new Error('too many arguments for kernel');\n    }\n\n    const { context: gl } = this;\n    let textureIndexes = 0;\n\n    const onRequestTexture = () => {\n      return this.createTexture();\n    };\n    const onRequestIndex = () => {\n      return this.constantTextureCount + textureIndexes++;\n    };\n    const onUpdateValueMismatch = (constructor) => {\n      this.switchKernels({\n        type: 'argumentMismatch',\n        needed: constructor\n      });\n    };\n    const onRequestContextHandle = () => {\n      return gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount++;\n    };\n\n    for (let index = 0; index < args.length; index++) {\n      const value = args[index];\n      const name = this.argumentNames[index];\n      let type;\n      if (needsArgumentTypes) {\n        type = utils.getVariableType(value, this.strictIntegers);\n        this.argumentTypes.push(type);\n      } else {\n        type = this.argumentTypes[index];\n      }\n      const KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? 'dynamic' : 'static', this.precision, args[index]);\n      if (KernelValue === null) {\n        return this.requestFallback(args);\n      }\n      const kernelArgument = new KernelValue(value, {\n        name,\n        type,\n        tactic: this.tactic,\n        origin: 'user',\n        context: gl,\n        checkContext: this.checkContext,\n        kernel: this,\n        strictIntegers: this.strictIntegers,\n        onRequestTexture,\n        onRequestIndex,\n        onUpdateValueMismatch,\n        onRequestContextHandle,\n      });\n      this.kernelArguments.push(kernelArgument);\n      kernelArgument.setup();\n      this.argumentSizes.push(kernelArgument.textureSize);\n      this.argumentBitRatios[index] = kernelArgument.bitRatio;\n    }\n  }\n\n  createTexture() {\n    const texture = this.context.createTexture();\n    this.textureCache.push(texture);\n    return texture;\n  }\n\n  setupConstants(args) {\n    const { context: gl } = this;\n    this.kernelConstants = [];\n    this.forceUploadKernelConstants = [];\n    let needsConstantTypes = this.constantTypes === null;\n    if (needsConstantTypes) {\n      this.constantTypes = {};\n    }\n    this.constantBitRatios = {};\n    let textureIndexes = 0;\n    for (const name in this.constants) {\n      const value = this.constants[name];\n      let type;\n      if (needsConstantTypes) {\n        type = utils.getVariableType(value, this.strictIntegers);\n        this.constantTypes[name] = type;\n      } else {\n        type = this.constantTypes[name];\n      }\n      const KernelValue = this.constructor.lookupKernelValueType(type, 'static', this.precision, value);\n      if (KernelValue === null) {\n        return this.requestFallback(args);\n      }\n      const kernelValue = new KernelValue(value, {\n        name,\n        type,\n        tactic: this.tactic,\n        origin: 'constants',\n        context: this.context,\n        checkContext: this.checkContext,\n        kernel: this,\n        strictIntegers: this.strictIntegers,\n        onRequestTexture: () => {\n          return this.createTexture();\n        },\n        onRequestIndex: () => {\n          return textureIndexes++;\n        },\n        onRequestContextHandle: () => {\n          return gl.TEXTURE0 + this.constantTextureCount++;\n        }\n      });\n      this.constantBitRatios[name] = kernelValue.bitRatio;\n      this.kernelConstants.push(kernelValue);\n      kernelValue.setup();\n      if (kernelValue.forceUploadEachRun) {\n        this.forceUploadKernelConstants.push(kernelValue);\n      }\n    }\n  }\n\n  build() {\n    if (this.built) return;\n    this.initExtensions();\n    this.validateSettings(arguments);\n    this.setupConstants(arguments);\n    if (this.fallbackRequested) return;\n    this.setupArguments(arguments);\n    if (this.fallbackRequested) return;\n    this.updateMaxTexSize();\n    this.translateSource();\n    const failureResult = this.pickRenderStrategy(arguments);\n    if (failureResult) {\n      return failureResult;\n    }\n    const { texSize, context: gl, canvas } = this;\n    gl.enable(gl.SCISSOR_TEST);\n    if (this.pipeline && this.precision === 'single') {\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n      canvas.width = this.maxTexSize[0];\n      canvas.height = this.maxTexSize[1];\n    } else {\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n      canvas.width = this.maxTexSize[0];\n      canvas.height = this.maxTexSize[1];\n    }\n    const threadDim = this.threadDim = Array.from(this.output);\n    while (threadDim.length < 3) {\n      threadDim.push(1);\n    }\n\n    const compiledVertexShader = this.getVertexShader(arguments);\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertShader, compiledVertexShader);\n    gl.compileShader(vertShader);\n    this.vertShader = vertShader;\n\n    const compiledFragmentShader = this.getFragmentShader(arguments);\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragShader, compiledFragmentShader);\n    gl.compileShader(fragShader);\n    this.fragShader = fragShader;\n\n    if (this.debug) {\n      console.log('GLSL Shader Output:');\n      console.log(compiledFragmentShader);\n    }\n\n    if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\n      throw new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));\n    }\n    if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\n      throw new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));\n    }\n\n    const program = this.program = gl.createProgram();\n    gl.attachShader(program, vertShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    this.framebuffer = gl.createFramebuffer();\n    this.framebuffer.width = texSize[0];\n    this.framebuffer.height = texSize[1];\n    this.rawValueFramebuffers = {};\n\n    const vertices = new Float32Array([-1, -1,\n      1, -1, -1, 1,\n      1, 1\n    ]);\n    const texCoords = new Float32Array([\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1\n    ]);\n\n    const texCoordOffset = vertices.byteLength;\n\n    let buffer = this.buffer;\n    if (!buffer) {\n      buffer = this.buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    }\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n    gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);\n\n    const aPosLoc = gl.getAttribLocation(this.program, 'aPos');\n    gl.enableVertexAttribArray(aPosLoc);\n    gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);\n    const aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');\n    gl.enableVertexAttribArray(aTexCoordLoc);\n    gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n    let i = 0;\n    gl.useProgram(this.program);\n    for (let p in this.constants) {\n      this.kernelConstants[i++].updateValue(this.constants[p]);\n    }\n\n    this._setupOutputTexture();\n    if (\n      this.subKernels !== null &&\n      this.subKernels.length > 0\n    ) {\n      this._mappedTextureSwitched = {};\n      this._setupSubOutputTextures();\n    }\n    this.buildSignature(arguments);\n    this.built = true;\n  }\n\n  translateSource() {\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n    });\n    this.translatedSource = functionBuilder.getPrototypeString('kernel');\n    this.setupReturnTypes(functionBuilder);\n  }\n\n  setupReturnTypes(functionBuilder) {\n    if (!this.graphical && !this.returnType) {\n      this.returnType = functionBuilder.getKernelResultType();\n    }\n\n    if (this.subKernels && this.subKernels.length > 0) {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        const subKernel = this.subKernels[i];\n        if (!subKernel.returnType) {\n          subKernel.returnType = functionBuilder.getSubKernelResultType(i);\n        }\n      }\n    }\n  }\n\n  run() {\n    const { kernelArguments, texSize, forceUploadKernelConstants, context: gl } = this;\n\n    gl.useProgram(this.program);\n    gl.scissor(0, 0, texSize[0], texSize[1]);\n    if (this.dynamicOutput) {\n      this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));\n      this.setUniform2iv('uTexSize', texSize);\n    }\n\n    this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n\n    for (let i = 0; i < forceUploadKernelConstants.length; i++) {\n      const constant = forceUploadKernelConstants[i];\n      constant.updateValue(this.constants[constant.name]);\n      if (this.switchingKernels) return;\n    }\n    for (let i = 0; i < kernelArguments.length; i++) {\n      kernelArguments[i].updateValue(arguments[i]);\n      if (this.switchingKernels) return;\n    }\n\n    if (this.plugins) {\n      for (let i = 0; i < this.plugins.length; i++) {\n        const plugin = this.plugins[i];\n        if (plugin.onBeforeRun) {\n          plugin.onBeforeRun(this);\n        }\n      }\n    }\n\n    if (this.graphical) {\n      if (this.pipeline) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n        if (this.immutable) {\n          this._replaceOutputTexture();\n        }\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        return this.immutable ? this.texture.clone() : this.texture;\n      }\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n      return;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    if (this.immutable) {\n      this._replaceOutputTexture();\n    }\n\n    if (this.subKernels !== null) {\n      if (this.immutable) {\n        this._replaceSubOutputTextures();\n      }\n      this.drawBuffers();\n    }\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  drawBuffers() {\n    this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);\n  }\n\n  getInternalFormat() {\n    return this.context.RGBA;\n  }\n  getTextureFormat() {\n    const { context: gl } = this;\n    switch (this.getInternalFormat()) {\n      case gl.RGBA:\n        return gl.RGBA;\n      default:\n        throw new Error('Unknown internal format');\n    }\n  }\n\n  /**\n   *\n   * @desc replace output textures where arguments my be the same values\n   */\n  _replaceOutputTexture() {\n    if (this.texture.beforeMutate() || this._textureSwitched) {\n      const gl = this.context;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n      this._textureSwitched = false;\n    }\n  }\n\n  /**\n   * @desc Setup output texture\n   */\n  _setupOutputTexture() {\n    const gl = this.context;\n    const texSize = this.texSize;\n    if (this.texture) {\n      // here we inherit from an already existing kernel, so go ahead and just bind textures to the framebuffer\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n      return;\n    }\n    const texture = this.createTexture();\n    gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    const format = this.getInternalFormat();\n    if (this.precision === 'single') {\n      gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);\n    }\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    this.texture = new this.TextureConstructor({\n      texture,\n      size: texSize,\n      dimensions: this.threadDim,\n      output: this.output,\n      context: this.context,\n      internalFormat: this.getInternalFormat(),\n      textureFormat: this.getTextureFormat(),\n      kernel: this,\n    });\n  }\n\n  /**\n   *\n   * @desc replace sub-output textures where arguments my be the same values\n   */\n  _replaceSubOutputTextures() {\n    const gl = this.context;\n    for (let i = 0; i < this.mappedTextures.length; i++) {\n      const mappedTexture = this.mappedTextures[i];\n      if (mappedTexture.beforeMutate() || this._mappedTextureSwitched[i]) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);\n        this._mappedTextureSwitched[i] = false;\n      }\n    }\n  }\n\n  /**\n   * @desc Setup on inherit sub-output textures\n   */\n  _setupSubOutputTextures() {\n    const gl = this.context;\n    if (this.mappedTextures) {\n      // here we inherit from an already existing kernel, so go ahead and just bind textures to the framebuffer\n      for (let i = 0; i < this.subKernels.length; i++) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);\n      }\n      return;\n    }\n    const texSize = this.texSize;\n    this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n    this.mappedTextures = [];\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const texture = this.createTexture();\n      this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n      gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      if (this.precision === 'single') {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n      } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\n      this.mappedTextures.push(new this.TextureConstructor({\n        texture,\n        size: texSize,\n        dimensions: this.threadDim,\n        output: this.output,\n        context: this.context,\n        internalFormat: this.getInternalFormat(),\n        textureFormat: this.getTextureFormat(),\n        kernel: this,\n      }));\n    }\n  }\n\n  setUniform1f(name, value) {\n    if (this.uniform1fCache.hasOwnProperty(name)) {\n      const cache = this.uniform1fCache[name];\n      if (value === cache) {\n        return;\n      }\n    }\n    this.uniform1fCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform1f(loc, value);\n  }\n\n  setUniform1i(name, value) {\n    if (this.uniform1iCache.hasOwnProperty(name)) {\n      const cache = this.uniform1iCache[name];\n      if (value === cache) {\n        return;\n      }\n    }\n    this.uniform1iCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform1i(loc, value);\n  }\n\n  setUniform2f(name, value1, value2) {\n    if (this.uniform2fCache.hasOwnProperty(name)) {\n      const cache = this.uniform2fCache[name];\n      if (\n        value1 === cache[0] &&\n        value2 === cache[1]\n      ) {\n        return;\n      }\n    }\n    this.uniform2fCache[name] = [value1, value2];\n    const loc = this.getUniformLocation(name);\n    this.context.uniform2f(loc, value1, value2);\n  }\n\n  setUniform2fv(name, value) {\n    if (this.uniform2fvCache.hasOwnProperty(name)) {\n      const cache = this.uniform2fvCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1]\n      ) {\n        return;\n      }\n    }\n    this.uniform2fvCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform2fv(loc, value);\n  }\n\n  setUniform2iv(name, value) {\n    if (this.uniform2ivCache.hasOwnProperty(name)) {\n      const cache = this.uniform2ivCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1]\n      ) {\n        return;\n      }\n    }\n    this.uniform2ivCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform2iv(loc, value);\n  }\n\n  setUniform3fv(name, value) {\n    if (this.uniform3fvCache.hasOwnProperty(name)) {\n      const cache = this.uniform3fvCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2]\n      ) {\n        return;\n      }\n    }\n    this.uniform3fvCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform3fv(loc, value);\n  }\n\n  setUniform3iv(name, value) {\n    if (this.uniform3ivCache.hasOwnProperty(name)) {\n      const cache = this.uniform3ivCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2]\n      ) {\n        return;\n      }\n    }\n    this.uniform3ivCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform3iv(loc, value);\n  }\n\n  setUniform4fv(name, value) {\n    if (this.uniform4fvCache.hasOwnProperty(name)) {\n      const cache = this.uniform4fvCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2] &&\n        value[3] === cache[3]\n      ) {\n        return;\n      }\n    }\n    this.uniform4fvCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform4fv(loc, value);\n  }\n\n  setUniform4iv(name, value) {\n    if (this.uniform4ivCache.hasOwnProperty(name)) {\n      const cache = this.uniform4ivCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2] &&\n        value[3] === cache[3]\n      ) {\n        return;\n      }\n    }\n    this.uniform4ivCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform4iv(loc, value);\n  }\n\n  /**\n   * @desc Return WebGlUniformLocation for various variables\n   * related to webGl program, such as user-defined variables,\n   * as well as, dimension sizes, etc.\n   */\n  getUniformLocation(name) {\n    if (this.programUniformLocationCache.hasOwnProperty(name)) {\n      return this.programUniformLocationCache[name];\n    }\n    return this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);\n  }\n\n  /**\n   * @desc Generate Shader artifacts for the kernel program.\n   * The final object contains HEADER, KERNEL, MAIN_RESULT, and others.\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   * @returns {Object} An object containing the Shader Artifacts(CONSTANTS, HEADER, KERNEL, etc.)\n   */\n  _getFragShaderArtifactMap(args) {\n    return {\n      HEADER: this._getHeaderString(),\n      LOOP_MAX: this._getLoopMaxString(),\n      PLUGINS: this._getPluginsString(),\n      CONSTANTS: this._getConstantsString(),\n      DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),\n      ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),\n      DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),\n      INJECTED_NATIVE: this._getInjectedNative(),\n      MAIN_CONSTANTS: this._getMainConstantsString(),\n      MAIN_ARGUMENTS: this._getMainArgumentsString(args),\n      KERNEL: this.getKernelString(),\n      MAIN_RESULT: this.getMainResultString(),\n      FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\n      INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\n      SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\n      SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration(),\n    };\n  }\n\n  /**\n   * @desc Generate Shader artifacts for the kernel program.\n   * The final object contains HEADER, KERNEL, MAIN_RESULT, and others.\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   * @returns {Object} An object containing the Shader Artifacts(CONSTANTS, HEADER, KERNEL, etc.)\n   */\n  _getVertShaderArtifactMap(args) {\n    return {\n      FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\n      INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\n      SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\n      SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration(),\n    };\n  }\n\n  /**\n   * @desc Get the header string for the program.\n   * This returns an empty string if no sub-kernels are defined.\n   *\n   * @returns {String} result\n   */\n  _getHeaderString() {\n    return (\n      this.subKernels !== null ?\n      '#extension GL_EXT_draw_buffers : require\\n' :\n      ''\n    );\n  }\n\n  /**\n   * @desc Get the maximum loop size String.\n   * @returns {String} result\n   */\n  _getLoopMaxString() {\n    return (\n      this.loopMaxIterations ?\n      ` ${parseInt(this.loopMaxIterations)};\\n` :\n      ' 1000;\\n'\n    );\n  }\n\n  _getPluginsString() {\n    if (!this.plugins) return '\\n';\n    return this.plugins.map(plugin => plugin.source && this.source.match(plugin.functionMatch) ? plugin.source : '').join('\\n');\n  }\n\n  /**\n   * @desc Generate transpiled glsl Strings for constant parameters sent to a kernel\n   * @returns {String} result\n   */\n  _getConstantsString() {\n    const result = [];\n    const { threadDim, texSize } = this;\n    if (this.dynamicOutput) {\n      result.push(\n        'uniform ivec3 uOutputDim',\n        'uniform ivec2 uTexSize'\n      );\n    } else {\n      result.push(\n        `ivec3 uOutputDim = ivec3(${threadDim[0]}, ${threadDim[1]}, ${threadDim[2]})`,\n        `ivec2 uTexSize = ivec2(${texSize[0]}, ${texSize[1]})`\n      );\n    }\n    return utils.linesToString(result);\n  }\n\n  /**\n   * @desc Get texture coordinate string for the program\n   * @returns {String} result\n   */\n  _getTextureCoordinate() {\n    const subKernels = this.subKernels;\n    if (subKernels === null || subKernels.length < 1) {\n      return 'varying vec2 vTexCoord;\\n';\n    } else {\n      return 'out vec2 vTexCoord;\\n';\n    }\n  }\n\n  /**\n   * @desc Get Decode32 endianness string for little-endian and big-endian\n   * @returns {String} result\n   */\n  _getDecode32EndiannessString() {\n    return (\n      this.endianness === 'LE' ?\n      '' :\n      '  texel.rgba = texel.abgr;\\n'\n    );\n  }\n\n  /**\n   * @desc Get Encode32 endianness string for little-endian and big-endian\n   * @returns {String} result\n   */\n  _getEncode32EndiannessString() {\n    return (\n      this.endianness === 'LE' ?\n      '' :\n      '  texel.rgba = texel.abgr;\\n'\n    );\n  }\n\n  /**\n   * @desc if fixIntegerDivisionAccuracy provide method to replace /\n   * @returns {String} result\n   */\n  _getDivideWithIntegerCheckString() {\n    return this.fixIntegerDivisionAccuracy ?\n      `float divWithIntCheck(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x) / int(y));\n  }\n  return x / y;\n}\n\nfloat integerCorrectionModulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return number - (divisor * floor(divWithIntCheck(number, divisor)));\n}` :\n      '';\n  }\n\n  /**\n   * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\n   * @param {Array} args - The actual parameters sent to the Kernel\n   * @returns {String} result\n   */\n  _getMainArgumentsString(args) {\n    const results = [];\n    const { argumentNames } = this;\n    for (let i = 0; i < argumentNames.length; i++) {\n      results.push(this.kernelArguments[i].getSource(args[i]));\n    }\n    return results.join('');\n  }\n\n  _getInjectedNative() {\n    return this.injectedNative || '';\n  }\n\n  _getMainConstantsString() {\n    const result = [];\n    const { constants } = this;\n    if (constants) {\n      let i = 0;\n      for (const name in constants) {\n        if (!this.constants.hasOwnProperty(name)) continue;\n        result.push(this.kernelConstants[i++].getSource(this.constants[name]));\n      }\n    }\n    return result.join('');\n  }\n\n  getRawValueFramebuffer(width, height) {\n    if (!this.rawValueFramebuffers[width]) {\n      this.rawValueFramebuffers[width] = {};\n    }\n    if (!this.rawValueFramebuffers[width][height]) {\n      const framebuffer = this.context.createFramebuffer();\n      framebuffer.width = width;\n      framebuffer.height = height;\n      this.rawValueFramebuffers[width][height] = framebuffer;\n    }\n    return this.rawValueFramebuffers[width][height];\n  }\n\n  getKernelResultDeclaration() {\n    switch (this.returnType) {\n      case 'Array(2)':\n        return 'vec2 kernelResult';\n      case 'Array(3)':\n        return 'vec3 kernelResult';\n      case 'Array(4)':\n        return 'vec4 kernelResult';\n      case 'LiteralInteger':\n      case 'Float':\n      case 'Number':\n      case 'Integer':\n        return 'float kernelResult';\n      default:\n        if (this.graphical) {\n          return 'float kernelResult';\n        } else {\n          throw new Error(`unrecognized output type \"${ this.returnType }\"`);\n        }\n    }\n  }\n  /**\n   * @desc Get Kernel program string (in *glsl*) for a kernel.\n   * @returns {String} result\n   */\n  getKernelString() {\n    const result = [this.getKernelResultDeclaration()];\n    const { subKernels } = this;\n    if (subKernels !== null) {\n      switch (this.returnType) {\n        case 'Number':\n        case 'Float':\n        case 'Integer':\n          for (let i = 0; i < subKernels.length; i++) {\n            const subKernel = subKernels[i];\n            result.push(\n              subKernel.returnType === 'Integer' ?\n              `int subKernelResult_${ subKernel.name } = 0` :\n              `float subKernelResult_${ subKernel.name } = 0.0`\n            );\n          }\n          break;\n        case 'Array(2)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec2 subKernelResult_${ subKernels[i].name }`\n            );\n          }\n          break;\n        case 'Array(3)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec3 subKernelResult_${ subKernels[i].name }`\n            );\n          }\n          break;\n        case 'Array(4)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec4 subKernelResult_${ subKernels[i].name }`\n            );\n          }\n          break;\n      }\n    }\n\n    return utils.linesToString(result) + this.translatedSource;\n  }\n\n  getMainResultGraphical() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragColor = actualColor',\n    ]);\n  }\n\n  getMainResultPackedPixels() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        return this.getMainResultKernelPackedPixels() +\n          this.getMainResultSubKernelPackedPixels();\n      default:\n        throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n    }\n  }\n\n  /**\n   * @return {String}\n   */\n  getMainResultKernelPackedPixels() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  gl_FragData[0] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(kernelResult)`\n    ]);\n  }\n\n  /**\n   * @return {String}\n   */\n  getMainResultSubKernelPackedPixels() {\n    const result = [];\n    if (!this.subKernels) return '';\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(float(subKernelResult_${this.subKernels[i].name}))`\n        );\n      } else {\n        result.push(\n          `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(subKernelResult_${this.subKernels[i].name})`\n        );\n      }\n    }\n    return utils.linesToString(result);\n  }\n\n  getMainResultMemoryOptimizedFloats() {\n    const result = [\n      '  index *= 4',\n    ];\n\n    switch (this.returnType) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        const channels = ['r', 'g', 'b', 'a'];\n        for (let i = 0; i < channels.length; i++) {\n          const channel = channels[i];\n          this.getMainResultKernelMemoryOptimizedFloats(result, channel);\n          this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\n          if (i + 1 < channels.length) {\n            result.push('  index += 1');\n          }\n        }\n        break;\n      default:\n        throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\n    }\n\n    return utils.linesToString(result);\n  }\n\n  getMainResultKernelMemoryOptimizedFloats(result, channel) {\n    result.push(\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  gl_FragData[0].${channel} = kernelResult`\n    );\n  }\n\n  getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  gl_FragData[${i + 1}].${channel} = float(subKernelResult_${this.subKernels[i].name})`\n        );\n      } else {\n        result.push(\n          `  gl_FragData[${i + 1}].${channel} = subKernelResult_${this.subKernels[i].name}`\n        );\n      }\n    }\n  }\n\n  getMainResultKernelNumberTexture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0][0] = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelNumberTexture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  gl_FragData[${i + 1}][0] = float(subKernelResult_${subKernel.name})`\n        );\n      } else {\n        result.push(\n          `  gl_FragData[${i + 1}][0] = subKernelResult_${subKernel.name}`\n        );\n      }\n    }\n    return result;\n  }\n\n  getMainResultKernelArray2Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0][0] = kernelResult[0]',\n      '  gl_FragData[0][1] = kernelResult[1]',\n    ];\n  }\n\n  getMainResultSubKernelArray2Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      result.push(\n        `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n        `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray3Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0][0] = kernelResult[0]',\n      '  gl_FragData[0][1] = kernelResult[1]',\n      '  gl_FragData[0][2] = kernelResult[2]',\n    ];\n  }\n\n  getMainResultSubKernelArray3Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      result.push(\n        `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n        `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n        `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray4Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0] = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelArray4Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    switch (this.returnType) {\n      case 'Number':\n      case 'Float':\n      case 'Integer':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          const subKernel = this.subKernels[i];\n          if (subKernel.returnType === 'Integer') {\n            result.push(\n              `  gl_FragData[${i + 1}] = float(subKernelResult_${this.subKernels[i].name})`\n            );\n          } else {\n            result.push(\n              `  gl_FragData[${i + 1}] = subKernelResult_${this.subKernels[i].name}`\n            );\n          }\n        }\n        break;\n      case 'Array(2)':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          result.push(\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`\n          );\n        }\n        break;\n      case 'Array(3)':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          result.push(\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n            `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`\n          );\n        }\n        break;\n      case 'Array(4)':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          result.push(\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n            `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,\n            `  gl_FragData[${i + 1}][3] = subKernelResult_${this.subKernels[i].name}[3]`\n          );\n        }\n        break;\n    }\n\n    return result;\n  }\n\n  /**\n   * @param {String} src - Shader string\n   * @param {Object} map - Variables/Constants associated with shader\n   */\n  replaceArtifacts(src, map) {\n    return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\\n/g, (match, artifact) => {\n      if (map.hasOwnProperty(artifact)) {\n        return map[artifact];\n      }\n      throw `unhandled artifact ${artifact}`;\n    });\n  }\n\n  /**\n   * @desc Get the fragment shader String.\n   * If the String hasn't been compiled yet,\n   * then this method compiles it as well\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   * @returns {string} Fragment Shader string\n   */\n  getFragmentShader(args) {\n    if (this.compiledFragmentShader !== null) {\n      return this.compiledFragmentShader;\n    }\n    return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));\n  }\n\n  /**\n   * @desc Get the vertical shader String\n   * @param {Array|IArguments} args - The actual parameters sent to the Kernel\n   * @returns {string} Vertical Shader string\n   */\n  getVertexShader(args) {\n    if (this.compiledVertexShader !== null) {\n      return this.compiledVertexShader;\n    }\n    return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));\n  }\n\n  /**\n   * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n   */\n  toString() {\n    const setupContextString = utils.linesToString([\n      `const gl = context`,\n    ]);\n    return glKernelString(this.constructor, arguments, this, setupContextString);\n  }\n\n  destroy(removeCanvasReferences) {\n    if (!this.context) return;\n    if (this.buffer) {\n      this.context.deleteBuffer(this.buffer);\n    }\n    if (this.framebuffer) {\n      this.context.deleteFramebuffer(this.framebuffer);\n    }\n    for (const width in this.rawValueFramebuffers) {\n      for (const height in this.rawValueFramebuffers[width]) {\n        this.context.deleteFramebuffer(this.rawValueFramebuffers[width][height]);\n        delete this.rawValueFramebuffers[width][height];\n      }\n      delete this.rawValueFramebuffers[width];\n    }\n    if (this.vertShader) {\n      this.context.deleteShader(this.vertShader);\n    }\n    if (this.fragShader) {\n      this.context.deleteShader(this.fragShader);\n    }\n    if (this.program) {\n      this.context.deleteProgram(this.program);\n    }\n    if (this.texture) {\n      this.texture.delete();\n      const textureCacheIndex = this.textureCache.indexOf(this.texture.texture);\n      if (textureCacheIndex > -1) {\n        this.textureCache.splice(textureCacheIndex, 1);\n      }\n      this.texture = null;\n    }\n    if (this.mappedTextures && this.mappedTextures.length) {\n      for (let i = 0; i < this.mappedTextures.length; i++) {\n        const mappedTexture = this.mappedTextures[i];\n        mappedTexture.delete();\n        const textureCacheIndex = this.textureCache.indexOf(mappedTexture.texture);\n        if (textureCacheIndex > -1) {\n          this.textureCache.splice(textureCacheIndex, 1);\n        }\n      }\n      this.mappedTextures = null;\n    }\n    if (this.kernelArguments) {\n      for (let i = 0; i < this.kernelArguments.length; i++) {\n        this.kernelArguments[i].destroy();\n      }\n    }\n    if (this.kernelConstants) {\n      for (let i = 0; i < this.kernelConstants.length; i++) {\n        this.kernelConstants[i].destroy();\n      }\n    }\n    while (this.textureCache.length > 0) {\n      const texture = this.textureCache.pop();\n      this.context.deleteTexture(texture);\n    }\n    if (removeCanvasReferences) {\n      const idx = canvases.indexOf(this.canvas);\n      if (idx >= 0) {\n        canvases[idx] = null;\n        maxTexSizes[idx] = null;\n      }\n    }\n    this.destroyExtensions();\n    delete this.context;\n    delete this.canvas;\n    if (!this.gpu) return;\n    const i = this.gpu.kernels.indexOf(this);\n    if (i === -1) return;\n    this.gpu.kernels.splice(i, 1);\n  }\n\n  destroyExtensions() {\n    this.extensions.OES_texture_float = null;\n    this.extensions.OES_texture_float_linear = null;\n    this.extensions.OES_element_index_uint = null;\n    this.extensions.WEBGL_draw_buffers = null;\n  }\n\n  static destroyContext(context) {\n    const extension = context.getExtension('WEBGL_lose_context');\n    if (extension) {\n      extension.loseContext();\n    }\n  }\n\n  /**\n   * @return {IKernelJSON}\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();\n    json.settings.threadDim = this.threadDim;\n    return json;\n  }\n}\n\nmodule.exports = {\n  WebGLKernel\n};", "const { utils } = require('../../utils');\nconst { WebGLFunctionNode } = require('../web-gl/function-node');\n\n/**\n * @class WebGL2FunctionNode\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to toString its respective webGL code.\n * @extends WebGLFunctionNode\n * @returns the converted webGL function string\n */\nclass WebGL2FunctionNode extends WebGLFunctionNode {\n\n  /**\n   * @desc Parses the abstract syntax tree for *identifier* expression\n   * @param {Object} idtNode - An ast Node\n   * @param {Array} retArr - return array string\n   * @returns {Array} the append retArr\n   */\n  astIdentifierExpression(idtNode, retArr) {\n    if (idtNode.type !== 'Identifier') {\n      throw this.astErrorOutput(\n        'IdentifierExpression - not an Identifier',\n        idtNode\n      );\n    }\n\n    const type = this.getType(idtNode);\n\n    const name = utils.sanitizeName(idtNode.name);\n    if (idtNode.name === 'Infinity') {\n      retArr.push('intBitsToFloat(2139095039)');\n    } else if (type === 'Boolean') {\n      if (this.argumentNames.indexOf(name) > -1) {\n        retArr.push(`bool(user_${name})`);\n      } else {\n        retArr.push(`user_${name}`);\n      }\n    } else {\n      retArr.push(`user_${name}`);\n    }\n\n    return retArr;\n  }\n}\n\nmodule.exports = {\n  WebGL2FunctionNode\n};", "// language=GLSL\nconst fragmentShader = `#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n\nmodule.exports = {\n  fragmentShader\n};", "// language=GLSL\nconst vertexShader = `#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n\nmodule.exports = {\n  vertexShader\n};", "const { WebGLKernelValueBoolean } = require('../../web-gl/kernel-value/boolean');\n\nclass WebGL2KernelValueBoolean extends WebGLKernelValueBoolean {}\n\nmodule.exports = {\n  WebGL2KernelValueBoolean\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueFloat } = require('../../web-gl/kernel-value/float');\n\nclass WebGL2KernelValueFloat extends WebGLKernelValueFloat {}\n\nmodule.exports = {\n  WebGL2KernelValueFloat\n};", "const { WebGLKernelValueInteger } = require('../../web-gl/kernel-value/integer');\n\nclass WebGL2KernelValueInteger extends WebGLKernelValueInteger {\n  getSource(value) {\n    const variablePrecision = this.getVariablePrecisionString();\n    if (this.origin === 'constants') {\n      return `const ${ variablePrecision } int ${this.id} = ${ parseInt(value) };\\n`;\n    }\n    return `uniform ${ variablePrecision } int ${this.id};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueInteger\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueHTMLImage } = require('../../web-gl/kernel-value/html-image');\n\nclass WebGL2KernelValueHTMLImage extends WebGLKernelValueHTMLImage {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueHTMLImage\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicHTMLImage } = require('../../web-gl/kernel-value/dynamic-html-image');\n\nclass WebGL2KernelValueDynamicHTMLImage extends WebGLKernelValueDynamicHTMLImage {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicHTMLImage\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('../../web-gl/kernel-value/array');\n\nclass WebGL2KernelValueHTMLImageArray extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.checkSize(value[0].width, value[0].height);\n    this.dimensions = [value[0].width, value[0].height, value.length];\n    this.textureSize = [value[0].width, value[0].height];\n  }\n  defineTexture() {\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2DArray ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(images) {\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    // Upload the images into the texture.\n    gl.texImage3D(\n      gl.TEXTURE_2D_ARRAY,\n      0,\n      gl.RGBA,\n      images[0].width,\n      images[0].height,\n      images.length,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    );\n    for (let i = 0; i < images.length; i++) {\n      const xOffset = 0;\n      const yOffset = 0;\n      const imageDepth = 1;\n      gl.texSubImage3D(\n        gl.TEXTURE_2D_ARRAY,\n        0,\n        xOffset,\n        yOffset,\n        i,\n        images[i].width,\n        images[i].height,\n        imageDepth,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.uploadValue = images[i]\n      );\n    }\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueHTMLImageArray\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueHTMLImageArray } = require('./html-image-array');\n\nclass WebGL2KernelValueDynamicHTMLImageArray extends WebGL2KernelValueHTMLImageArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2DArray ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(images) {\n    const { width, height } = images[0];\n    this.checkSize(width, height);\n    this.dimensions = [width, height, images.length];\n    this.textureSize = [width, height];\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(images);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicHTMLImageArray\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueHTMLImage } = require('./html-image');\n\nclass WebGL2KernelValueHTMLVideo extends WebGL2KernelValueHTMLImage {}\n\nmodule.exports = {\n  WebGL2KernelValueHTMLVideo\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueDynamicHTMLImage } = require('./dynamic-html-image');\n\nclass WebGL2KernelValueDynamicHTMLVideo extends WebGL2KernelValueDynamicHTMLImage {}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicHTMLVideo\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleInput } = require('../../web-gl/kernel-value/single-input');\n\nclass WebGL2KernelValueSingleInput extends WebGLKernelValueSingleInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(input) {\n    const { context: gl } = this;\n    utils.flattenTo(input.value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleInput\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleInput } = require('../../web-gl2/kernel-value/single-input');\n\nclass WebGL2KernelValueDynamicSingleInput extends WebGL2KernelValueSingleInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedInput } = require('../../web-gl/kernel-value/unsigned-input');\n\nclass WebGL2KernelValueUnsignedInput extends WebGLKernelValueUnsignedInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueUnsignedInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicUnsignedInput } = require('../../web-gl/kernel-value/dynamic-unsigned-input');\n\nclass WebGL2KernelValueDynamicUnsignedInput extends WebGLKernelValueDynamicUnsignedInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicUnsignedInput\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueMemoryOptimizedNumberTexture } = require('../../web-gl/kernel-value/memory-optimized-number-texture');\n\nclass WebGL2KernelValueMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\n  getSource() {\n    const { id, sizeId, textureSize, dimensionsId, dimensions } = this;\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform sampler2D ${id}`,\n      `${ variablePrecision } ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueMemoryOptimizedNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } = require('../../web-gl/kernel-value/dynamic-memory-optimized-number-texture');\n\nclass WebGL2KernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueDynamicMemoryOptimizedNumberTexture {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicMemoryOptimizedNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueNumberTexture } = require('../../web-gl/kernel-value/number-texture');\n\nclass WebGL2KernelValueNumberTexture extends WebGLKernelValueNumberTexture {\n  getSource() {\n    const { id, sizeId, textureSize, dimensionsId, dimensions } = this;\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${id}`,\n      `${ variablePrecision } ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicNumberTexture } = require('../../web-gl/kernel-value/dynamic-number-texture');\n\nclass WebGL2KernelValueDynamicNumberTexture extends WebGLKernelValueDynamicNumberTexture {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicNumberTexture\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray } = require('../../web-gl/kernel-value/single-array');\n\nclass WebGL2KernelValueSingleArray extends WebGLKernelValueSingleArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray } = require('../../web-gl2/kernel-value/single-array');\n\nclass WebGL2KernelValueDynamicSingleArray extends WebGL2KernelValueSingleArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray1DI } = require('../../web-gl/kernel-value/single-array1d-i');\n\nclass WebGL2KernelValueSingleArray1DI extends WebGLKernelValueSingleArray1DI {\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray1DI\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray1DI } = require('../../web-gl2/kernel-value/single-array1d-i');\n\nclass WebGL2KernelValueDynamicSingleArray1DI extends WebGL2KernelValueSingleArray1DI {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray1DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray2DI } = require('../../web-gl/kernel-value/single-array2d-i');\n\nclass WebGL2KernelValueSingleArray2DI extends WebGLKernelValueSingleArray2DI {\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray2DI\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray2DI } = require('../../web-gl2/kernel-value/single-array2d-i');\n\nclass WebGL2KernelValueDynamicSingleArray2DI extends WebGL2KernelValueSingleArray2DI {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray2DI\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray3DI } = require('../../web-gl/kernel-value/single-array3d-i');\n\nclass WebGL2KernelValueSingleArray3DI extends WebGLKernelValueSingleArray3DI {\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray3DI\n};", "const { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray3DI } = require('../../web-gl2/kernel-value/single-array3d-i');\n\nclass WebGL2KernelValueDynamicSingleArray3DI extends WebGL2KernelValueSingleArray3DI {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray3DI\n};", "const { WebGLKernelValueArray2 } = require('../../web-gl/kernel-value/array2');\n\nclass WebGL2KernelValueArray2 extends WebGLKernelValueArray2 {}\n\nmodule.exports = {\n  WebGL2KernelValueArray2\n};", "const { WebGLKernelValueArray3 } = require('../../web-gl/kernel-value/array3');\n\nclass WebGL2KernelValueArray3 extends WebGLKernelValueArray3 {}\n\nmodule.exports = {\n  WebGL2KernelValueArray3\n};", "const { WebGLKernelValueArray4 } = require('../../web-gl/kernel-value/array4');\n\nclass WebGL2KernelValueArray4 extends WebGLKernelValueArray4 {}\n\nmodule.exports = {\n  WebGL2KernelValueArray4\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedArray } = require('../../web-gl/kernel-value/unsigned-array');\n\nclass WebGL2KernelValueUnsignedArray extends WebGLKernelValueUnsignedArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueUnsignedArray\n};", "const { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicUnsignedArray } = require('../../web-gl/kernel-value/dynamic-unsigned-array');\n\nclass WebGL2KernelValueDynamicUnsignedArray extends WebGLKernelValueDynamicUnsignedArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicUnsignedArray\n};", "const { WebGL2KernelValueBoolean } = require('./kernel-value/boolean');\nconst { WebGL2KernelValueFloat } = require('./kernel-value/float');\nconst { WebGL2KernelValueInteger } = require('./kernel-value/integer');\n\nconst { WebGL2KernelValueHTMLImage } = require('./kernel-value/html-image');\nconst { WebGL2KernelValueDynamicHTMLImage } = require('./kernel-value/dynamic-html-image');\n\nconst { WebGL2KernelValueHTMLImageArray } = require('./kernel-value/html-image-array');\nconst { WebGL2KernelValueDynamicHTMLImageArray } = require('./kernel-value/dynamic-html-image-array');\n\nconst { WebGL2KernelValueHTMLVideo } = require('./kernel-value/html-video');\nconst { WebGL2KernelValueDynamicHTMLVideo } = require('./kernel-value/dynamic-html-video');\n\nconst { WebGL2KernelValueSingleInput } = require('./kernel-value/single-input');\nconst { WebGL2KernelValueDynamicSingleInput } = require('./kernel-value/dynamic-single-input');\n\nconst { WebGL2KernelValueUnsignedInput } = require('./kernel-value/unsigned-input');\nconst { WebGL2KernelValueDynamicUnsignedInput } = require('./kernel-value/dynamic-unsigned-input');\n\nconst { WebGL2KernelValueMemoryOptimizedNumberTexture } = require('./kernel-value/memory-optimized-number-texture');\nconst { WebGL2KernelValueDynamicMemoryOptimizedNumberTexture } = require('./kernel-value/dynamic-memory-optimized-number-texture');\n\nconst { WebGL2KernelValueNumberTexture } = require('./kernel-value/number-texture');\nconst { WebGL2KernelValueDynamicNumberTexture } = require('./kernel-value/dynamic-number-texture');\n\nconst { WebGL2KernelValueSingleArray } = require('./kernel-value/single-array');\nconst { WebGL2KernelValueDynamicSingleArray } = require('./kernel-value/dynamic-single-array');\n\nconst { WebGL2KernelValueSingleArray1DI } = require('./kernel-value/single-array1d-i');\nconst { WebGL2KernelValueDynamicSingleArray1DI } = require('./kernel-value/dynamic-single-array1d-i');\n\nconst { WebGL2KernelValueSingleArray2DI } = require('./kernel-value/single-array2d-i');\nconst { WebGL2KernelValueDynamicSingleArray2DI } = require('./kernel-value/dynamic-single-array2d-i');\n\nconst { WebGL2KernelValueSingleArray3DI } = require('./kernel-value/single-array3d-i');\nconst { WebGL2KernelValueDynamicSingleArray3DI } = require('./kernel-value/dynamic-single-array3d-i');\n\nconst { WebGL2KernelValueArray2 } = require('./kernel-value/array2');\nconst { WebGL2KernelValueArray3 } = require('./kernel-value/array3');\nconst { WebGL2KernelValueArray4 } = require('./kernel-value/array4');\n\nconst { WebGL2KernelValueUnsignedArray } = require('./kernel-value/unsigned-array');\nconst { WebGL2KernelValueDynamicUnsignedArray } = require('./kernel-value/dynamic-unsigned-array');\n\nconst kernelValueMaps = {\n  unsigned: {\n    dynamic: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Integer': WebGL2KernelValueInteger,\n      'Float': WebGL2KernelValueFloat,\n      'Array': WebGL2KernelValueDynamicUnsignedArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGL2KernelValueDynamicUnsignedInput,\n      'NumberTexture': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImage': WebGL2KernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGL2KernelValueDynamicHTMLImage,\n      'ImageData': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Float': WebGL2KernelValueFloat,\n      'Integer': WebGL2KernelValueInteger,\n      'Array': WebGL2KernelValueUnsignedArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGL2KernelValueUnsignedInput,\n      'NumberTexture': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueHTMLImage,\n      'HTMLImage': WebGL2KernelValueHTMLImage,\n      'ImageBitmap': WebGL2KernelValueHTMLImage,\n      'ImageData': WebGL2KernelValueHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueHTMLVideo,\n    }\n  },\n  single: {\n    dynamic: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Integer': WebGL2KernelValueInteger,\n      'Float': WebGL2KernelValueFloat,\n      'Array': WebGL2KernelValueDynamicSingleArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': WebGL2KernelValueDynamicSingleArray1DI,\n      'Array1D(3)': WebGL2KernelValueDynamicSingleArray1DI,\n      'Array1D(4)': WebGL2KernelValueDynamicSingleArray1DI,\n      'Array2D(2)': WebGL2KernelValueDynamicSingleArray2DI,\n      'Array2D(3)': WebGL2KernelValueDynamicSingleArray2DI,\n      'Array2D(4)': WebGL2KernelValueDynamicSingleArray2DI,\n      'Array3D(2)': WebGL2KernelValueDynamicSingleArray3DI,\n      'Array3D(3)': WebGL2KernelValueDynamicSingleArray3DI,\n      'Array3D(4)': WebGL2KernelValueDynamicSingleArray3DI,\n      'Input': WebGL2KernelValueDynamicSingleInput,\n      'NumberTexture': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImage': WebGL2KernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGL2KernelValueDynamicHTMLImage,\n      'ImageData': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Float': WebGL2KernelValueFloat,\n      'Integer': WebGL2KernelValueInteger,\n      'Array': WebGL2KernelValueSingleArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': WebGL2KernelValueSingleArray1DI,\n      'Array1D(3)': WebGL2KernelValueSingleArray1DI,\n      'Array1D(4)': WebGL2KernelValueSingleArray1DI,\n      'Array2D(2)': WebGL2KernelValueSingleArray2DI,\n      'Array2D(3)': WebGL2KernelValueSingleArray2DI,\n      'Array2D(4)': WebGL2KernelValueSingleArray2DI,\n      'Array3D(2)': WebGL2KernelValueSingleArray3DI,\n      'Array3D(3)': WebGL2KernelValueSingleArray3DI,\n      'Array3D(4)': WebGL2KernelValueSingleArray3DI,\n      'Input': WebGL2KernelValueSingleInput,\n      'NumberTexture': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueHTMLImage,\n      'HTMLImage': WebGL2KernelValueHTMLImage,\n      'ImageBitmap': WebGL2KernelValueHTMLImage,\n      'ImageData': WebGL2KernelValueHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueHTMLVideo,\n    }\n  },\n};\n\nfunction lookupKernelValueType(type, dynamic, precision, value) {\n  if (!type) {\n    throw new Error('type missing');\n  }\n  if (!dynamic) {\n    throw new Error('dynamic missing');\n  }\n  if (!precision) {\n    throw new Error('precision missing');\n  }\n  if (value.type) {\n    type = value.type;\n  }\n  const types = kernelValueMaps[precision][dynamic];\n  if (types[type] === false) {\n    return null;\n  } else if (types[type] === undefined) {\n    throw new Error(`Could not find a KernelValue for ${ type }`);\n  }\n  return types[type];\n}\n\nmodule.exports = {\n  kernelValueMaps,\n  lookupKernelValueType\n};", "const { WebGLKernel } = require('../web-gl/kernel');\nconst { WebGL2FunctionNode } = require('./function-node');\nconst { FunctionBuilder } = require('../function-builder');\nconst { utils } = require('../../utils');\nconst { fragmentShader } = require('./fragment-shader');\nconst { vertexShader } = require('./vertex-shader');\nconst { lookupKernelValueType } = require('./kernel-value-maps');\n\nlet isSupported = null;\n/**\n *\n * @type {HTMLCanvasElement|OffscreenCanvas}\n */\nlet testCanvas = null;\n/**\n *\n * @type {WebGLRenderingContext}\n */\nlet testContext = null;\nlet testExtensions = null;\n\n/**\n *\n * @type {IKernelFeatures}\n */\nlet features = null;\n\n/**\n * @extends WebGLKernel\n */\nclass WebGL2Kernel extends WebGLKernel {\n  static get isSupported() {\n    if (isSupported !== null) {\n      return isSupported;\n    }\n    this.setupFeatureChecks();\n    isSupported = this.isContextMatch(testContext);\n    return isSupported;\n  }\n\n  static setupFeatureChecks() {\n    if (typeof document !== 'undefined') {\n      testCanvas = document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      testCanvas = new OffscreenCanvas(0, 0);\n    }\n    if (!testCanvas) return;\n    testContext = testCanvas.getContext('webgl2');\n    if (!testContext || !testContext.getExtension) return;\n    testExtensions = {\n      EXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),\n      OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n    };\n    features = this.getFeatures();\n  }\n\n  static isContextMatch(context) {\n    // from global\n    if (typeof WebGL2RenderingContext !== 'undefined') {\n      return context instanceof WebGL2RenderingContext;\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @return {IKernelFeatures}\n   */\n  static getFeatures() {\n    const gl = this.testContext;\n    return Object.freeze({\n      isFloatRead: this.getIsFloatRead(),\n      isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n      isSpeedTacticSupported: this.getIsSpeedTacticSupported(),\n      kernelMap: true,\n      isTextureFloat: true,\n      isDrawBuffers: true,\n      channelCount: this.getChannelCount(),\n      maxTextureSize: this.getMaxTextureSize(),\n      lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),\n      lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),\n      mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),\n      mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),\n      highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),\n      highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT),\n    });\n  }\n\n  static getIsTextureFloat() {\n    return true;\n  }\n\n  static getChannelCount() {\n    return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);\n  }\n\n  static getMaxTextureSize() {\n    return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n  }\n\n  static lookupKernelValueType(type, dynamic, precision, value) {\n    return lookupKernelValueType(type, dynamic, precision, value);\n  }\n\n  static get testCanvas() {\n    return testCanvas;\n  }\n\n  static get testContext() {\n    return testContext;\n  }\n\n  /**\n   *\n   * @returns {{isFloatRead: Boolean, isIntegerDivisionAccurate: Boolean, kernelMap: Boolean, isTextureFloat: Boolean}}\n   */\n  static get features() {\n    return features;\n  }\n\n  static get fragmentShader() {\n    return fragmentShader;\n  }\n  static get vertexShader() {\n    return vertexShader;\n  }\n\n  /**\n   *\n   * @return {WebGLRenderingContext|WebGL2RenderingContext}\n   */\n  initContext() {\n    const settings = {\n      alpha: false,\n      depth: false,\n      antialias: false\n    };\n    return this.canvas.getContext('webgl2', settings);\n  }\n\n  initExtensions() {\n    this.extensions = {\n      EXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n    };\n  }\n\n  /**\n   * @desc Validate settings related to Kernel, such as dimensions size, and auto output support.\n   * @param {IArguments} args\n   */\n  validateSettings(args) {\n    if (!this.validate) {\n      this.texSize = utils.getKernelTextureSize({\n        optimizeFloatMemory: this.optimizeFloatMemory,\n        precision: this.precision,\n      }, this.output);\n      return;\n    }\n\n    const { features } = this.constructor;\n    if (this.precision === 'single' && !features.isFloatRead) {\n      throw new Error('Float texture outputs are not supported');\n    } else if (!this.graphical && this.precision === null) {\n      this.precision = features.isFloatRead ? 'single' : 'unsigned';\n    }\n\n    if (this.fixIntegerDivisionAccuracy === null) {\n      this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n    } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\n      this.fixIntegerDivisionAccuracy = false;\n    }\n\n    this.checkOutput();\n\n    if (!this.output || this.output.length === 0) {\n      if (args.length !== 1) {\n        throw new Error('Auto output only supported for kernels with only one input');\n      }\n\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\n      switch (argType) {\n        case 'Array':\n          this.output = utils.getDimensions(argType);\n          break;\n        case 'NumberTexture':\n        case 'MemoryOptimizedNumberTexture':\n        case 'ArrayTexture(1)':\n        case 'ArrayTexture(2)':\n        case 'ArrayTexture(3)':\n        case 'ArrayTexture(4)':\n          this.output = args[0].output;\n          break;\n        default:\n          throw new Error('Auto output not supported for input type: ' + argType);\n      }\n    }\n\n    if (this.graphical) {\n      if (this.output.length !== 2) {\n        throw new Error('Output must have 2 dimensions on graphical mode');\n      }\n\n      if (this.precision === 'single') {\n        console.warn('Cannot use graphical mode and single precision at the same time');\n        this.precision = 'unsigned';\n      }\n\n      this.texSize = utils.clone(this.output);\n      return;\n    } else if (!this.graphical && this.precision === null && features.isTextureFloat) {\n      this.precision = 'single';\n    }\n\n    this.texSize = utils.getKernelTextureSize({\n      optimizeFloatMemory: this.optimizeFloatMemory,\n      precision: this.precision,\n    }, this.output);\n\n    this.checkTextureSize();\n  }\n\n  translateSource() {\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n    });\n    this.translatedSource = functionBuilder.getPrototypeString('kernel');\n    this.setupReturnTypes(functionBuilder);\n  }\n\n  drawBuffers() {\n    this.context.drawBuffers(this.drawBuffersMap);\n  }\n\n  getTextureFormat() {\n    const { context: gl } = this;\n    switch (this.getInternalFormat()) {\n      case gl.R32F:\n        return gl.RED;\n      case gl.RG32F:\n        return gl.RG;\n      case gl.RGBA32F:\n        return gl.RGBA;\n      case gl.RGBA:\n        return gl.RGBA;\n      default:\n        throw new Error('Unknown internal format');\n    }\n  }\n  getInternalFormat() {\n    const { context: gl } = this;\n\n    if (this.precision === 'single') {\n      if (this.pipeline) {\n        switch (this.returnType) {\n          case 'Number':\n          case 'Float':\n          case 'Integer':\n            if (this.optimizeFloatMemory) {\n              return gl.RGBA32F;\n            } else {\n              return gl.R32F;\n            }\n            case 'Array(2)':\n              return gl.RG32F;\n            case 'Array(3)': // there is _no_ 3 channel format which is guaranteed to be color-renderable\n            case 'Array(4)':\n              return gl.RGBA32F;\n            default:\n              throw new Error('Unhandled return type');\n        }\n      }\n      return gl.RGBA32F;\n    }\n    return gl.RGBA;\n  }\n\n  _setupOutputTexture() {\n    const gl = this.context;\n    if (this.texture) {\n      // here we inherit from an already existing kernel, so go ahead and just bind textures to the framebuffer\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n      return;\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    const texture = gl.createTexture();\n    const texSize = this.texSize;\n    gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    const format = this.getInternalFormat();\n    if (this.precision === 'single') {\n      gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);\n    }\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    this.texture = new this.TextureConstructor({\n      texture,\n      size: texSize,\n      dimensions: this.threadDim,\n      output: this.output,\n      context: this.context,\n      internalFormat: this.getInternalFormat(),\n      textureFormat: this.getTextureFormat(),\n      kernel: this,\n    });\n  }\n\n  _setupSubOutputTextures() {\n    const gl = this.context;\n    if (this.mappedTextures) {\n      // here we inherit from an already existing kernel, so go ahead and just bind textures to the framebuffer\n      for (let i = 0; i < this.subKernels.length; i++) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);\n      }\n      return;\n    }\n    const texSize = this.texSize;\n    this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n    this.mappedTextures = [];\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const texture = this.createTexture();\n      this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n      gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      // TODO: upgrade this\n      const format = this.getInternalFormat();\n      if (this.precision === 'single') {\n        gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n      } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\n      this.mappedTextures.push(new this.TextureConstructor({\n        texture,\n        size: texSize,\n        dimensions: this.threadDim,\n        output: this.output,\n        context: this.context,\n        internalFormat: this.getInternalFormat(),\n        textureFormat: this.getTextureFormat(),\n        kernel: this,\n      }));\n    }\n  }\n\n  /**\n   *\n   * @desc Get the header string for the program.\n   * This returns an empty string if no sub-kernels are defined.\n   *\n   * @returns {String} result\n   */\n  _getHeaderString() {\n    return '';\n  }\n\n  /**\n   * @desc Get texture coordinate string for the program\n   * @returns {String} result\n   */\n  _getTextureCoordinate() {\n    const subKernels = this.subKernels;\n    const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);\n    if (subKernels === null || subKernels.length < 1) {\n      return `in ${ variablePrecision } vec2 vTexCoord;\\n`;\n    } else {\n      return `out ${ variablePrecision } vec2 vTexCoord;\\n`;\n    }\n  }\n\n  /**\n   * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\n   * @param {Array} args - The actual parameters sent to the Kernel\n   * @returns {String} result\n   */\n  _getMainArgumentsString(args) {\n    const result = [];\n    const argumentNames = this.argumentNames;\n    for (let i = 0; i < argumentNames.length; i++) {\n      result.push(this.kernelArguments[i].getSource(args[i]));\n    }\n    return result.join('');\n  }\n\n  /**\n   * @desc Get Kernel program string (in *glsl*) for a kernel.\n   * @returns {String} result\n   */\n  getKernelString() {\n    const result = [this.getKernelResultDeclaration()];\n    const subKernels = this.subKernels;\n    if (subKernels !== null) {\n      result.push(\n        'layout(location = 0) out vec4 data0'\n      );\n      switch (this.returnType) {\n        case 'Number':\n        case 'Float':\n        case 'Integer':\n          for (let i = 0; i < subKernels.length; i++) {\n            const subKernel = subKernels[i];\n            result.push(\n              subKernel.returnType === 'Integer' ?\n              `int subKernelResult_${ subKernel.name } = 0` :\n              `float subKernelResult_${ subKernel.name } = 0.0`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n        case 'Array(2)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec2 subKernelResult_${ subKernels[i].name }`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n        case 'Array(3)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec3 subKernelResult_${ subKernels[i].name }`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n        case 'Array(4)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec4 subKernelResult_${ subKernels[i].name }`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n      }\n    } else {\n      result.push(\n        'out vec4 data0'\n      );\n    }\n\n    return utils.linesToString(result) + this.translatedSource;\n  }\n\n  getMainResultGraphical() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0 = actualColor',\n    ]);\n  }\n\n  getMainResultPackedPixels() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        return this.getMainResultKernelPackedPixels() +\n          this.getMainResultSubKernelPackedPixels();\n      default:\n        throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n    }\n  }\n\n  /**\n   * @return {String}\n   */\n  getMainResultKernelPackedPixels() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  data0 = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(kernelResult)`\n    ]);\n  }\n\n  /**\n   * @return {String}\n   */\n  getMainResultSubKernelPackedPixels() {\n    const result = [];\n    if (!this.subKernels) return '';\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  data${i + 1} = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(float(subKernelResult_${this.subKernels[i].name}))`\n        );\n      } else {\n        result.push(\n          `  data${i + 1} = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(subKernelResult_${this.subKernels[i].name})`\n        );\n      }\n    }\n    return utils.linesToString(result);\n  }\n\n  getMainResultKernelMemoryOptimizedFloats(result, channel) {\n    result.push(\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  data0.${channel} = kernelResult`\n    );\n  }\n\n  getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  data${i + 1}.${channel} = float(subKernelResult_${subKernel.name})`\n        );\n      } else {\n        result.push(\n          `  data${i + 1}.${channel} = subKernelResult_${subKernel.name}`\n        );\n      }\n    }\n  }\n\n  getMainResultKernelNumberTexture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0[0] = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelNumberTexture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  data${i + 1}[0] = float(subKernelResult_${subKernel.name})`\n        );\n      } else {\n        result.push(\n          `  data${i + 1}[0] = subKernelResult_${subKernel.name}`\n        );\n      }\n    }\n    return result;\n  }\n\n  getMainResultKernelArray2Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0[0] = kernelResult[0]',\n      '  data0[1] = kernelResult[1]',\n    ];\n  }\n\n  getMainResultSubKernelArray2Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      result.push(\n        `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,\n        `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray3Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0[0] = kernelResult[0]',\n      '  data0[1] = kernelResult[1]',\n      '  data0[2] = kernelResult[2]',\n    ];\n  }\n\n  getMainResultSubKernelArray3Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      result.push(\n        `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,\n        `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`,\n        `  data${i + 1}[2] = subKernelResult_${subKernel.name}[2]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray4Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0 = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelArray4Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      result.push(\n        `  data${i + 1} = subKernelResult_${this.subKernels[i].name}`\n      );\n    }\n    return result;\n  }\n\n  destroyExtensions() {\n    this.extensions.EXT_color_buffer_float = null;\n    this.extensions.OES_texture_float_linear = null;\n  }\n\n  /**\n   * @return {IKernelJSON}\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();\n    json.settings.threadDim = this.threadDim;\n    return json;\n  }\n}\n\nmodule.exports = {\n  WebGL2Kernel\n};", "const { utils } = require('./utils');\n\n/**\n * Makes kernels easier for mortals (including me)\n * @param kernel\n * @returns {function()}\n */\nfunction kernelRunShortcut(kernel) {\n  let run = function() {\n    kernel.build.apply(kernel, arguments);\n    run = function() {\n      let result = kernel.run.apply(kernel, arguments);\n      if (kernel.switchingKernels) {\n        const reasons = kernel.resetSwitchingKernels();\n        const newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);\n        shortcut.kernel = kernel = newKernel;\n        result = newKernel.run.apply(newKernel, arguments);\n      }\n      if (kernel.renderKernels) {\n        return kernel.renderKernels();\n      } else if (kernel.renderOutput) {\n        return kernel.renderOutput();\n      } else {\n        return result;\n      }\n    };\n    return run.apply(kernel, arguments);\n  };\n  const shortcut = function() {\n    return run.apply(kernel, arguments);\n  };\n  /**\n   * Run kernel in async mode\n   * @returns {Promise<KernelOutput>}\n   */\n  shortcut.exec = function() {\n    return new Promise((accept, reject) => {\n      try {\n        accept(run.apply(this, arguments));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  shortcut.replaceKernel = function(replacementKernel) {\n    kernel = replacementKernel;\n    bindKernelToShortcut(kernel, shortcut);\n  };\n\n  bindKernelToShortcut(kernel, shortcut);\n  return shortcut;\n}\n\nfunction bindKernelToShortcut(kernel, shortcut) {\n  if (shortcut.kernel) {\n    shortcut.kernel = kernel;\n    return;\n  }\n  const properties = utils.allPropertiesOf(kernel);\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    if (property[0] === '_' && property[1] === '_') continue;\n    if (typeof kernel[property] === 'function') {\n      if (property.substring(0, 3) === 'add' || property.substring(0, 3) === 'set') {\n        shortcut[property] = function() {\n          shortcut.kernel[property].apply(shortcut.kernel, arguments);\n          return shortcut;\n        };\n      } else {\n        shortcut[property] = function() {\n          return shortcut.kernel[property].apply(shortcut.kernel, arguments);\n        };\n      }\n    } else {\n      shortcut.__defineGetter__(property, () => shortcut.kernel[property]);\n      shortcut.__defineSetter__(property, (value) => {\n        shortcut.kernel[property] = value;\n      });\n    }\n  }\n  shortcut.kernel = kernel;\n}\nmodule.exports = {\n  kernelRunShortcut\n};", "// const { gpuMock } = require('gpu-mock.js');\nconst { utils } = require('./utils');\nconst { Kernel } = require('./backend/kernel');\nconst { CPUKernel } = require('./backend/cpu/kernel');\n//const { HeadlessGLKernel } = require('./backend/headless-gl/kernel');\nconst { WebGL2Kernel } = require('./backend/web-gl2/kernel');\nconst { WebGLKernel } = require('./backend/web-gl/kernel');\nconst { kernelRunShortcut } = require('./kernel-run-shortcut');\n\n\n/**\n *\n * @type {Array.<Kernel>}\n */\nconst kernelOrder = [/*HeadlessGLKernel,*/ WebGL2Kernel, WebGLKernel];\n\n/**\n *\n * @type {string[]}\n */\nconst kernelTypes = ['gpu', 'cpu'];\n\nconst internalKernels = {\n  //'headlessgl': HeadlessGLKernel,\n  'webgl2': WebGL2Kernel,\n  'webgl': WebGLKernel,\n};\n\nlet validate = true;\n\n/**\n * The GPU.js library class which manages the GPU context for the creating kernels\n * @class\n * @return {GPU}\n */\nclass GPU {\n  static disableValidation() {\n    validate = false;\n  }\n\n  static enableValidation() {\n    validate = true;\n  }\n\n  static get isGPUSupported() {\n    return kernelOrder.some(Kernel => Kernel.isSupported);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  static get isKernelMapSupported() {\n    return kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.kernelMap);\n  }\n\n  /**\n   * @desc TRUE is platform supports OffscreenCanvas\n   */\n  static get isOffscreenCanvasSupported() {\n    return (typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined') || typeof importScripts !== 'undefined';\n  }\n\n  /**\n   * @desc TRUE if platform supports WebGL\n   */\n  static get isWebGLSupported() {\n    return WebGLKernel.isSupported;\n  }\n\n  /**\n   * @desc TRUE if platform supports WebGL2\n   */\n  static get isWebGL2Supported() {\n    return WebGL2Kernel.isSupported;\n  }\n\n  // /**\n  //  * @desc TRUE if platform supports HeadlessGL\n  //  */\n  // static get isHeadlessGLSupported() {\n  //   return HeadlessGLKernel.isSupported;\n  // }\n\n  /**\n   *\n   * @desc TRUE if platform supports Canvas\n   */\n  static get isCanvasSupported() {\n    return typeof HTMLCanvasElement !== 'undefined';\n  }\n\n  /**\n   * @desc TRUE if platform supports HTMLImageArray}\n   */\n  static get isGPUHTMLImageArraySupported() {\n    return WebGL2Kernel.isSupported;\n  }\n\n  /**\n   * @desc TRUE if platform supports single precision}\n   * @returns {boolean}\n   */\n  static get isSinglePrecisionSupported() {\n    return kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat);\n  }\n\n  /**\n   * Creates an instance of GPU.\n   * @param {IGPUSettings} [settings] - Settings to set mode, and other properties\n   * @constructor\n   */\n  constructor(settings) {\n    settings = settings || {};\n    this.canvas = settings.canvas || null;\n    this.context = settings.context || null;\n    this.mode = settings.mode;\n    this.Kernel = null;\n    this.kernels = [];\n    this.functions = [];\n    this.nativeFunctions = [];\n    this.injectedNative = null;\n    if (this.mode === 'dev') return;\n    this.chooseKernel();\n    // add functions from settings\n    if (settings.functions) {\n      for (let i = 0; i < settings.functions.length; i++) {\n        this.addFunction(settings.functions[i]);\n      }\n    }\n\n    // add native functions from settings\n    if (settings.nativeFunctions) {\n      for (const p in settings.nativeFunctions) {\n        if (!settings.nativeFunctions.hasOwnProperty(p)) continue;\n        const s = settings.nativeFunctions[p];\n        const { name, source } = s;\n        this.addNativeFunction(name, source, s);\n      }\n    }\n  }\n\n  /**\n   * Choose kernel type and save on .Kernel property of GPU\n   */\n  chooseKernel() {\n    if (this.Kernel) return;\n\n\n    /* was:\n     * @type {WebGLKernel|WebGL2Kernel|HeadlessGLKernel|CPUKernel}\n     */\n\n    /**\n     * @type {WebGLKernel|WebGL2Kernel|CPUKernel}\n     */\n    let Kernel = null;\n\n    if (this.context) {\n      for (let i = 0; i < kernelOrder.length; i++) {\n        const ExternalKernel = kernelOrder[i];\n        if (ExternalKernel.isContextMatch(this.context)) {\n          if (!ExternalKernel.isSupported) {\n            throw new Error(`Kernel type ${ExternalKernel.name} not supported`);\n          }\n          Kernel = ExternalKernel;\n          break;\n        }\n      }\n      if (Kernel === null) {\n        throw new Error('unknown Context');\n      }\n    } else if (this.mode) {\n      if (this.mode in internalKernels) {\n        if (!validate || internalKernels[this.mode].isSupported) {\n          Kernel = internalKernels[this.mode];\n        }\n      } else if (this.mode === 'gpu') {\n        for (let i = 0; i < kernelOrder.length; i++) {\n          if (kernelOrder[i].isSupported) {\n            Kernel = kernelOrder[i];\n            break;\n          }\n        }\n      } else if (this.mode === 'cpu') {\n        Kernel = CPUKernel;\n      }\n      if (!Kernel) {\n        throw new Error(`A requested mode of \"${this.mode}\" and is not supported`);\n      }\n    } else {\n      for (let i = 0; i < kernelOrder.length; i++) {\n        if (kernelOrder[i].isSupported) {\n          Kernel = kernelOrder[i];\n          break;\n        }\n      }\n      if (!Kernel) {\n        Kernel = CPUKernel;\n      }\n    }\n\n    if (!this.mode) {\n      this.mode = Kernel.mode;\n    }\n    this.Kernel = Kernel;\n  }\n\n  /**\n   * @desc This creates a callable function object to call the kernel function with the argument parameter set\n   * @param {Function|String|object} source - The calling to perform the conversion\n   * @param {IGPUKernelSettings} [settings] - The parameter configuration object\n   * @return {IKernelRunShortcut} callable function to run\n   */\n  createKernel(source, settings) {\n    if (typeof source === 'undefined') {\n      throw new Error('Missing source parameter');\n    }\n    if (typeof source !== 'object' && !utils.isFunction(source) && typeof source !== 'string') {\n      throw new Error('source parameter not a function');\n    }\n\n    const kernels = this.kernels;\n    // if (this.mode === 'dev') {\n    //   const devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));\n    //   kernels.push(devKernel);\n    //   return devKernel;\n    // }\n\n    source = typeof source === 'function' ? source.toString() : source;\n    const switchableKernels = {};\n    const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};\n    // handle conversion of argumentTypes\n    if (settings && typeof settings.argumentTypes === 'object') {\n      settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(argumentName => settings.argumentTypes[argumentName]);\n    }\n\n    function onRequestFallback(args) {\n      console.warn('Falling back to CPU');\n      const fallbackKernel = new CPUKernel(source, {\n        argumentTypes: kernelRun.argumentTypes,\n        constantTypes: kernelRun.constantTypes,\n        graphical: kernelRun.graphical,\n        loopMaxIterations: kernelRun.loopMaxIterations,\n        constants: kernelRun.constants,\n        dynamicOutput: kernelRun.dynamicOutput,\n        dynamicArgument: kernelRun.dynamicArguments,\n        output: kernelRun.output,\n        precision: kernelRun.precision,\n        pipeline: kernelRun.pipeline,\n        immutable: kernelRun.immutable,\n        optimizeFloatMemory: kernelRun.optimizeFloatMemory,\n        fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,\n        functions: kernelRun.functions,\n        nativeFunctions: kernelRun.nativeFunctions,\n        injectedNative: kernelRun.injectedNative,\n        subKernels: kernelRun.subKernels,\n        strictIntegers: kernelRun.strictIntegers,\n        debug: kernelRun.debug,\n      });\n      fallbackKernel.build.apply(fallbackKernel, args);\n      const result = fallbackKernel.run.apply(fallbackKernel, args);\n      kernelRun.replaceKernel(fallbackKernel);\n      return result;\n    }\n\n    /**\n     *\n     * @param {IReason[]} reasons\n     * @param {IArguments} args\n     * @param {Kernel} _kernel\n     * @returns {*}\n     */\n    function onRequestSwitchKernel(reasons, args, _kernel) {\n      if (_kernel.debug) {\n        console.warn('Switching kernels');\n      }\n      let newOutput = null;\n      if (_kernel.signature && !switchableKernels[_kernel.signature]) {\n        switchableKernels[_kernel.signature] = _kernel;\n      }\n      if (_kernel.dynamicOutput) {\n        for (let i = reasons.length - 1; i >= 0; i--) {\n          const reason = reasons[i];\n          if (reason.type === 'outputPrecisionMismatch') {\n            newOutput = reason.needed;\n          }\n        }\n      }\n\n      const Constructor = _kernel.constructor;\n      const argumentTypes = Constructor.getArgumentTypes(_kernel, args);\n      const signature = Constructor.getSignature(_kernel, argumentTypes);\n      const existingKernel = switchableKernels[signature];\n      if (existingKernel) {\n        existingKernel.onActivate(_kernel);\n        return existingKernel;\n      }\n\n      const newKernel = switchableKernels[signature] = new Constructor(source, {\n        argumentTypes,\n        constantTypes: _kernel.constantTypes,\n        graphical: _kernel.graphical,\n        loopMaxIterations: _kernel.loopMaxIterations,\n        constants: _kernel.constants,\n        dynamicOutput: _kernel.dynamicOutput,\n        dynamicArgument: _kernel.dynamicArguments,\n        context: _kernel.context,\n        canvas: _kernel.canvas,\n        output: newOutput || _kernel.output,\n        precision: _kernel.precision,\n        pipeline: _kernel.pipeline,\n        immutable: _kernel.immutable,\n        optimizeFloatMemory: _kernel.optimizeFloatMemory,\n        fixIntegerDivisionAccuracy: _kernel.fixIntegerDivisionAccuracy,\n        functions: _kernel.functions,\n        nativeFunctions: _kernel.nativeFunctions,\n        injectedNative: _kernel.injectedNative,\n        subKernels: _kernel.subKernels,\n        strictIntegers: _kernel.strictIntegers,\n        debug: _kernel.debug,\n        gpu: _kernel.gpu,\n        validate,\n        returnType: _kernel.returnType,\n        tactic: _kernel.tactic,\n        onRequestFallback,\n        onRequestSwitchKernel,\n        texture: _kernel.texture,\n        mappedTextures: _kernel.mappedTextures,\n        drawBuffersMap: _kernel.drawBuffersMap,\n      });\n      newKernel.build.apply(newKernel, args);\n      kernelRun.replaceKernel(newKernel);\n      kernels.push(newKernel);\n      return newKernel;\n    }\n    const mergedSettings = Object.assign({\n      context: this.context,\n      canvas: this.canvas,\n      functions: this.functions,\n      nativeFunctions: this.nativeFunctions,\n      injectedNative: this.injectedNative,\n      gpu: this,\n      validate,\n      onRequestFallback,\n      onRequestSwitchKernel\n    }, settingsCopy);\n\n    const kernel = new this.Kernel(source, mergedSettings);\n    const kernelRun = kernelRunShortcut(kernel);\n\n    //if canvas didn't come from this, propagate from kernel\n    if (!this.canvas) {\n      this.canvas = kernel.canvas;\n    }\n\n    //if context didn't come from this, propagate from kernel\n    if (!this.context) {\n      this.context = kernel.context;\n    }\n\n    kernels.push(kernel);\n\n    return kernelRun;\n  }\n\n  /**\n   *\n   * Create a super kernel which executes sub kernels\n   * and saves their output to be used with the next sub kernel.\n   * This can be useful if we want to save the output on one kernel,\n   * and then use it as an input to another kernel. *Machine Learning*\n   *\n   * @param {Object|Array} subKernels - Sub kernels for this kernel\n   * @param {Function} rootKernel - Root kernel\n   *\n   * @returns {Function} callable kernel function\n   *\n   * @example\n   * const megaKernel = gpu.createKernelMap({\n   *   addResult: function add(a, b) {\n   *     return a[this.thread.x] + b[this.thread.x];\n   *   },\n   *   multiplyResult: function multiply(a, b) {\n   *     return a[this.thread.x] * b[this.thread.x];\n   *   },\n   *  }, function(a, b, c) {\n   *       return multiply(add(a, b), c);\n   * });\n   *\n   * megaKernel(a, b, c);\n   *\n   * Note: You can also define subKernels as an array of functions.\n   * > [add, multiply]\n   *\n   */\n  createKernelMap() {\n    let fn;\n    let settings;\n    const argument2Type = typeof arguments[arguments.length - 2];\n    if (argument2Type === 'function' || argument2Type === 'string') {\n      fn = arguments[arguments.length - 2];\n      settings = arguments[arguments.length - 1];\n    } else {\n      fn = arguments[arguments.length - 1];\n    }\n\n    if (this.mode !== 'dev') {\n      if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {\n        if (this.mode && kernelTypes.indexOf(this.mode) < 0) {\n          throw new Error(`kernelMap not supported on ${this.Kernel.name}`);\n        }\n      }\n    }\n\n    const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);\n    // handle conversion of argumentTypes\n    if (settings && typeof settings.argumentTypes === 'object') {\n      settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(argumentName => settings.argumentTypes[argumentName]);\n    }\n\n    if (Array.isArray(arguments[0])) {\n      settingsCopy.subKernels = [];\n      const functions = arguments[0];\n      for (let i = 0; i < functions.length; i++) {\n        const source = functions[i].toString();\n        const name = utils.getFunctionNameFromString(source);\n        settingsCopy.subKernels.push({\n          name,\n          source,\n          property: i,\n        });\n      }\n    } else {\n      settingsCopy.subKernels = [];\n      const functions = arguments[0];\n      for (let p in functions) {\n        if (!functions.hasOwnProperty(p)) continue;\n        const source = functions[p].toString();\n        const name = utils.getFunctionNameFromString(source);\n        settingsCopy.subKernels.push({\n          name: name || p,\n          source,\n          property: p,\n        });\n      }\n    }\n    return this.createKernel(fn, settingsCopy);\n  }\n\n  /**\n   *\n   * Combine different kernels into one super Kernel,\n   * useful to perform multiple operations inside one\n   * kernel without the penalty of data transfer between\n   * cpu and gpu.\n   *\n   * The number of kernel functions sent to this method can be variable.\n   * You can send in one, two, etc.\n   *\n   * @param {Function} subKernels - Kernel function(s) to combine.\n   * @param {Function} rootKernel - Root kernel to combine kernels into\n   *\n   * @example\n   *   combineKernels(add, multiply, function(a,b,c){\n   *     return add(multiply(a,b), c)\n   *  })\n   *\n   * @returns {Function} Callable kernel function\n   *\n   */\n  combineKernels() {\n    const firstKernel = arguments[0];\n    const combinedKernel = arguments[arguments.length - 1];\n    if (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;\n    const canvas = arguments[0].canvas;\n    const context = arguments[0].context;\n    const max = arguments.length - 1;\n    for (let i = 0; i < max; i++) {\n      arguments[i]\n        .setCanvas(canvas)\n        .setContext(context)\n        .setPipeline(true);\n    }\n\n    return function() {\n      const texture = combinedKernel.apply(this, arguments);\n      if (texture.toArray) {\n        return texture.toArray();\n      }\n      return texture;\n    };\n  }\n\n  setFunctions(functions) {\n    this.functions = functions;\n    return this;\n  }\n\n  setNativeFunctions(nativeFunctions) {\n    this.nativeFunctions = nativeFunctions;\n    return this;\n  }\n\n  /**\n   * @desc Adds additional functions, that the kernel may call.\n   * @param {Function|String} source - Javascript function to convert\n   * @param {IFunctionSettings} [settings]\n   * @returns {GPU} returns itself\n   */\n  addFunction(source, settings) {\n    this.functions.push({ source, settings });\n    return this;\n  }\n\n  /**\n   * @desc Adds additional native functions, that the kernel may call.\n   * @param {String} name - native function name, used for reverse lookup\n   * @param {String} source - the native function implementation, as it would be defined in it's entirety\n   * @param {object} [settings]\n   * @returns {GPU} returns itself\n   */\n  addNativeFunction(name, source, settings) {\n    if (this.kernels.length > 0) {\n      throw new Error('Cannot call \"addNativeFunction\" after \"createKernels\" has been called.');\n    }\n    this.nativeFunctions.push(Object.assign({ name, source }, settings));\n    return this;\n  }\n\n  /**\n   * Inject a string just before translated kernel functions\n   * @param {String} source\n   * @return {GPU}\n   */\n  injectNative(source) {\n    this.injectedNative = source;\n    return this;\n  }\n\n  /**\n   * @desc Destroys all memory associated with gpu.js & the webGl if we created it\n   * @return {Promise}\n   * @resolve {void}\n   * @reject {Error}\n   */\n  destroy() {\n    return new Promise((resolve, reject) => {\n      if (!this.kernels) {\n        resolve();\n      }\n      // perform on next run loop - for some reason we dont get lose context events\n      // if webGl is created and destroyed in the same run loop.\n      setTimeout(() => {\n        try {\n          for (let i = 0; i < this.kernels.length; i++) {\n            this.kernels[i].destroy(true); // remove canvas if exists\n          }\n          // all kernels are associated with one context, go ahead and take care of it here\n          let firstKernel = this.kernels[0];\n          if (firstKernel) {\n            // if it is shortcut\n            if (firstKernel.kernel) {\n              firstKernel = firstKernel.kernel;\n            }\n            if (firstKernel.constructor.destroyContext) {\n              firstKernel.constructor.destroyContext(this.context);\n            }\n          }\n        } catch (e) {\n          reject(e);\n        }\n        resolve();\n      }, 0);\n    });\n  }\n}\n\n\nfunction upgradeDeprecatedCreateKernelSettings(settings) {\n  if (!settings) {\n    return {};\n  }\n  const upgradedSettings = Object.assign({}, settings);\n\n  if (settings.hasOwnProperty('floatOutput')) {\n    utils.warnDeprecated('setting', 'floatOutput', 'precision');\n    upgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';\n  }\n  if (settings.hasOwnProperty('outputToTexture')) {\n    utils.warnDeprecated('setting', 'outputToTexture', 'pipeline');\n    upgradedSettings.pipeline = Boolean(settings.outputToTexture);\n  }\n  if (settings.hasOwnProperty('outputImmutable')) {\n    utils.warnDeprecated('setting', 'outputImmutable', 'immutable');\n    upgradedSettings.immutable = Boolean(settings.outputImmutable);\n  }\n  if (settings.hasOwnProperty('floatTextures')) {\n    utils.warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');\n    upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);\n  }\n  return upgradedSettings;\n}\n\nmodule.exports = {\n  GPU,\n  kernelOrder,\n  kernelTypes\n};", "const { utils } = require('./utils');\n\n/**\n *\n * @param name\n * @param source\n * @returns {Function}\n */\nfunction alias(name, source) {\n  const fnString = source.toString();\n  return new Function(`return function ${ name } (${ utils.getArgumentNamesFromString(fnString).join(', ') }) {\n  ${ utils.getFunctionBodyFromString(fnString) }\n}`)();\n}\n\nmodule.exports = {\n  alias\n};", "const { GPU } = require('./gpu');\nconst { alias } = require('./alias');\nconst { utils } = require('./utils');\nconst { Input, input } = require('./input');\nconst { Texture } = require('./texture');\nconst { FunctionBuilder } = require('./backend/function-builder');\nconst { FunctionNode } = require('./backend/function-node');\nconst { CPUFunctionNode } = require('./backend/cpu/function-node');\nconst { CPUKernel } = require('./backend/cpu/kernel');\n\n// const { HeadlessGLKernel } = require('./backend/headless-gl/kernel');\n\nconst { WebGLFunctionNode } = require('./backend/web-gl/function-node');\nconst { WebGLKernel } = require('./backend/web-gl/kernel');\nconst { kernelValueMaps: webGLKernelValueMaps } = require('./backend/web-gl/kernel-value-maps');\n\nconst { WebGL2FunctionNode } = require('./backend/web-gl2/function-node');\nconst { WebGL2Kernel } = require('./backend/web-gl2/kernel');\nconst { kernelValueMaps: webGL2KernelValueMaps } = require('./backend/web-gl2/kernel-value-maps');\n\nconst { GLKernel } = require('./backend/gl/kernel');\n\nconst { Kernel } = require('./backend/kernel');\n\nconst { FunctionTracer } = require('./backend/function-tracer');\n\nconst mathRandom = require('./plugins/math-random-uniformly-distributed');\n\nmodule.exports = {\n  alias,\n  CPUFunctionNode,\n  CPUKernel,\n  GPU,\n  FunctionBuilder,\n  FunctionNode,\n  // HeadlessGLKernel,\n  Input,\n  input,\n  Texture,\n  utils,\n\n  WebGL2FunctionNode,\n  WebGL2Kernel,\n  webGL2KernelValueMaps,\n\n  WebGLFunctionNode,\n  WebGLKernel,\n  webGLKernelValueMaps,\n\n  GLKernel,\n  Kernel,\n  FunctionTracer,\n\n  plugins: {\n    mathRandom\n  }\n};", "const lib = require('./index');\nconst GPU = lib.GPU;\nfor (const p in lib) {\n  if (!lib.hasOwnProperty(p)) continue;\n  if (p === 'GPU') continue; //prevent recursive reference\n  GPU[p] = lib[p];\n}\n\nif (typeof window !== 'undefined') {\n  bindTo(window);\n}\nif (typeof self !== 'undefined') {\n  bindTo(self);\n}\n\nfunction bindTo(target) {\n  if (target.GPU) return;\n  Object.defineProperty(target, 'GPU', {\n    get() {\n      return GPU;\n    }\n  });\n}\n\nmodule.exports = lib;\nif (typeof window !== 'undefined' && window) {\n  window['GPU'] = lib.GPU;\n}"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA,OAAC,SAAU,QAAQ,SAAS;AAC1B,eAAO,YAAY,YAAY,OAAO,WAAW,cAAc,QAAQ,OAAO,IAC9E,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,CAAC,SAAS,GAAG,OAAO,KACvE,SAAS,UAAU,MAAM,QAAQ,OAAO,QAAQ,CAAC,CAAC;AAAA,MACrD,GAAE,SAAM,SAAUA,UAAS;AAAE;AAI3B,YAAI,gBAAgB;AAAA,UAClB,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,QAAQ;AAAA,UACR,YAAY;AAAA,QACd;AAIA,YAAI,uBAAuB;AAE3B,YAAI,WAAW;AAAA,UACb,GAAG;AAAA,UACH,WAAW,uBAAuB;AAAA,UAClC,GAAG,uBAAuB;AAAA,QAC5B;AAEA,YAAI,4BAA4B;AAShC,YAAI,+BAA+B;AACnC,YAAI,0BAA0B;AAE9B,YAAI,0BAA0B,IAAI,OAAO,MAAM,+BAA+B,GAAG;AACjF,YAAI,qBAAqB,IAAI,OAAO,MAAM,+BAA+B,0BAA0B,GAAG;AAEtG,uCAA+B,0BAA0B;AASzD,YAAI,6BAA6B,CAAC,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,KAAI,KAAI,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,MAAK,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GA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",
  "names": ["exports", "TokenType", "name", "Position", "SourceLocation", "Parser", "parse", "parseExpressionAt", "tokenizer", "value", "ref", "Scope", "Node", "TokContext", "RegExpValidationState", "Token", "value", "value", "ast", "result", "name", "name", "value", "source", "argumentNames", "name", "i", "name", "name", "ast", "declaration", "require_function_node", "name", "name", "require_kernel", "name", "value", "require_texture", "gl", "require_kernel", "value", "require_function_node", "name", "name", "name", "value", "require_kernel_string", "subKernels", "name", "value", "name", "require_kernel_value", "value", "value", "require_float", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "value", "require_kernel", "value", "features", "name", "i", "require_function_node", "name", "require_fragment_shader", "require_vertex_shader", "require_boolean", "require_float", "require_integer", "value", "require_html_image", "require_dynamic_html_image", "value", "require_html_video", "require_dynamic_html_video", "require_single_input", "require_dynamic_single_input", "value", "require_unsigned_input", "require_dynamic_unsigned_input", "require_memory_optimized_number_texture", "require_dynamic_memory_optimized_number_texture", "require_number_texture", "require_dynamic_number_texture", "require_single_array", "value", "require_dynamic_single_array", "value", "require_single_array1d_i", "value", "require_dynamic_single_array1d_i", "value", "require_single_array2d_i", "value", "require_dynamic_single_array2d_i", "value", "require_single_array3d_i", "value", "require_dynamic_single_array3d_i", "value", "require_array2", "require_array3", "require_array4", "require_unsigned_array", "require_dynamic_unsigned_array", "require_kernel_value_maps", "value", "require_kernel", "value", "features", "value", "Kernel", "name", "name"]
}
